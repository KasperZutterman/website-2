{"pageProps":{"githubData":{"data":{"search":{"nodes":[{"title":"Comunica goes out-of-memory","url":"https://github.com/comunica/comunica/issues/826","number":826,"repository":{"name":"comunica","nameWithOwner":"comunica/comunica","url":"https://github.com/comunica/comunica","description":"üì¨ A knowledge graph querying framework for JavaScript"},"assignees":{"totalCount":1},"bodyHTML":"<h4>Issue type:</h4>\n<ul>\n<li><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png\">üêõ</g-emoji> Bug </li>\n</ul>\n<hr>\n<h4>Description:</h4>\n<p>We're experiencing memory issues where a NodeJS process goes out-of-memory within ~20 seconds. We've managed to create a minimum working example that shows the same behaviour, although it takes a bit longer (depending on your hardware and node-js memory settings):</p>\n<div class=\"highlight highlight-source-js position-relative\" data-snippet-clipboard-copy-content=\"const { newEngine } = require(&quot;@comunica/actor-init-sparql-rdfjs&quot;);\nasync function run() {\n  const engine = newEngine();\n  while (true) {\n    await engine.query(&quot;SELECT * WHERE { ?s ?p ?o }&quot;, {\n      sources: [],\n    });\n  }\n}\nrun();\n\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> newEngine <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"@comunica/actor-init-sparql-rdfjs\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">run</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">engine</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">newEngine</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">await</span> <span class=\"pl-s1\">engine</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">query</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"SELECT * WHERE { ?s ?p ?o }\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">sources</span>: <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">run</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p>To test, run:</p>\n<div class=\"highlight highlight-source-shell position-relative\" data-snippet-clipboard-copy-content=\"NODE_OPTIONS=--max-old-space-size=256 node ./mwe.js\n\"><pre>NODE_OPTIONS=--max-old-space-size=256 node ./mwe.js</pre></div>\n<p>(Decreasing the node-js memory is optional. It ensures you don't have to wait too long for the process to crash.)</p>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/LaurensRietveld/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/LaurensRietveld\">@LaurensRietveld</a></p>\n<hr>\n<h4>Environment:</h4>\n\n\n<p><code>node ./node_modules/@comunica/actor-init-sparql/bin/query.js -v</code> prints</p>\n<table role=\"table\">\n<thead>\n<tr>\n<th>software</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Comunica Init Actor</td>\n<td>1.21.1</td>\n</tr>\n<tr>\n<td>node</td>\n<td>v12.22.1</td>\n</tr>\n<tr>\n<td>npm</td>\n<td>6.14.12</td>\n</tr>\n<tr>\n<td>yarn</td>\n<td>1.22.5</td>\n</tr>\n<tr>\n<td>Operating System</td>\n<td>linux (Linux 5.8.0-53-generic)</td>\n</tr>\n</tbody>\n</table>\n<h4>Crash log:</h4>\n<details>\n<summary>Click here to (un)fold the logs</summary>\n<div class=\"snippet-clipboard-content position-relative\" data-snippet-clipboard-copy-content=\"&lt;--- Last few GCs ---&gt;\n\n[97485:0x3280eb0]    72871 ms: Mark-sweep 242.4 (261.0) -&gt; 242.4 (250.0) MB, 99.5 / 1.1 ms  (average mu = 0.138, current mu = 0.000) last resort GC in old space requested\n[97485:0x3280eb0]    72975 ms: Mark-sweep 242.4 (250.0) -&gt; 242.2 (250.0) MB, 103.3 / 1.2 ms  (average mu = 0.072, current mu = 0.000) last resort GC in old space requested\n\n\n&lt;--- JS stacktrace ---&gt;\n\n==== JS stack trace =========================================\n\n    0: ExitFrame [pc: 0x140de99]\nSecurity context: 0x0890d5f408d1 &lt;JSObject&gt;\n    1: set [0x890d5f46691](this=0x3b290c15ed31 &lt;Map map = 0x3a65e180f29&gt;,4294077,0x3b290c15ecc1 &lt;WeakReference map = 0x3a65e1a0739&gt;)\n    2: emitInitNative [0x2f0ae50c25a1] [internal/async_hooks.js:~186] [pc=0x20728fc03e01](this=0x072d3c3e1b49 &lt;PromiseWrap map = 0xc25c91dc319&gt;,4294077,0x0f2388e499d1 &lt;String[#7]: PROMISE&gt;,4294071,0x072d3c3e1b49 &lt;PromiseWrap map = 0...\n\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory\n 1: 0xa1a640 node::Abort() [node]\n 2: 0xa1aa4c node::OnFatalError(char const*, char const*) [node]\n 3: 0xb9a68e v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [node]\n 4: 0xb9aa09 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [node]\n 5: 0xd57c85  [node]\n 6: 0xd685d8 v8::internal::Heap::AllocateRawWithRetryOrFail(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node]\n 7: 0xd2f2cd v8::internal::Factory::NewFixedArrayWithFiller(v8::internal::RootIndex, int, v8::internal::Object, v8::internal::AllocationType) [node]\n 8: 0xd2f3c0 v8::internal::Handle&lt;v8::internal::FixedArray&gt; v8::internal::Factory::NewFixedArrayWithMap&lt;v8::internal::FixedArray&gt;(v8::internal::RootIndex, int, v8::internal::AllocationType) [node]\n 9: 0xf5e100 v8::internal::OrderedHashTable&lt;v8::internal::OrderedHashMap, 2&gt;::Allocate(v8::internal::Isolate*, int, v8::internal::AllocationType) [node]\n10: 0xf5e1b1 v8::internal::OrderedHashTable&lt;v8::internal::OrderedHashMap, 2&gt;::Rehash(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::OrderedHashMap&gt;, int) [node]\n11: 0xf5e7fb v8::internal::OrderedHashTable&lt;v8::internal::OrderedHashMap, 2&gt;::EnsureGrowable(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::OrderedHashMap&gt;) [node]\n12: 0x10550c8 v8::internal::Runtime_MapGrow(int, unsigned long*, v8::internal::Isolate*) [node]\n13: 0x140de99  [node]\nAborted (core dumped)\n\"><pre><code>&lt;--- Last few GCs ---&gt;\n\n[97485:0x3280eb0]    72871 ms: Mark-sweep 242.4 (261.0) -&gt; 242.4 (250.0) MB, 99.5 / 1.1 ms  (average mu = 0.138, current mu = 0.000) last resort GC in old space requested\n[97485:0x3280eb0]    72975 ms: Mark-sweep 242.4 (250.0) -&gt; 242.2 (250.0) MB, 103.3 / 1.2 ms  (average mu = 0.072, current mu = 0.000) last resort GC in old space requested\n\n\n&lt;--- JS stacktrace ---&gt;\n\n==== JS stack trace =========================================\n\n    0: ExitFrame [pc: 0x140de99]\nSecurity context: 0x0890d5f408d1 &lt;JSObject&gt;\n    1: set [0x890d5f46691](this=0x3b290c15ed31 &lt;Map map = 0x3a65e180f29&gt;,4294077,0x3b290c15ecc1 &lt;WeakReference map = 0x3a65e1a0739&gt;)\n    2: emitInitNative [0x2f0ae50c25a1] [internal/async_hooks.js:~186] [pc=0x20728fc03e01](this=0x072d3c3e1b49 &lt;PromiseWrap map = 0xc25c91dc319&gt;,4294077,0x0f2388e499d1 &lt;String[#7]: PROMISE&gt;,4294071,0x072d3c3e1b49 &lt;PromiseWrap map = 0...\n\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory\n 1: 0xa1a640 node::Abort() [node]\n 2: 0xa1aa4c node::OnFatalError(char const*, char const*) [node]\n 3: 0xb9a68e v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [node]\n 4: 0xb9aa09 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [node]\n 5: 0xd57c85  [node]\n 6: 0xd685d8 v8::internal::Heap::AllocateRawWithRetryOrFail(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node]\n 7: 0xd2f2cd v8::internal::Factory::NewFixedArrayWithFiller(v8::internal::RootIndex, int, v8::internal::Object, v8::internal::AllocationType) [node]\n 8: 0xd2f3c0 v8::internal::Handle&lt;v8::internal::FixedArray&gt; v8::internal::Factory::NewFixedArrayWithMap&lt;v8::internal::FixedArray&gt;(v8::internal::RootIndex, int, v8::internal::AllocationType) [node]\n 9: 0xf5e100 v8::internal::OrderedHashTable&lt;v8::internal::OrderedHashMap, 2&gt;::Allocate(v8::internal::Isolate*, int, v8::internal::AllocationType) [node]\n10: 0xf5e1b1 v8::internal::OrderedHashTable&lt;v8::internal::OrderedHashMap, 2&gt;::Rehash(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::OrderedHashMap&gt;, int) [node]\n11: 0xf5e7fb v8::internal::OrderedHashTable&lt;v8::internal::OrderedHashMap, 2&gt;::EnsureGrowable(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::OrderedHashMap&gt;) [node]\n12: 0x10550c8 v8::internal::Runtime_MapGrow(int, unsigned long*, v8::internal::Isolate*) [node]\n13: 0x140de99  [node]\nAborted (core dumped)\n</code></pre></div>\n</details>","createdAt":"2021-06-01T07:53:17Z"},{"title":"Ensure backpressure is maintained in streams","url":"https://github.com/rubensworks/jsonld-streaming-parser.js/issues/71","number":71,"repository":{"name":"jsonld-streaming-parser.js","nameWithOwner":"rubensworks/jsonld-streaming-parser.js","url":"https://github.com/rubensworks/jsonld-streaming-parser.js","description":"A fast and lightweight streaming JSON-LD parser for JavaScript"},"assignees":{"totalCount":0},"bodyHTML":"<p>There may be some places where we are not adhering to Node's backpressure conventions with regards to streams.</p>\n<p>Concretely, we seem to be creating new streams (such as <code>Readable</code>, <code>PassThrough</code> and <code>Transform</code>), and <code>push</code>-ing into them (via a <code>'data'</code> handler on another stream). Node handles backpressuring via the return value of <code>push</code>, which we are ignoring in this manner.</p>\n<p>A better solution would be to simply <code>pipe</code> instead of calling <code>push</code> on each data element.</p>\n<p>Related to <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/rubensworks/rdf-parse.js/commit/269c757935c54b388e1bde076dc29c2afc2e8e7b/hovercard\" href=\"https://github.com/rubensworks/rdf-parse.js/commit/269c757935c54b388e1bde076dc29c2afc2e8e7b\">rubensworks/rdf-parse.js@<tt>269c757</tt></a></p>\n<p>Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"636110731\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rubensworks/jsonld-streaming-parser.js/issues/66\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rubensworks/jsonld-streaming-parser.js/issues/66/hovercard\" href=\"https://github.com/rubensworks/jsonld-streaming-parser.js/issues/66\">#66</a></p>","createdAt":"2020-11-12T14:14:03Z"},{"title":"Throwing `Projection of ungrouped variable` error on valid query","url":"https://github.com/RubenVerborgh/SPARQL.js/issues/120","number":120,"repository":{"name":"SPARQL.js","nameWithOwner":"RubenVerborgh/SPARQL.js","url":"https://github.com/RubenVerborgh/SPARQL.js","description":"A parser for the SPARQL query language in JavaScript"},"assignees":{"totalCount":0},"bodyHTML":"<p>We're encountering issues with the most recent sparqljs releases, where the error checking is too strict.<br>\nThis query is valid, but throws an <code>Projection of ungrouped variable (?p)</code> error:</p>\n<pre><code>select ?p (count(*) as ?n) {\n  [ ?p [] ].\n}\n</code></pre>\n<p>This seems to be introduced by this PR: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"666997350\" data-permission-text=\"Title is private\" data-url=\"https://github.com/RubenVerborgh/SPARQL.js/issues/108\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/RubenVerborgh/SPARQL.js/pull/108/hovercard\" href=\"https://github.com/RubenVerborgh/SPARQL.js/pull/108\">#108</a></p>","createdAt":"2020-10-29T10:13:22Z"},{"title":"URL encoded strings are decoded in IRIs","url":"https://github.com/rdfjs/rdfxml-streaming-parser.js/issues/39","number":39,"repository":{"name":"rdfxml-streaming-parser.js","nameWithOwner":"rdfjs/rdfxml-streaming-parser.js","url":"https://github.com/rdfjs/rdfxml-streaming-parser.js","description":"Streaming RDF/XML parser"},"assignees":{"totalCount":0},"bodyHTML":"<p>Hi, I have a rdf-xml file where an IRI contains the character sequence <code>&amp;#xA;</code>, which is a URL encoding for newlines (<code>\\n</code>). In the output of rdfxml-streaming-parser, this string is decoded, so that my IRI now instead contains <code>\\n</code>. The same can be seen for other strings such as <code>&amp;gt;</code> and <code>&amp;lt;</code>. This is different from what N3 does for turtle-family parsing. I'm not certain which approach would be correct.</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">fs</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'fs'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-v\">RdfXmlParser</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"rdfxml-streaming-parser\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">RdfXmlParser</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">N3</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'n3'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">fs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">createReadStream</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'test.rdf'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">pipe</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">RdfXmlParser</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">on</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'data'</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-s1\">fs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">createReadStream</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'test.ttl'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">pipe</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-c1\">N3</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">StreamParser</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">on</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'data'</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span></pre></div>\n<p>input files:</p>\n<div class=\"highlight highlight-text-xml\"><pre>&lt;?<span class=\"pl-ent\">xml</span><span class=\"pl-e\"> version</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.0<span class=\"pl-pds\">\"</span></span><span class=\"pl-e\"> encoding</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>utf-8<span class=\"pl-pds\">\"</span></span> ?&gt;\n&lt;<span class=\"pl-ent\">rdf</span><span class=\"pl-ent\">:</span><span class=\"pl-ent\">RDF</span> <span class=\"pl-e\">xmlns</span><span class=\"pl-e\">:</span><span class=\"pl-e\">rdf</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://www.w3.org/1999/02/22-rdf-syntax-ns#<span class=\"pl-pds\">\"</span></span>\n         <span class=\"pl-e\">xmlns</span><span class=\"pl-e\">:</span><span class=\"pl-e\">ns0</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b:<span class=\"pl-pds\">\"</span></span>&gt;\n\n  &lt;<span class=\"pl-ent\">rdf</span><span class=\"pl-ent\">:</span><span class=\"pl-ent\">Description</span> <span class=\"pl-e\">rdf</span><span class=\"pl-e\">:</span><span class=\"pl-e\">about</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a:<span class=\"pl-c1\">&amp;#xA;</span><span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">ns0</span><span class=\"pl-ent\">:</span><span class=\"pl-ent\">b</span> <span class=\"pl-e\">rdf</span><span class=\"pl-e\">:</span><span class=\"pl-e\">resource</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c:c<span class=\"pl-pds\">\"</span></span>/&gt;\n  &lt;/<span class=\"pl-ent\">rdf</span><span class=\"pl-ent\">:</span><span class=\"pl-ent\">Description</span>&gt;\n\n&lt;/<span class=\"pl-ent\">rdf</span><span class=\"pl-ent\">:</span><span class=\"pl-ent\">RDF</span>&gt;</pre></div>\n<div class=\"highlight highlight-source-turtle\"><pre><span class=\"pl-en\">&lt;a:&amp;#xA;&gt;&lt;b:b&gt;&lt;c:c&gt;</span>.</pre></div>\n<p>output:</p>\n<pre><code>Quad {\n  subject: NamedNode { value: 'a:\\n' },\n  predicate: NamedNode { value: 'b:b' },\n  object: NamedNode { value: 'c:c' },\n  graph: DefaultGraph { value: '' }\n}\nQuad {\n  subject: NamedNode { id: 'a:&amp;#xA;' },\n  predicate: NamedNode { id: 'b:b' },\n  object: NamedNode { id: 'c:c' },\n  graph: DefaultGraph { id: '' }\n}\n</code></pre>","createdAt":"2020-06-30T12:55:55Z"},{"title":"Parsing issue with SPARQL query on inverse paths in anonymous node","url":"https://github.com/RubenVerborgh/SPARQL.js/issues/99","number":99,"repository":{"name":"SPARQL.js","nameWithOwner":"RubenVerborgh/SPARQL.js","url":"https://github.com/RubenVerborgh/SPARQL.js","description":"A parser for the SPARQL query language in JavaScript"},"assignees":{"totalCount":0},"bodyHTML":"<p><em>Originally reported in by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"645427878\" data-permission-text=\"Title is private\" data-url=\"https://github.com/comunica/comunica/issues/677\" data-hovercard-type=\"issue\" data-hovercard-url=\"/comunica/comunica/issues/677/hovercard\" href=\"https://github.com/comunica/comunica/issues/677\">comunica/comunica#677</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jaw111/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jaw111\">@jaw111</a>.</em></p>\n<p>There is an odd combination of syntax that is flagged as an error.</p>\n<div class=\"highlight highlight-source-sparql\"><pre><span class=\"pl-k\">SELECT</span> *\n<span class=\"pl-k\">WHERE</span> {\n  <span class=\"pl-c1\">?movie</span> <span class=\"pl-k\">a</span> dbpedia-owl:Film ;\n    dbpedia-owl:starring [\n      rdfs:label <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Brad Pitt<span class=\"pl-pds\">\"</span><span class=\"pl-c1\">@en</span></span> ;\n      ^dbpedia-owl:starring <span class=\"pl-c1\">?otherMovie</span>\n    ] .\n}</pre></div>\n<p>Gives the error:</p>\n<pre><code># Parse error on line 21:\n...ad Pitt\"@en ;      ^dbpedia-owl:starrin\n----------------------^\nExpecting 'IRIREF', 'PNAME_NS', 'VAR', '}', 'GRAPH', ';', 'a', ']', 'PNAME_LN', '.', got '^'\n</code></pre>\n<p>Whilst removing the triple pattern for <code>a</code> works just fine:</p>\n<div class=\"highlight highlight-source-sparql\"><pre><span class=\"pl-k\">SELECT</span> *\n<span class=\"pl-k\">WHERE</span> {\n  <span class=\"pl-c1\">?movie</span>\n    dbpedia-owl:starring [\n      rdfs:label <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Brad Pitt<span class=\"pl-pds\">\"</span><span class=\"pl-c1\">@en</span></span> ;\n      ^dbpedia-owl:starring <span class=\"pl-c1\">?otherMovie</span>\n    ] .\n}</pre></div>","createdAt":"2020-06-25T11:32:44Z"},{"title":"Stream goes into flowing mode immediately","url":"https://github.com/rubensworks/jsonld-streaming-parser.js/issues/66","number":66,"repository":{"name":"jsonld-streaming-parser.js","nameWithOwner":"rubensworks/jsonld-streaming-parser.js","url":"https://github.com/rubensworks/jsonld-streaming-parser.js","description":"A fast and lightweight streaming JSON-LD parser for JavaScript"},"assignees":{"totalCount":0},"bodyHTML":"<p>We've experienced some odd issues that are probably caused by race conditions. I think it boils down to the stream going into flowing mode immediately</p>\n<p>Afaik, the stream should only go into flowing mode when:</p>\n<ul>\n<li>We attach an on-data listener</li>\n<li>We pipe it to another writable stream</li>\n<li>We explicitly call <code>resume()</code></li>\n</ul>\n<p>I would expect the below snippet to terminate fast and essentially be a no-op. In reality it isn't, and depending on the size of <code>test.jsonld</code> it will take a while for it to finish.</p>\n<pre><code>const fs = require(\"fs\");\nconst { JsonLdParser } = require(\"./\");\nfs.createReadStream(\"./test.jsonld\")\n  .pipe(\n    new JsonLdParser({\n      baseIRI: \"http://base\"\n    })\n  )\n  //Not registering an on-data listener, so not expecting this stream to start flowing\n  //.on('data', () =&gt; {})\n</code></pre>\n<p>Would you agree with my observation with the stream going into flowing mode too quickly?</p>","createdAt":"2020-06-10T09:55:56Z"},{"title":"Performance issues / memory core dumps with big files","url":"https://github.com/rubensworks/jsonld-streaming-parser.js/issues/65","number":65,"repository":{"name":"jsonld-streaming-parser.js","nameWithOwner":"rubensworks/jsonld-streaming-parser.js","url":"https://github.com/rubensworks/jsonld-streaming-parser.js","description":"A fast and lightweight streaming JSON-LD parser for JavaScript"},"assignees":{"totalCount":0},"bodyHTML":"<p>We're experiencing the jsonld streaming parser to go out of memory for large files.</p>\n<p>To reproduce, store the following file as <code>test.js</code> in the project directory.</p>\n<pre><code>const fs = require(\"fs\");\nconst { JsonLdParser } = require(\"./\");\nconst zlib = require(\"zlib\");\nfs.createReadStream(\"./test.jsonld.gz\")\n  .pipe(zlib.createGunzip())\n  .pipe(\n    new JsonLdParser({\n      baseIRI: \"http://base\"\n    })\n  )\n  .on('data', () =&gt; {})\n</code></pre>\n<p>To run this file:</p>\n<pre><code>curl https://test.triply.cc/laurensrietveld/iconclass/assets/5eda510c6300450368fbd900 -L &gt; test.jsonld.gz;\nnode test\n</code></pre>\n<p>Tested on version <code>2.0.2</code> and node <code>12.18.0</code> / <code>14.4.0</code>.</p>","createdAt":"2020-06-09T08:31:31Z"}]}}}},"__N_SSG":true}