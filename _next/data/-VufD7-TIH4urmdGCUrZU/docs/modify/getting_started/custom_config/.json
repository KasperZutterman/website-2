{"pageProps":{"frontmatter":{"title":"Creating a custom configuration","description":"Create a custom configuration of Comunica modules with specific features."},"body":"\nWhile packages such as [Comunica SPARQL](https://github.com/comunica/comunica/tree/master/packages/actor-init-sparql)\nship with a default configuration that offer specific querying functionality,\nit is possible to **override these configurations**,\nso that you can modify the internal capabilities of your query engine.\n\nIn this guide, we will keep it simple,\nand we will just **remove some parts of the config file** to create a more lightweight query engine.\nIn a next guide, we will look into [adding a component to a config file](/docs/modify/getting_started/custom_config_add/). \n\n<div class=\"note\">\nThis guide assumes basic knowledge on querying with Comunica.\nIf you haven't looked into this yet, it is recommended to follow\n<a href=\"/docs/query/getting_started/\">one of the getting started guides</a>.\n</div>\n\n## 1. Requirements of a config file\n\nComunica is composed of a **set of _[actors](/docs/modify/advanced/architecture/)_**\nthat execute specific tasks.\nFor example, all SPARQL query operators (`DISTINCT`, `FILTER`, `ASK`, ...)\nhave a corresponding actor that implements them in a certain way.\n\nBy modifying the Comunica config file,\nit is possible to **plug in** different implementations for certain SPARQL query operators,\nin case you for example have a more efficient implementation yourself. \n\n### Main config file\n\nA **Comunica config is written in JSON**, and typically looks something like this:\n```json\n{\n  \"@context\": [\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-sparql/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^1.0.0/components/context.jsonld\"\n  ],\n  \"@id\": \"urn:comunica:my\",\n  \"@type\": \"Runner\",\n  \"import\": [\n    \"files-cais:config/sets/rdf-parsers.json\",\n    \"files-cais:config/sets/sparql-queryoperators.json\",\n    \"files-cais:config/sets/sparql-serializers.json\"\n  ]\n}\n``` \n\nEssentially, this config file contains a list of _config sets_, which are references to _other_ config files,\nwhich are loaded in when Comunica reads this config file.\n\nThese config sets contain groups of actors.\nFor example, `files-cais:config/sets/sparql-queryoperators.json`\ncontains multiple SPARQL operator actors.\n\n### Imported config file\n\nFor example, the imported config file `files-cais:config/sets/sparql-queryoperators.json` could look something like this:\n```json\n{\n  \"@context\": [\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-sparql/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^1.0.0/components/context.jsonld\",\n\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-operation/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-ask/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-distinct-hash/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-filter-sparqlee/^1.0.0/components/context.jsonld\",\n\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/^1.0.0/components/context.jsonld\"\n  ],\n  \"@id\": \"urn:comunica:my\",\n  \"actors\": [\n    {\n      \"@id\": \"config-sets:sparql-queryoperators.json#myDistinctQueryOperator\",\n      \"@type\": \"ActorQueryOperationDistinctHash\",\n      \"cbqo:mediatorQueryOperation\": { \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\" }\n    },\n    {\n      \"@id\": \"config-sets:sparql-queryoperators.json#myFilterQueryOperator\",\n      \"@type\": \"ActorQueryOperationFilterSparqlee\",\n      \"cbqo:mediatorQueryOperation\": { \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\" }\n    },\n    {\n      \"@id\": \"config-sets:sparql-queryoperators.json#myAskQueryOperator\",\n      \"@type\": \"ActorQueryOperationAsk\",\n      \"cbqo:mediatorQueryOperation\": { \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\" }\n    }\n  ]\n}\n```\n\nThis example `files-cais:config/sets/sparql-queryoperators.json` config file contains three _[actors](/docs/modify/advanced/architecture/)_ that will be loaded into Comunica,\nwhich each fulfill a specific task:\n\n* `ActorQueryOperationDistinctHash`: Executes the SPARQL `DISTINCT` operator.\n* `ActorQueryOperationFilterSparqlee`: Executes SPARQL `FILTER` expressions.\n* `ActorQueryOperationAsk`: Executes SPARQL `ASK` queries.\n\n<div class=\"note\">\nWhile the exact meaning of these config files are not important for this guide,\nif you want to learn more about its details,\nhave a look at the guide on\n<a href=\"/docs/modify/advanced/configs/\">configuration files</a>.\n</div>\n\n## 2. Install Comunica SPARQL\n\nSince we want to override the default config of **Comunica SPARQL**,\nwe have to make sure its package is installed first:\n\n```bash\n$ npm install -g @comunica/actor-init-sparql\n```\n\n## 3. Start from an existing config file\n\nThe easiest way to create a custom config, is to start from an existing one, and add/remove things to fit your needs.\n\nLet's start by creating a new empty directory,\nand create a file called `config.json`.\n\nIn this guide, we will start from\nthe [Comunica SPARQL default config file](https://github.com/comunica/comunica/blob/master/packages/actor-init-sparql/config/config-default.json).\nLet's **copy it's contents entirely into our `config.json`**:\n```json\n{\n  \"@context\": [\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-sparql/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^1.0.0/components/context.jsonld\"\n  ],\n  \"@id\": \"urn:comunica:my\",\n  \"@type\": \"Runner\",\n  \"import\": [\n    \"files-cais:config/sets/http.json\",\n    \"files-cais:config/sets/http-memento.json\",\n    \"files-cais:config/sets/join.json\",\n    \"files-cais:config/sets/rdf-dereference.json\",\n    \"files-cais:config/sets/rdf-parsers.json\",\n    \"files-cais:config/sets/rdf-serializers.json\",\n    \"files-cais:config/sets/resolve-federated.json\",\n    \"files-cais:config/sets/resolve-hypermedia.json\",\n    \"files-cais:config/sets/resolve-rdfjs.json\",\n    \"files-cais:config/sets/resolve-sparql.json\",\n    \"files-cais:config/sets/sparql-init.json\",\n    \"files-cais:config/sets/graphql-parsers.json\",\n    \"files-cais:config/sets/sparql-optimize.json\",\n    \"files-cais:config/sets/sparql-parsers.json\",\n    \"files-cais:config/sets/sparql-queryoperators.json\",\n    \"files-cais:config/sets/sparql-queryoperators-path.json\",\n    \"files-cais:config/sets/sparql-serializers.json\"\n  ]\n}\n```\n\n## 4. Execute with Comunica SPARQL\n\nWhile we usually use `comunica-sparql` to invoke Comunica SPARQL on the command line,\nwe can instead call `comunica-dynamic-sparql` with exactly the same arguments\nto allow **loading in a custom config file**.\n\nIn order to specify a custom config file,\nwe have to set the path to our config file via the `COMUNICA_CONFIG` environment variable:\n```bash\n$ export COMUNICA_CONFIG=\"config.json\"\n```\n\nIf you now execute `comunica-dynamic-sparql`,\nit will load in your `config.json` file.\n\nLet's try a simple query to see if this works:\n```bash\n$ comunica-dynamic-sparql http://fragments.dbpedia.org/2016-04/en \\\n    \"CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100\"\n```\n\n<div class=\"note\">\nIf you don't define the <code>COMUNICA_CONFIG</code> environment variable,\n<code>comunica-dynamic-sparql</code> will fallback to the default Comunica SPARQL config file.\n</div>\n\n<div class=\"note\">\n<code>comunica-dynamic-sparql</code> has a significant startup delay compared to <code>comunica-sparql</code>,\nsince it now have to load in, parse, and interpret a config file.\n<code>comunica-dynamic-sparql</code> should therefore only be used for simple testing\nbefore you <a href=\"/docs/modify/getting_started/custom_package/\">expose your query engine into a standalone reusable package</a>.\n</div>\n\n## 5. Removing RDF serialization actors\n\nAs an example, we will **remove all actors that can output results in any RDF format**.\nAll of these actors are defined in the `files-cais:config/sets/rdf-serializers.json` config file.\n\nBefore we make any changes to our config file,\nlet us inspect the result formats that are currently available:\n```bash\n$ comunica-dynamic-sparql --listformats\napplication/ld+json\napplication/trig\napplication/n-quads\ntext/turtle\napplication/n-triples\ntext/n3\nstats\ntree\ntable\napplication/sparql-results+xml\ntext/tab-separated-values\napplication/sparql-results+json\ntext/csv\nsimple\napplication/json\n```\n\nThe first 6 of those formats are RDF serialization formats,\nwhich are mainly used for outputting `CONSTRUCT` query results.\n\nIf we want to remove those actors from the config file,\nwe can apply remove the following line from our `config.json`:\n```text\n    \"files-cais:config/sets/rdf-serializers.json\",\n```\n\nIf we now inspect the available result formats, we get the following:\n```bash\n$ comunica-dynamic-sparql --listformats\nstats\ntree\ntable\napplication/sparql-results+xml\ntext/tab-separated-values\napplication/sparql-results+json\ntext/csv\nsimple\napplication/json\n```\n\nAs you can see, the 6 RDF serialization formats are not present anymore.\nThis is because Comunica has not loaded them in because we have removed them from our config file.\n\n## 6. Only allowing `SELECT` queries\n\nLet's take our config modifications a step further,\nand let's say our goal is to build a query engine that can **_only_ execute `SELECT`** queries,\nand we don't want to be able to execute `CONSTRUCT` and `DESCRIBE` queries.\nThis will require us to remove some more actors.\n\nWhile the actors for `CONSTRUCT` and `DESCRIBE` are defined in `files-cais:config/sets/sparql-queryoperators.json`,\nwe can not just simply remove that file from our imports,\nbecause it also contains actors for other SPARQL query operators which we don't want to remove, such as `SELECT`.\nInstead of _just_ removing `files-cais:config/sets/sparql-queryoperators.json`,\nwe will remove it _and_ copy its contents directly into our config file.\n\n### Inline an imported config\n\nTo do this, first **remove** the following line from our `config.json`:\n```text\n    \"files-cais:config/sets/sparql-queryoperators.json\",\n```\n\nNext, **copy the `\"actors\"` entry** (including all values) from [`files-cais:config/sets/sparql-queryoperators.json`](https://raw.githubusercontent.com/comunica/comunica/master/packages/actor-init-sparql/config/sets/sparql-queryoperators.json) ([GitHub](https://github.com/comunica/comunica/blob/master/packages/actor-init-sparql/config/sets/sparql-queryoperators.json)),\nand paste it after the `\"import\"` entry in our `config.json`.\nAdditionally, **copy all the `\"@context\"` entries** from [`files-cais:config/sets/sparql-queryoperators.json`](https://raw.githubusercontent.com/comunica/comunica/master/packages/actor-init-sparql/config/sets/sparql-queryoperators.json) ([GitHub](https://github.com/comunica/comunica/blob/master/packages/actor-init-sparql/config/sets/sparql-queryoperators.json)),\nand overwrite the `\"@context\"` from our `config.json` with it.\n\nYour `config.json` file should have the following structure now:\n```text\n{\n  \"@context\": [\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-sparql/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^1.0.0/components/context.jsonld\",\n\t\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-operation/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-ask/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-bgp-empty/^1.0.0/components/context.jsonld\",\n    ...\n  ]\n  \"@id\": \"urn:comunica:my\",\n  \"@type\": \"Runner\",\n  \"import\": [\n    \"files-cais:config/sets/http.json\",\n    \"files-cais:config/sets/http-memento.json\",\n    ...\n  ],\n  \"actors\": [\n    {\n      \"@id\": \"config-sets:sparql-queryoperators.json#myAskQueryOperator\",\n      \"@type\": \"ActorQueryOperationAsk\",\n      \"cbqo:mediatorQueryOperation\": {\n        \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\",\n        \"@type\": \"MediatorNumberMin\",\n        \"field\": \"httpRequests\",\n        \"ignoreErrors\": true,\n        \"cc:Mediator/bus\": { \"@id\": \"cbqo:Bus/QueryOperation\" }\n      }\n    },\n\n    {\n      \"@id\": \"config-sets:sparql-queryoperators.json#myServiceQueryOperator\",\n      \"@type\": \"ActorQueryOperationService\",\n      \"cbqo:mediatorQueryOperation\": { \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\" },\n      \"caqoserv:Actor/QueryOperation/Service/forceSparqlEndpoint\": false\n    },\n\n    {\n      \"@id\": \"config-sets:sparql-queryoperators.json#mySliceQueryOperator\",\n      \"@type\": \"ActorQueryOperationSlice\",\n      \"cbqo:mediatorQueryOperation\": { \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\" }\n    },\n\n    ...\n  ]\n}\n```\n\n<div class=\"note\">\nAt this point, your config file should still be valid.\nConfirm this by executing <code>comunica-dynamic-sparql</code>.\n</div>\n\n### Remove actors\n\nNext, we will remove the actors we don't need.\nConcretely, we will remove the actors of the following types:\n\n* `ActorQueryOperationConstruct`: Handles `CONSTRUCT` queries.\n* `ActorQueryOperationDescribeSubject`: Handles `DESCRIBE` queries.\n\nFor this, find the actors (in the `\"actors\"` array),\nand remove all actors with `\"@type\"` set to one of the above.\n\nConcretely, we will remove the following entries:\n\n```text\n   {\n      \"@id\": \"config-sets:sparql-queryoperators.json#myConstructQueryOperator\",\n      \"@type\": \"ActorQueryOperationConstruct\",\n      \"cbqo:mediatorQueryOperation\": { \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\" }\n    },\n\n    {\n      \"@id\": \"config-sets:sparql-queryoperators.json#myDescribeQueryOperator\",\n      \"@type\": \"ActorQueryOperationDescribeSubject\",\n      \"cbqo:mediatorQueryOperation\": { \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\" }\n    },\n```\n\n### Test changes\n\nAfter this change, you should now be unable to execute `CONSTRUCT` or `DESCRIBE` queries.\nTry this out by executing the following:\n```bash\n$ comunica-dynamic-sparql http://fragments.dbpedia.org/2016-04/en \\\n    \"CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100\"\n```\n\nExecuting a `SELECT` query will still work:\n```bash\n$ comunica-dynamic-sparql http://fragments.dbpedia.org/2016-04/en \\\n    \"SELECT WHERE { ?s ?p ?o } LIMIT 100\"\n```\n\nYou have now successfully built your own custom Comunica engine that is a bit more lightweight than the default one.\nJust like the `CONSTRUCT` and `DESCRIBE` actors,\nyou can remove any other actors you don't want to make it even more lightweight.\n\n## 7. Execute in a JavaScript app\n\nUp until now, we have tested our changes on the command line with `comunica-dynamic-sparql`.\nWe can however also **load this config from a JavaScript application**.\n\nIf you're starting from scratch, first initialize a new JavaScript application:\n```bash\n$ npm init\n$ npm touch main.js # the file in which we can write our app.\n```\n\nFirst, make sure Comunica SPARQL (`@comunica/actor-init-sparql`) is installed as a dependency.\n```bash\n$ npm install @comunica/actor-init-sparql\n```\n\nWhile [`newEngine()` is used to import Comunica SPARQL's default config](/docs/query/getting_started/query_app/),\nwe can load a custom config by creating our engine via `newEngineDynamic()`:\n```javascript\nconst newEngineDynamic = require('@comunica/actor-init-sparql').newEngineDynamic;\n\nconst myEngine = await newEngineDynamic({\n  configResourceUrl: 'config.json', // Relative or absolute path \n});\n```\n\nThe API of the resulting engine is identical to `newEngine()`:\n```javascript\nconst result = await myEngine.query(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\nresult.bindingsStream.on('data', (binding) => {\n    console.log(binding.get('?s').value);\n    console.log(binding.get('?s').termType);\n});\n```\n\n<div class=\"note\">\nIf you run into config loading problems,\nmake sure your app has a <code>package.json</code> file,\notherwise config loading may fail.\n</div>\n","excerpt":"","path":"/docs/modify/getting_started/custom_config","paths":["/about/","/ask/","/blog/","/blog/2020-08-19-intro/","/blog/2020-08-24-release_1_16/","/cite/","/contribute/","/docs/","/docs/query/","/docs/query/getting_started/","/docs/query/getting_started/query_cli/","/docs/query/getting_started/query_cli_file/","/docs/query/getting_started/query_app/","/docs/query/getting_started/query_browser_app/","/docs/query/getting_started/query_docker/","/docs/query/getting_started/setup_endpoint/","/docs/query/getting_started/setup_web_client/","/docs/query/getting_started/query_dev_version/","/docs/query/usage/","/docs/query/faq/","/docs/query/advanced/","/docs/query/advanced/basic_auth/","/docs/query/advanced/caching/","/docs/query/advanced/context/","/docs/query/advanced/federation/","/docs/query/advanced/graphql_ld/","/docs/query/advanced/hdt/","/docs/query/advanced/logging/","/docs/query/advanced/memento/","/docs/query/advanced/proxying/","/docs/query/advanced/rdfjs/","/docs/query/advanced/rdfjs_querying/","/docs/query/advanced/result_formats/","/docs/query/advanced/source_types/","/docs/query/advanced/sparql_query_types/","/docs/query/advanced/specifications/","/docs/modify/","/docs/modify/getting_started/","/docs/modify/getting_started/custom_config/","/docs/modify/getting_started/custom_config_add/","/docs/modify/getting_started/custom_package/","/docs/modify/extensions/","/docs/modify/faq/","/docs/modify/advanced/","/docs/modify/advanced/architecture/","/docs/modify/advanced/browser_builds/","/docs/modify/advanced/configs/","/roadmap/"],"mattersData":{"/about/":{"title":"About","description":"Learn more about Comunica."},"/ask/":{"title":"Ask","description":"Ask questions about Comunica."},"/blog/":{"title":"Blog","description":"Blog posts, containing announcement or other of news.","blog_index":true},"/blog/2020-08-19-intro/":{"title":"A New Website for Comunica","excerpt":"\nWe're happy to present a brand new website for Comunica! 🎉\n_Don't know that Comunica is? [Read about it here](/about/)._\n\nThis new version contains all **basic information** around Comunica.\nAdditionally, it contains **guides** on how to [query with Comunica](/docs/query/),\nand how to [modify or extend it](/docs/modify/). \n\n"},"/blog/2020-08-24-release_1_16/":{"title":"Release 1.16.0: Full spec compliance, property paths, CSV/TSV, basic auth, and fixes","excerpt":"\nWith the latest release of Comunica, we have achieved the major milestone of **full compliance to the SPARQL 1.1 specification**.\nWhile Comunica has had support for all SPARQL 1.1 operators for a while,\nsome small parts were not always fully handled according to the spec,\nand property paths were not fully supported.\n\nThanks to the help of several students over the summer, these issues have been resolved,\nand all tests from [the SPARQL 1.1 test suite](https://w3c.github.io/rdf-tests/sparql11/) now pass.\n\n"},"/cite/":{"title":"Cite","description":"Reference Comunica in a scientific publication."},"/contribute/":{"title":"Contribute","description":"Contribute to the development of Comunica."},"/docs/":{"title":"Documentation","description":"Overview of all Comunica documentation.","index":true},"/docs/query/":{"title":"Query with Comunica","description":"Learn how to execute queries in different environments. Such as live in the browser, in JavaScript applications, or the CLI.","index":true},"/docs/query/getting_started/":{"title":"Getting started with querying","description":"Basic guides on how to easily get started with querying.","index":true},"/docs/query/getting_started/query_cli/":{"title":"Querying from the command line","description":"Execute SPARQL queries directly from the command line."},"/docs/query/getting_started/query_cli_file/":{"title":"Querying local files from the command line","description":"Execute SPARQL queries over local RDF files directly from the command line."},"/docs/query/getting_started/query_app/":{"title":"Querying in a JavaScript app","description":"Execute SPARQL queries from within your application using the JavaScript API."},"/docs/query/getting_started/query_browser_app/":{"title":"Querying in a JavaScript browser app","description":"Execute SPARQL queries from within your client-side browser application using the JavaScript API."},"/docs/query/getting_started/query_docker/":{"title":"Querying from a Docker container","description":"Execute SPARQL queries within a Docker container."},"/docs/query/getting_started/setup_endpoint/":{"title":"Setting up a SPARQL endpoint","description":"Allow querying over HTTP via the SPARQL protocol"},"/docs/query/getting_started/setup_web_client/":{"title":"Setting up a Web client","description":"Set up a user-friendly static Web page where SPARQL queries can be executed client-side"},"/docs/query/getting_started/query_dev_version/":{"title":"Query using the latest development version","description":"If you want to make use of the latest changes that are not released yet"},"/docs/query/usage/":{"title":"Usage showcase","description":"Examples of where Comunica is used."},"/docs/query/faq/":{"title":"Querying FAQ","description":"Frequently asked questions about using Comunica."},"/docs/query/advanced/":{"title":"Advanced querying","description":"Advanced guides on how to get the most out of Comunica.","index":true},"/docs/query/advanced/basic_auth/":{"title":"HTTP Basic Authentication","description":"Send authenticated HTTP requests by including username and password."},"/docs/query/advanced/caching/":{"title":"Caching","description":"When remote sources are requested, caching allows them to be reused in the future."},"/docs/query/advanced/context/":{"title":"Passing a context","description":"A context can be passed to a query engine to tweak its runtime settings."},"/docs/query/advanced/federation/":{"title":"Federated Querying","description":"Query over the union of data within any number of sources"},"/docs/query/advanced/graphql_ld/":{"title":"GraphQL-LD","description":"Using the power of JSON-LD contexts, GraphQL queries can be executed by Comunica"},"/docs/query/advanced/hdt/":{"title":"HDT","description":"HDT offers highly compressed immutable RDF storage."},"/docs/query/advanced/logging/":{"title":"Logging","description":"Loggers can be set to different logging levels to inspect what Comunica is doing behind the scenes."},"/docs/query/advanced/memento/":{"title":"Memento","description":"Using the Memento protocol, time travel queries can be executed."},"/docs/query/advanced/proxying/":{"title":"HTTP Proxy","description":"All HTTP requests can optionally go through a proxy."},"/docs/query/advanced/rdfjs/":{"title":"RDF/JS","description":"To achieve maximum interoperability between different JavaScript libraries, Comunica builds on top of the RDF/JS specifications."},"/docs/query/advanced/rdfjs_querying/":{"title":"Querying over RDF/JS sources","description":"If the built-in source types are not sufficient, you can pass a custom JavaScript object implementing a specific interface."},"/docs/query/advanced/result_formats/":{"title":"Result formats","description":"Query results can be serialized in different formats."},"/docs/query/advanced/source_types/":{"title":"Source types","description":"Comunica detects and handles different types of sources."},"/docs/query/advanced/sparql_query_types/":{"title":"SPARQL query types","description":"Different SPARQL query types are possible, such as SELECT, CONSTRUCT, ASK, ..."},"/docs/query/advanced/specifications/":{"title":"Supported specifications","description":"Comunica supports several RDF-related specifications"},"/docs/modify/":{"title":"Modify Comunica","description":"Learn how to configure your own Comunica engine, or extend Comunica by implementing new components.","index":true},"/docs/modify/getting_started/":{"title":"Getting started with modification","description":"Basic guides on how to easily get started with Comunica modification.","index":true,"wip":true},"/docs/modify/getting_started/custom_config/":{"title":"Creating a custom configuration","description":"Create a custom configuration of Comunica modules with specific features."},"/docs/modify/getting_started/custom_config_add/":{"title":"Adding a component to a custom configuration","description":"Adding functionality to Comunica by adding a component to a config file.","wip":true},"/docs/modify/getting_started/custom_package/":{"title":"Exposing a custom config as an npm package","description":"Publish your own Comunica engine and config in an npm package.","wip":true},"/docs/modify/extensions/":{"title":"Extensions","description":"Existing extensions of Comunica.","wip":true},"/docs/modify/faq/":{"title":"Modify FAQ","description":"Frequently asked question about Comunica modification.","wip":true},"/docs/modify/advanced/":{"title":"Advanced modification","description":"Advanced guides on how to get the most out of Comunica modification.","index":true,"wip":true},"/docs/modify/advanced/architecture/":{"title":"Architecture","description":"The internal software architecture of Comunica.","wip":true},"/docs/modify/advanced/browser_builds/":{"title":"Browser builds","description":"All modules in Comunica can be built for the browser","wip":true},"/docs/modify/advanced/configs/":{"title":"Configuration files","description":"A reference guide on all details behind Comunica configuration files.","wip":true},"/roadmap/":{"title":"Roadmap","description":"The long-term goals of Comunica"}}},"__N_SSG":true}