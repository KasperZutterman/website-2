{"pageProps":{"frontmatter":{"title":"Querying with a custom configuration in a JavaScript app","description":"Create a custom configuration of Comunica modules with changed features, and query with it from within your application using the JavaScript API."},"body":"\nIn the previous guide, we looked into\n[querying with a custom config from the command line](/docs/modify/getting_started/custom_config_cli/).\nIn this guide, we'll do the same from within a JavaScript application,\nbut we will **split up our config across different files** for convenience.\n\n<div class=\"note\">\nThis guide assumes basic knowledge on querying with Comunica.\nIf you haven't looked into this yet, it is recommended to follow\n<a href=\"/docs/query/getting_started/query_app\">the getting started guide on querying within a JavaScript app</a>.\n</div>\n\n## 1. Installation\n\n<div class=\"note\">\nThis assumes you already have an npm package.\nIf you don't have one yet, create one using <code>npm init</code>.\nYou will also need a JavaScript file to write in, such as <code>main.js</code>.\n</div>\n\nIn order to add Comunica SPARQL as a _dependency_ to your [Node.js](https://nodejs.org/en/) application,\nwe can execute the following command:\n```bash\n$ npm install @comunica/actor-init-sparql\n```\n\n## 2. Creating a new query engine\n\nWhile [`newEngine()` is used to import Comunica SPARQL's default config](/docs/query/getting_started/query_app/),\nwe can load a custom config by creating our engine via `newEngineDynamic()`:\n```javascript\nconst newEngineDynamic = require('@comunica/actor-init-sparql').newEngineDynamic;\n\nconst myEngine = await newEngineDynamic({\n  configResourceUrl: 'config.json', // Relative or absolute path \n});\n```\n\n`configResourceUrl` refers to a config file, which we will create in the next step.\n\n## 3. Start from an existing config file\n\nThe easiest way to create a custom config, is to start from an existing one, and add/remove things to fit your needs.\n\nLet's create a file called `config.json` in your package.\n\nIn this guide, we will start from\nthe [Comunica SPARQL default config file](https://github.com/comunica/comunica/blob/master/packages/actor-init-sparql/config/config-default.json).\nLet's **copy it's contents entirely into our `config.json`**:\n```json\n{\n  \"@context\": [\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-sparql/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^1.0.0/components/context.jsonld\"\n  ],\n  \"@id\": \"urn:comunica:my\",\n  \"@type\": \"Runner\",\n  \"import\": [\n    \"files-cais:config/sets/http.json\",\n    \"files-cais:config/sets/http-memento.json\",\n    \"files-cais:config/sets/join.json\",\n    \"files-cais:config/sets/rdf-dereference.json\",\n    \"files-cais:config/sets/rdf-parsers.json\",\n    \"files-cais:config/sets/rdf-serializers.json\",\n    \"files-cais:config/sets/resolve-federated.json\",\n    \"files-cais:config/sets/resolve-hypermedia.json\",\n    \"files-cais:config/sets/resolve-rdfjs.json\",\n    \"files-cais:config/sets/resolve-sparql.json\",\n    \"files-cais:config/sets/sparql-init.json\",\n    \"files-cais:config/sets/graphql-parsers.json\",\n    \"files-cais:config/sets/sparql-optimize.json\",\n    \"files-cais:config/sets/sparql-parsers.json\",\n    \"files-cais:config/sets/sparql-queryoperators.json\",\n    \"files-cais:config/sets/sparql-queryoperators-path.json\",\n    \"files-cais:config/sets/sparql-serializers.json\"\n  ]\n}\n```\n\n## 4. Executing SPARQL SELECT queries\n\nOnce your engine has been created based on your custom config,\nyou can use it to execute any SPARQL query, such as a `SELECT` query:\n```javascript\nconst result = await myEngine.query(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n\nresult.bindingsStream.on('data', (binding) => {\n    console.log(binding.get('?s').value);\n    console.log(binding.get('?p').value);\n    console.log(binding.get('?o').value);\n});\n```\n\nIf you wrote this in a file called `main.js`, you can invoke it by executing `node main.js`.\n\n<div class=\"note\">\nIf you run into config loading problems,\nmake sure your app has a <code>package.json</code> file,\notherwise config loading will fail.\n</div>\n\n## 5. Only allowing `SELECT` queries\n\nOur goal in this step is to build a query engine that can **_only_ execute `SELECT`** queries,\nand we don't want to be able to execute `CONSTRUCT` and `DESCRIBE` queries.\nThis will require us to remove some more actors.\n\nWhile the actors for `CONSTRUCT` and `DESCRIBE` are defined in `files-cais:config/sets/sparql-queryoperators.json`,\nwe can not just simply remove that file from our imports,\nbecause it also contains actors for other SPARQL query operators which we don't want to remove, such as `SELECT`.\n\nIn the [guide on querying with a custom config from the command line](/docs/modify/getting_started/custom_config_cli/),\nwe achieved this by inlining `files-cais:config/sets/sparql-queryoperators.json` into our main config file.\nIn this guide, we'll do this in a cleaner way by **redefining** the contents of `files-cais:config/sets/sparql-queryoperators.json`\nin a **separate local file**, and applying our changes there.\n\n### 5.1. Declare config options in `package.json`\n\nBefore we can refer to other files within our config file,\nwe have to add some entries to our `package.json` file\nso that the config files can be found during engine initialization.\n\nConcretely, we need to **add the following entries to `package.json`**:\n```text\n{\n  ...\n  \"lsd:module\": \"https://linkedsoftwaredependencies.org/bundles/npm/my-package\",\n  \"lsd:contexts\": {\n    \"https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/components/context.jsonld\": \"components/context.jsonld\"\n  },\n  \"lsd:importPaths\": {\n    \"https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/components/\": \"components/\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/config/\": \"config/\"\n  }\n  ...\n}\n```\n\nOn each line, make sure to replace `my-package` with your package `name`.\n\n<div class=\"note\">\nIf you want to learn more about what these config entries mean,\nread our guide on <a href=\"/docs/modify/advanced/componentsjs/\">Components.js</a>,\na dependency injection framework that Comunica uses.\n</div>\n\n### 5.2. Create a context\n\nIn order to allow our config file to import other files,\nwe need to create a JSON-LD context file.\n\nCreate the file **`components/context.jsonld`** with the following contents:\n```json\n{\n  \"@context\": [\n    \"https://linkedsoftwaredependencies.org/bundles/npm/componentsjs/^3.0.0/components/context.jsonld\",\n    {\n      \"files-ex\": \"https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/\"\n    }\n  ]\n}\n```\n\nAgain, make sure to replace `my-package` with your package `name`.\n\n### 5.3. Copying `sparql-queryoperators.json`\n\nNext, we will create a local copy of `files-cais:config/sets/sparql-queryoperators.json`.\n\nFor this, create a file **`config/sets/sparql-queryoperators.json`**,\nand paste in the contents of [`files-cais:config/sets/sparql-queryoperators.json`](https://raw.githubusercontent.com/comunica/comunica/master/packages/actor-init-sparql/config/sets/sparql-queryoperators.json) ([GitHub](https://github.com/comunica/comunica/blob/master/packages/actor-init-sparql/config/sets/sparql-queryoperators.json)).\n\n### 5.4. Make config refer to local `sparql-queryoperators.json`\n\nNow that we have declared config options in our `package.json`,\ncreated a context,\nand created a local copy of `sparql-queryoperators.json`,\neverything is ready to **modify our `config.json` to refer to our local `sparql-queryoperators.json`**.\n\nFor this, remove the following line from `config.json`:\n```text\n  \"files-cais:config/sets/sparql-queryoperators.json\",\n```\nAnd replace it with the following line:\n```text\n  \"files-ex:config/sets/sparql-queryoperators.json\",\n```\n\nThis change means that Comunica will load its query operators from our local `config/sets/sparql-queryoperators.json` file,\ninstead of the default `files-cais:config/sets/sparql-queryoperators.json` file.\n\nIf you run your app again, things should still function like before at this point.\n\n### 5.5. Remove actors\n\nNext, we will remove the actors we don't need.\nConcretely, we will **remove the actors of the following types**:\n\n* `ActorQueryOperationConstruct`: Handles `CONSTRUCT` queries.\n* `ActorQueryOperationDescribeSubject`: Handles `DESCRIBE` queries.\n\nFor this, find the actors (in the `\"actors\"` array),\nand remove all actors with `\"@type\"` set to one of the above.\n\nConcretely, we will remove the following entries from `config/sets/sparql-queryoperators.json`:\n\n```text\n   {\n      \"@id\": \"config-sets:sparql-queryoperators.json#myConstructQueryOperator\",\n      \"@type\": \"ActorQueryOperationConstruct\",\n      \"cbqo:mediatorQueryOperation\": { \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\" }\n    },\n\n    {\n      \"@id\": \"config-sets:sparql-queryoperators.json#myDescribeQueryOperator\",\n      \"@type\": \"ActorQueryOperationDescribeSubject\",\n      \"cbqo:mediatorQueryOperation\": { \"@id\": \"config-sets:sparql-queryoperators.json#mediatorQueryOperation\" }\n    },\n```\n\n### 5.6. Test changes\n\nAfter this change, you should now be unable to execute `CONSTRUCT` or `DESCRIBE` queries.\nTry this out by executing the following:\n```bash\nconst result = await myEngine.query(`\n  CONSTRUCT WHERE {\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n\nresult.quadStream.on('data', (quad) => {\n    console.log(quad.subject.value);\n    console.log(quad.predicate.value);\n    console.log(quad.object.value);\n    console.log(quad.graph.value);\n});\n```\n\nExecuting a `SELECT` query will still work:\n```bash\nconst result = await myEngine.query(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n\nresult.bindingsStream.on('data', (binding) => {\n    console.log(binding.get('?s').value);\n    console.log(binding.get('?p').value);\n    console.log(binding.get('?o').value);\n});\n```\n\nYou have now successfully built your own custom Comunica engine that is a bit more lightweight than the default one.\nJust like the `CONSTRUCT` and `DESCRIBE` actors,\nyou can remove any other actors you don't want to make it even more lightweight.\n\nIf you want, you can create additional config file parts in `config/sets/`\nand refer to them from our main `config.json` with the `files-ex:` prefix.\n\n<div class=\"note\">\nIf you want to <em>add</em> an actor that is not present in the default Comunica SPARQL config,\nhave a look at \n<a href=\"https://github.com/comunica/examples/tree/master/packages/configure-sparql-http-solid\">this example on replacing the HTTP actor with a Solid HTTP actor</a>.\n</div>\n","excerpt":"","path":"/docs/modify/getting_started/custom_config_app","paths":["/about/","/ask/","/blog/","/blog/2020-08-19-intro/","/blog/2020-08-24-release_1_16/","/cite/","/contribute/","/docs/","/docs/query/","/docs/query/getting_started/","/docs/query/getting_started/query_cli/","/docs/query/getting_started/query_cli_file/","/docs/query/getting_started/query_app/","/docs/query/getting_started/query_browser_app/","/docs/query/getting_started/query_docker/","/docs/query/getting_started/setup_endpoint/","/docs/query/getting_started/setup_web_client/","/docs/query/getting_started/query_dev_version/","/docs/query/usage/","/docs/query/faq/","/docs/query/advanced/","/docs/query/advanced/basic_auth/","/docs/query/advanced/caching/","/docs/query/advanced/context/","/docs/query/advanced/federation/","/docs/query/advanced/graphql_ld/","/docs/query/advanced/hdt/","/docs/query/advanced/logging/","/docs/query/advanced/memento/","/docs/query/advanced/proxying/","/docs/query/advanced/rdfjs/","/docs/query/advanced/rdfjs_querying/","/docs/query/advanced/result_formats/","/docs/query/advanced/solid/","/docs/query/advanced/source_types/","/docs/query/advanced/sparql_query_types/","/docs/query/advanced/specifications/","/docs/modify/","/docs/modify/getting_started/","/docs/modify/getting_started/custom_config_cli/","/docs/modify/getting_started/custom_config_app/","/docs/modify/extensions/","/docs/modify/faq/","/docs/modify/advanced/","/docs/modify/advanced/architecture_core/","/docs/modify/advanced/architecture_sparql/","/docs/modify/advanced/browser_builds/","/docs/modify/advanced/buses/","/docs/modify/advanced/componentsjs/","/docs/modify/advanced/configs/","/docs/modify/advanced/sparqlee/","/roadmap/"],"mattersData":{"/about/":{"title":"About","description":"Learn more about Comunica."},"/ask/":{"title":"Ask","description":"Ask questions about Comunica."},"/blog/":{"title":"Blog","description":"Blog posts, containing announcement or other of news.","blog_index":true},"/blog/2020-08-19-intro/":{"title":"A New Website for Comunica","excerpt":"\nWe're happy to present a brand new website for Comunica! 🎉\n_Don't know that Comunica is? [Read about it here](/about/)._\n\nThis new version contains all **basic information** around Comunica.\nAdditionally, it contains **guides** on how to [query with Comunica](/docs/query/),\nand how to [modify or extend it](/docs/modify/). \n\n"},"/blog/2020-08-24-release_1_16/":{"title":"Release 1.16.0: Full spec compliance, property paths, CSV/TSV, basic auth, and fixes","excerpt":"\nWith the latest release of Comunica, we have achieved the major milestone of **full compliance to the SPARQL 1.1 specification**.\nWhile Comunica has had support for all SPARQL 1.1 operators for a while,\nsome small parts were not always fully handled according to the spec,\nand property paths were not fully supported.\n\nThanks to the help of several students over the summer, these issues have been resolved,\nand all tests from [the SPARQL 1.1 test suite](https://w3c.github.io/rdf-tests/sparql11/) now pass.\n\n"},"/cite/":{"title":"Cite","description":"Reference Comunica in a scientific publication."},"/contribute/":{"title":"Contribute","description":"Contribute to the development of Comunica."},"/docs/":{"title":"Documentation","description":"Overview of all Comunica documentation.","index":true},"/docs/query/":{"title":"Query with Comunica","description":"Learn how to execute queries in different environments. Such as live in the browser, in JavaScript applications, or the CLI.","index":true},"/docs/query/getting_started/":{"title":"Getting started with querying","description":"Basic guides on how to easily get started with querying.","index":true},"/docs/query/getting_started/query_cli/":{"title":"Querying from the command line","description":"Execute SPARQL queries directly from the command line."},"/docs/query/getting_started/query_cli_file/":{"title":"Querying local files from the command line","description":"Execute SPARQL queries over local RDF files directly from the command line."},"/docs/query/getting_started/query_app/":{"title":"Querying in a JavaScript app","description":"Execute SPARQL queries from within your application using the JavaScript API."},"/docs/query/getting_started/query_browser_app/":{"title":"Querying in a JavaScript browser app","description":"Execute SPARQL queries from within your client-side browser application using the JavaScript API."},"/docs/query/getting_started/query_docker/":{"title":"Querying from a Docker container","description":"Execute SPARQL queries within a Docker container."},"/docs/query/getting_started/setup_endpoint/":{"title":"Setting up a SPARQL endpoint","description":"Allow querying over HTTP via the SPARQL protocol"},"/docs/query/getting_started/setup_web_client/":{"title":"Setting up a Web client","description":"Set up a user-friendly static Web page where SPARQL queries can be executed client-side"},"/docs/query/getting_started/query_dev_version/":{"title":"Query using the latest development version","description":"If you want to make use of the latest changes that are not released yet"},"/docs/query/usage/":{"title":"Usage showcase","description":"Examples of where Comunica is used."},"/docs/query/faq/":{"title":"Querying FAQ","description":"Frequently asked questions about using Comunica."},"/docs/query/advanced/":{"title":"Advanced querying","description":"Advanced guides on how to get the most out of Comunica.","index":true},"/docs/query/advanced/basic_auth/":{"title":"HTTP Basic Authentication","description":"Send authenticated HTTP requests by including username and password."},"/docs/query/advanced/caching/":{"title":"Caching","description":"When remote sources are requested, caching allows them to be reused in the future."},"/docs/query/advanced/context/":{"title":"Passing a context","description":"A context can be passed to a query engine to tweak its runtime settings."},"/docs/query/advanced/federation/":{"title":"Federated Querying","description":"Query over the union of data within any number of sources"},"/docs/query/advanced/graphql_ld/":{"title":"GraphQL-LD","description":"Using the power of JSON-LD contexts, GraphQL queries can be executed by Comunica"},"/docs/query/advanced/hdt/":{"title":"HDT","description":"HDT offers highly compressed immutable RDF storage."},"/docs/query/advanced/logging/":{"title":"Logging","description":"Loggers can be set to different logging levels to inspect what Comunica is doing behind the scenes."},"/docs/query/advanced/memento/":{"title":"Memento","description":"Using the Memento protocol, time travel queries can be executed."},"/docs/query/advanced/proxying/":{"title":"HTTP Proxy","description":"All HTTP requests can optionally go through a proxy."},"/docs/query/advanced/rdfjs/":{"title":"RDF/JS","description":"To achieve maximum interoperability between different JavaScript libraries, Comunica builds on top of the RDF/JS specifications."},"/docs/query/advanced/rdfjs_querying/":{"title":"Querying over RDF/JS sources","description":"If the built-in source types are not sufficient, you can pass a custom JavaScript object implementing a specific interface."},"/docs/query/advanced/result_formats/":{"title":"Result formats","description":"Query results can be serialized in different formats."},"/docs/query/advanced/solid/":{"title":"Solid","description":"Solid – the Web-based decentralization ecosystem – can be queried with Comunica."},"/docs/query/advanced/source_types/":{"title":"Source types","description":"Comunica detects and handles different types of sources."},"/docs/query/advanced/sparql_query_types/":{"title":"SPARQL query types","description":"Different SPARQL query types are possible, such as SELECT, CONSTRUCT, ASK, ..."},"/docs/query/advanced/specifications/":{"title":"Supported specifications","description":"Comunica supports several RDF-related specifications"},"/docs/modify/":{"title":"Modify Comunica","description":"Learn how to configure your own Comunica engine, or extend Comunica by implementing new components.","index":true},"/docs/modify/getting_started/":{"title":"Getting started with modification","description":"Basic guides on how to easily get started with Comunica modification.","index":true},"/docs/modify/getting_started/custom_config_cli/":{"title":"Querying with a custom configuration from the command line","description":"Create a custom configuration of Comunica modules with reduced features, and query with it from the command line."},"/docs/modify/getting_started/custom_config_app/":{"title":"Querying with a custom configuration in a JavaScript app","description":"Create a custom configuration of Comunica modules with changed features, and query with it from within your application using the JavaScript API."},"/docs/modify/extensions/":{"title":"Extensions","description":"Existing extensions of Comunica.","wip":true},"/docs/modify/faq/":{"title":"Modify FAQ","description":"Frequently asked question about Comunica modification.","wip":true},"/docs/modify/advanced/":{"title":"Advanced modification","description":"Advanced guides on how to get the most out of Comunica modification.","index":true},"/docs/modify/advanced/architecture_core/":{"title":"Core Architecture","description":"The low-level software architecture of Comunica for achieving modularity."},"/docs/modify/advanced/architecture_sparql/":{"title":"SPARQL Architecture","description":"The high-level software architecture of Comunica for implementing SPARQL."},"/docs/modify/advanced/browser_builds/":{"title":"Browser builds","description":"All modules in Comunica can be built for the browser","wip":true},"/docs/modify/advanced/buses/":{"title":"Buses","description":"An overview of all buses in Comunica."},"/docs/modify/advanced/componentsjs/":{"title":"Components.js","description":"Components.js is the dependency injection framework that Comunica uses to wire components via config files.","wip":true},"/docs/modify/advanced/configs/":{"title":"Configuration files","description":"A reference guide on all details behind Comunica configuration files.","wip":true},"/docs/modify/advanced/sparqlee/":{"title":"Sparqlee","description":"The SPARQL expression evaluation engine of Comunica.","wip":true},"/roadmap/":{"title":"Roadmap","description":"The long-term goals of Comunica"}}},"__N_SSG":true}