{"pageProps":{"frontmatter":{"title":"Logging","description":"Loggers can be set to different logging levels to inspect what Comunica is doing behind the scenes."},"body":"\nIf you want to inspect what is going on during query execution,\nyou can enable a logger in Comunica.\n\n## Logging on the command line\n\nUsing Comunica SPARQL on the command line, logging can be enabled via the `-l` option.\nFor example, printing debug-level logs can be done as follows:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    \"SELECT * WHERE { ?s ?p ?o } LIMIT 100\" \\\n    -l debug\n```\n```text\n[2020-07-31T11:38:47.632Z]  INFO: Requesting https://fragments.dbpedia.org/2016-04/en {\n  actor: 'https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-sparql/^1.0.0/config/sets/http.json#myHttpFetcher'\n}\n[2020-07-31T11:38:47.775Z]  INFO: Identified as qpf source: https://fragments.dbpedia.org/2016-04/en {\n  actor: 'https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-sparql/^1.0.0/config/sets/resolve-hypermedia.json#myHypermediaQpfResolver'\n}\n[2020-07-31T11:38:47.777Z]  INFO: Requesting https://fragments.dbpedia.org/2016-04/en {\n  actor: 'https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-sparql/^1.0.0/config/sets/http.json#myHttpFetcher'\n}\n```\n\nAll log messages will be printed to standard error (`stderr`).\n\nIf you only want to print the logs, you can void all query results as follows:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    \"SELECT * WHERE { ?s ?p ?o } LIMIT 100\" \\\n    -l debug > /dev/null\n```\n\nIf you want to redirect all logs to a file, you can forward them like this:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    \"SELECT * WHERE { ?s ?p ?o } LIMIT 100\" \\\n    -l debug 2> /path/to/log.txt\n```\n\n## Logging levels\n\nThe following logging levels are available in Comunica:\n\n* `trace`\n* `debug`\n* `info`\n* `warn`\n* `error`\n* `fatal`\n\n<div class=\"note\">\nWhen enabling a level, all levels below are also enabled.\nFor example, when enabling <code>error</code>, then <code>fatal</code> will also be enabled.\n</div>\n\n## Logging in an application\n\nUsing the `log` [context entry](/docs/query/advanced/context/), you can enable logging in a [JavaScript application that uses Comunica](/docs/query/getting_started/query_app/):\n```javascript\nimport {LoggerPretty} from \"@comunica/logger-pretty\";\n\nconst result = await myEngine.query('SELECT * WHERE { ?s ?p ?o }', {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n  log: new LoggerPretty({ level: 'debug' }),\n});\n```\n\nThis logger makes use of `LoggerPretty`, which will print everything to standard error (`stderr`),\njust like Comunica SPARQL on the command line.\n\nAlternatively, more advanced logging can be achieved by making use of [`@comunica/logger-bunyan](https://github.com/comunica/comunica/tree/master/packages/logger-bunyan/),\nor by implementing your own logger that implements the [`Logger` interface](https://github.com/comunica/comunica/blob/master/packages/core/lib/Logger.ts).\n","path":"/docs/query/advanced/logging","paths":["/about/","/ask/","/cite/","/contribute/","/docs/","/docs/query/","/docs/query/getting_started/","/docs/query/getting_started/query_cli/","/docs/query/getting_started/query_cli_file/","/docs/query/getting_started/query_app/","/docs/query/getting_started/query_browser_app/","/docs/query/getting_started/query_docker/","/docs/query/getting_started/setup_endpoint/","/docs/query/getting_started/setup_web_client/","/docs/query/getting_started/query_dev_version/","/docs/query/usage/","/docs/query/faq/","/docs/query/advanced/","/docs/query/advanced/basic_auth/","/docs/query/advanced/caching/","/docs/query/advanced/context/","/docs/query/advanced/federation/","/docs/query/advanced/graphql_ld/","/docs/query/advanced/hdt/","/docs/query/advanced/logging/","/docs/query/advanced/memento/","/docs/query/advanced/proxying/","/docs/query/advanced/rdfjs/","/docs/query/advanced/rdfjs_querying/","/docs/query/advanced/result_formats/","/docs/query/advanced/source_types/","/docs/query/advanced/sparql_query_types/","/docs/query/advanced/specifications/","/docs/modify/","/docs/modify/getting_started/","/docs/modify/getting_started/custom_config/","/docs/modify/extensions/","/docs/modify/faq/","/docs/modify/advanced/","/docs/modify/advanced/browser_builds/"],"mattersData":{"/about/":{"title":"About"},"/ask/":{"title":"Ask"},"/cite/":{"title":"Cite"},"/contribute/":{"title":"Contribute"},"/docs/":{"title":"Documentation","index":true},"/docs/query/":{"title":"Query with Comunica","description":"Learn how to execute queries in different environments. Such as live in the browser, in JavaScript applications, or the CLI.","index":true},"/docs/query/getting_started/":{"title":"Getting started with querying","description":"Basic guides on how to easily get started with querying.","index":true},"/docs/query/getting_started/query_cli/":{"title":"Querying from the command line","description":"Execute SPARQL queries directly from the command line."},"/docs/query/getting_started/query_cli_file/":{"title":"Querying local files from the command line","description":"Execute SPARQL queries over local RDF files directly from the command line."},"/docs/query/getting_started/query_app/":{"title":"Querying in a JavaScript app","description":"Execute SPARQL queries from within your application using the JavaScript API."},"/docs/query/getting_started/query_browser_app/":{"title":"Querying in a JavaScript browser app","description":"Execute SPARQL queries from within your client-side browser application using the JavaScript API."},"/docs/query/getting_started/query_docker/":{"title":"Querying from a Docker container","description":"Execute SPARQL queries within a Docker container."},"/docs/query/getting_started/setup_endpoint/":{"title":"Setting up a SPARQL endpoint","description":"Allow querying over HTTP via the SPARQL protocol"},"/docs/query/getting_started/setup_web_client/":{"title":"Setting up a Web client","description":"Set up a user-friendly static Web page where SPARQL queries can be executed client-side"},"/docs/query/getting_started/query_dev_version/":{"title":"Query using the latest development version","description":"If you want to make use of the latest changes that are not released yet"},"/docs/query/usage/":{"title":"Usage showcase","description":"Examples of where Comunica is used."},"/docs/query/faq/":{"title":"Querying FAQ","description":"Frequently asked questions about using Comunica."},"/docs/query/advanced/":{"title":"Advanced querying","description":"Advanced guides on how to get the most out of Comunica.","index":true},"/docs/query/advanced/basic_auth/":{"title":"HTTP Basic Authentication","description":"Send authenticated HTTP requests by including username and password."},"/docs/query/advanced/caching/":{"title":"Caching","description":"When remote sources are requested, caching allows them to be reused in the future."},"/docs/query/advanced/context/":{"title":"Passing a context","description":"A context can be passed to a query engine to tweak its runtime settings."},"/docs/query/advanced/federation/":{"title":"Federated Querying","description":"Query over the union of data within any number of sources"},"/docs/query/advanced/graphql_ld/":{"title":"GraphQL-LD","description":"Using the power of JSON-LD contexts, GraphQL queries can be executed by Comunica"},"/docs/query/advanced/hdt/":{"title":"HDT","description":"HDT offers highly compressed immutable RDF storage."},"/docs/query/advanced/logging/":{"title":"Logging","description":"Loggers can be set to different logging levels to inspect what Comunica is doing behind the scenes."},"/docs/query/advanced/memento/":{"title":"Memento","description":"Using the Memento protocol, time travel queries can be executed."},"/docs/query/advanced/proxying/":{"title":"HTTP Proxy","description":"All HTTP requests can optionally go through a proxy."},"/docs/query/advanced/rdfjs/":{"title":"RDF/JS","description":"To achieve maximum interoperability between different JavaScript libraries, Comunica builds on top of the RDF/JS specifications."},"/docs/query/advanced/rdfjs_querying/":{"title":"Querying over RDF/JS sources","description":"If the built-in source types are not sufficient, you can pass a custom JavaScript object implementing a specific interface."},"/docs/query/advanced/result_formats/":{"title":"Result formats","description":"Query results can be serialized in different formats."},"/docs/query/advanced/source_types/":{"title":"Source types","description":"Comunica detects and handles different types of sources."},"/docs/query/advanced/sparql_query_types/":{"title":"SPARQL query types","description":"Different SPARQL query types are possible, such as SELECT, CONSTRUCT, ASK, ..."},"/docs/query/advanced/specifications/":{"title":"Supported specifications","description":"Comunica supports several RDF-related specifications"},"/docs/modify/":{"title":"Modify Comunica","description":"Learn how to configure your own Comunica engine, or extend Comunica by implementing new components.","index":true},"/docs/modify/getting_started/":{"title":"Getting started with modification","description":"Basic guides on how to easily get started with Comunica modification.","index":true,"wip":true},"/docs/modify/getting_started/custom_config/":{"title":"Creating a custom configuration","description":"Create a custom configuration of Comunica modules with specific features.","wip":true},"/docs/modify/extensions/":{"title":"Extensions","description":"Existing extensions of Comunica.","wip":true},"/docs/modify/faq/":{"title":"Modify FAQ","description":"Frequently asked question about Comunica modification.","wip":true},"/docs/modify/advanced/":{"title":"Advanced modification","description":"Advanced guides on how to get the most out of Comunica modification.","index":true,"wip":true},"/docs/modify/advanced/browser_builds/":{"title":"Browser builds","description":"All modules in Comunica can be built for the browser","wip":true}}},"__N_SSG":true}