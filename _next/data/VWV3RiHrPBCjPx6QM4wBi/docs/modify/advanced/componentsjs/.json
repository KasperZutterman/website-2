{"pageProps":{"frontmatter":{"title":"Components.js","description":"Components.js is the dependency injection framework that Comunica uses to wire components via config files."},"body":"\nA direct consequence of the high modularity of Comunica is that it leads to\na high number of **modules that need to be wired together** before they can be used.\n\nComunica makes use of the **dependency injection framework [Components.js](https://componentsjs.readthedocs.io/en/latest/)**\nto take care of this wiring of modules.\nIn essence, Components.js allows you to create [JSON-LD](https://json-ld.org/) configuration files\nin which you _declaratively_ define which components you want to instantiate using what parameters.\nComponents.js can then _read_ these configuration files, and instantiate them as runtime JavaScript objects.\n\nWhile there is [detailed documentation available for Components.js](https://componentsjs.readthedocs.io/en/latest/),\nwe summarize the most important parts for Comunica on this page.\n\n<div class=\"note\">\nBefore you get into the details of Components.js,\nwe recommend you first follow <a href=\"/docs/modify/getting_started/\">guides on getting started with modifying Comunica</a>.\n</div>\n\n## Terminology\n\nBefore you continue reading this guide,\nit is important to understand the three following concepts:\n\n* **Module:** A collection of **components**. _For example, an npm package._\n* **Component:** Something that can be instantiated. _For example, a JavaScript/TypeScript class._\n* **Instance:** An instantiated **component**. _For example, a JavaScript/TypeScript class instance._\n\nFor example, the npm package `@comunica/actor-query-operation-distinct-hash` is a **module**\nthat exposes a single **component** `ActorQueryOperationDistinctHash`,\nwhich implements the SPARQL `DISTINCT` operator.\nDuring dependency injection, any number of **instances** of the component `ActorQueryOperationDistinctHash`\ncan be created, possibly with different parameters values.\n\n## Describing modules in JSON-LD\n\nA module and their components are described in JSON-LD,\nand they **describe how components can be instantiated**.\nComponents are typically defined in a `components/` folder with the following structure: \n\n`components/components.jsonld`: (_root components file_)\n```json\n{\n  \"@context\": \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-distinct-hash/^1.0.0/components/context.jsonld\",\n  \"@id\": \"npmd:@comunica/actor-query-operation-distinct-hash\",\n  \"@type\": \"Module\",\n  \"requireName\": \"@comunica/actor-query-operation-distinct-hash\",\n  \"import\": [\n    \"files:components/Actor/QueryOperation/DistinctHash.jsonld\"\n  ]\n}\n```\n\n`components/Actor/QueryOperation/DistinctHash.jsonld`:\n```json\n{\n  \"@context\": [\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-distinct-hash/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-abstract-bindings-hash/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-operation/^1.0.0/components/context.jsonld\"\n  ],\n  \"@id\": \"npmd:@comunica/actor-query-operation-distinct-hash\",\n  \"components\": [\n    {\n      \"@id\": \"caqodh:Actor/QueryOperation/DistinctHash\",\n      \"requireElement\": \"ActorQueryOperationDistinctHash\",\n      \"parameters\": [\n        {\n          \"@id\":     \"caqodh:Actor/QueryOperation/DistinctHash#hashAlgorithm\",\n          \"default\": \"sha1\"\n        },\n        {\n          \"@id\":     \"caqodh:Actor/QueryOperation/DistinctHash#digestAlgorithm\",\n          \"default\": \"base64\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nThe `import` key allows components to be defined across different files,\nwhere its values internally translate into a local file path.\nFor example, `\"files:components/Actor/QueryOperation/DistinctHash.jsonld\"`\ncorresponds to the local file `components/Actor/QueryOperation/DistinctHash.jsonld`.\n\nThe prefix `files:` is used to make it interpretable as a URL in JSON-LD.\nThis makes all modules and components _semantic_ and fully dereferenceable.\nFor example, `\"files:components/Actor/QueryOperation/DistinctHash.jsonld\"`\nexpands to the URL https://linkedsoftwaredependencies.org/bundles/npm/%40comunica%2Factor-query-operation-distinct-hash/^1.0.0/components/Actor/QueryOperation/DistinctHash.jsonld.\n\n<div class=\"note\">\n<a href=\"https://linkedsoftwaredependencies.org/\">Linked Software Dependencies</a> is a service\nthat exposes all npm packages as JSON-LD,\nwhich forms a key element in Components.js.\n</div>\n\nLearn more in the Components.js documentation on [modules](https://componentsjs.readthedocs.io/en/latest/configuration/modules/)\nand [components](https://componentsjs.readthedocs.io/en/latest/configuration/components/general/).\n\n## Context files\n\nOur components and config files always make use of URLs as identifiers for things (`@id` in JSON-LD).\nSince URLs sometimes can become long, we make use of _JSON-LD context files_\nto **define shortcuts and prefixes for some URLs**.\n\nFor example, the context for our distinct actor(defined in `components/context.jsonld`) could look as follows:\n```json\n{\n  \"@context\": [\n    {\n      \"npmd\": \"https://linkedsoftwaredependencies.org/bundles/npm/\",\n      \"caqodh\": \"npmd:@comunica/actor-query-operation-distinct-hash/\",\n      \"ActorQueryOperationDistinctHash\": \"caqodh:Actor/QueryOperation/DistinctHash\",\n      \"hashAlgorithm\": \"caqodh:Actor/QueryOperation/DistinctHash#hashAlgorithm\",\n      \"digestAlgorithm\": \"caqodh:Actor/QueryOperation/DistinctHash#digestAlgorithm\"\n    }\n  ]\n}\n```\n\nIf you want to use these prefixes in any other file,\nthe full URL of this context has to be used in `\"@context\"`.\nThis URL will always be in the form of `\"https://linkedsoftwaredependencies.org/bundles/npm/<my-package>/^1.0.0/components/context.jsonld\"`.\n\n## Creating configurations in JSON-LD\n\nConfiguration files are used to **instantiate components**.\nWhile modules and components are defined in the `components/` folder,\nwe typically create our config files in `config/`.\nWe also define these as JSON-LD files, with pointers to our components files.\n\nThe instantiation of a Comunica engine could look like this:\n```json\n{\n  \"@context\": [\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-sparql/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-distinct-hash/^1.0.0/components/context.jsonld\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-construct/^1.0.0/components/context.jsonld\"  \n  ],\n  \"@id\": \"urn:comunica:my\",\n  \"@type\": \"Runner\",\n  \"actors\": [\n    {\n      \"@id\":           \"myInitActor\",\n      \"@type\":         \"ActorInitSparql\"\n    },\n    {\n      \"@id\":           \"#myDistinctQueryOperator\",\n      \"@type\":         \"ActorQueryOperationDistinctHash\",\n      \"hashAlgorithm\": \"RSA-SHA256\"\n    },\n    {\n      \"@id\":           \"#myConstructQueryOperator\",\n      \"@type\":         \"ActorQueryOperationConstruct\"\n    }\n  ]\n}\n```\n\nLearn more in the full Components.js documentation on [configs](https://componentsjs.readthedocs.io/en/latest/configuration/configurations/semantic/).\n\n## Package.json contents\n\nIf you want to expose components or use modular configs in your npm package,\n**Components.js must know where to find the required files (components, contexts, configs) in your npm package**.\n\nTherefore, it is required to add the following entries to your `package.json` file:\n```text\n{\n  ...\n  \"lsd:module\": \"https://linkedsoftwaredependencies.org/bundles/npm/my-package\",\n  \"lsd:components\": \"components/components.jsonld\",\n  \"lsd:contexts\": {\n    \"https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/components/context.jsonld\": \"components/context.jsonld\"\n  },\n  \"lsd:importPaths\": {\n    \"https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/components/\": \"components/\",\n    \"https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/config/\": \"config/\"\n  }\n  ...\n}\n```\n\n_On each line, make sure to replace `my-package` with your package `name`._\n\nThese entries have the following meaning:\n\n* `lsd:module`: The URL that corresponds to your npm package. This will mostly be `https://linkedsoftwaredependencies.org/bundles/npm/` appended by your package name.\n* `lsd:components`: Local path to your root components file. This will mostly be `components/components.jsonld`.\n* `lsd:contexts`: The mapping of context URLs to local context files. This will typically contain only one entry for `components/context.jsonld`, but can be empty. This is used by Components.js when looking up contexts to first look in the local file system, to avoid expensive HTTS(S) lookups if the file already exists locally.\n* `lsd:importPaths`: The mapping of component and config files to local files. This will typically contain entries for `components/` and `config/`. This is used by Components.js when looking up components or config imports to first look in the local file system, to avoid expensive HTTS(S) lookups if the file already exists locally.\n\nLearn more in the full Components.js documentation on [exposing components](https://componentsjs.readthedocs.io/en/latest/getting_started/basics/exposing_components/).\n","excerpt":"","path":"/docs/modify/advanced/componentsjs","paths":["/about/","/ask/","/blog/","/blog/2020-08-19-intro/","/blog/2020-08-24-release_1_16/","/contribute/","/docs/","/docs/query/","/docs/query/getting_started/","/docs/query/getting_started/query_cli/","/docs/query/getting_started/query_cli_file/","/docs/query/getting_started/query_app/","/docs/query/getting_started/query_browser_app/","/docs/query/getting_started/query_docker/","/docs/query/getting_started/setup_endpoint/","/docs/query/getting_started/setup_web_client/","/docs/query/getting_started/query_dev_version/","/docs/query/usage/","/docs/query/faq/","/docs/query/advanced/","/docs/query/advanced/basic_auth/","/docs/query/advanced/caching/","/docs/query/advanced/context/","/docs/query/advanced/federation/","/docs/query/advanced/graphql_ld/","/docs/query/advanced/hdt/","/docs/query/advanced/logging/","/docs/query/advanced/memento/","/docs/query/advanced/proxying/","/docs/query/advanced/rdfjs/","/docs/query/advanced/rdfjs_querying/","/docs/query/advanced/result_formats/","/docs/query/advanced/solid/","/docs/query/advanced/source_types/","/docs/query/advanced/sparql_query_types/","/docs/query/advanced/specifications/","/docs/modify/","/docs/modify/getting_started/","/docs/modify/getting_started/custom_config_cli/","/docs/modify/getting_started/custom_config_app/","/docs/modify/getting_started/contribute_actor/","/docs/modify/extensions/","/docs/modify/faq/","/docs/modify/advanced/","/docs/modify/advanced/algebra/","/docs/modify/advanced/architecture_core/","/docs/modify/advanced/architecture_sparql/","/docs/modify/advanced/browser_builds/","/docs/modify/advanced/buses/","/docs/modify/advanced/componentsjs/","/docs/modify/advanced/hypermedia/","/docs/modify/advanced/logging/","/docs/modify/advanced/mediators/","/docs/modify/advanced/observers/","/docs/modify/advanced/query_output_types/","/docs/modify/advanced/rdf_parsing_serializing/","/docs/modify/advanced/sparqlee/","/docs/modify/advanced/testing/","/logos/","/research/","/roadmap/"],"mattersData":{"/about/":{"title":"About","description":"Learn more about Comunica."},"/ask/":{"title":"Ask","description":"Ask questions about Comunica."},"/blog/":{"title":"Blog","description":"Blog posts, containing announcement or other of news.","blog_index":true},"/blog/2020-08-19-intro/":{"title":"A New Website for Comunica","excerpt":"\nWe're happy to present a brand new website for Comunica! 🎉\n_Don't know that Comunica is? [Read about it here](/about/)._\n\nThis new version contains all **basic information** around Comunica.\nAdditionally, it contains **guides** on how to [query with Comunica](/docs/query/),\nand how to [modify or extend it](/docs/modify/). \n\n"},"/blog/2020-08-24-release_1_16/":{"title":"Release 1.16.0: Full spec compliance, property paths, CSV/TSV, basic auth, and fixes","excerpt":"\nWith the latest release of Comunica, we have achieved the major milestone of **full compliance to the SPARQL 1.1 specification**.\nWhile Comunica has had support for all SPARQL 1.1 operators for a while,\nsome small parts were not always fully handled according to the spec,\nand property paths were not fully supported.\n\nThanks to the help of several students over the summer, these issues have been resolved,\nand all tests from [the SPARQL 1.1 test suite](https://w3c.github.io/rdf-tests/sparql11/) now pass.\n\n"},"/contribute/":{"title":"Contribute","description":"Contribute to the development of Comunica."},"/docs/":{"title":"Documentation","description":"Overview of all Comunica documentation.","index":true},"/docs/query/":{"title":"Query with Comunica","description":"Learn how to execute queries in different environments. Such as live in the browser, in JavaScript applications, or the CLI.","index":true},"/docs/query/getting_started/":{"title":"Getting started with querying","description":"Basic guides on how to easily get started with querying.","index":true},"/docs/query/getting_started/query_cli/":{"title":"Querying from the command line","description":"Execute SPARQL queries directly from the command line."},"/docs/query/getting_started/query_cli_file/":{"title":"Querying local files from the command line","description":"Execute SPARQL queries over local RDF files directly from the command line."},"/docs/query/getting_started/query_app/":{"title":"Querying in a JavaScript app","description":"Execute SPARQL queries from within your application using the JavaScript API."},"/docs/query/getting_started/query_browser_app/":{"title":"Querying in a JavaScript browser app","description":"Execute SPARQL queries from within your client-side browser application using the JavaScript API."},"/docs/query/getting_started/query_docker/":{"title":"Querying from a Docker container","description":"Execute SPARQL queries within a Docker container."},"/docs/query/getting_started/setup_endpoint/":{"title":"Setting up a SPARQL endpoint","description":"Allow querying over HTTP via the SPARQL protocol"},"/docs/query/getting_started/setup_web_client/":{"title":"Setting up a Web client","description":"Set up a user-friendly static Web page where SPARQL queries can be executed client-side"},"/docs/query/getting_started/query_dev_version/":{"title":"Query using the latest development version","description":"If you want to make use of the latest changes that are not released yet"},"/docs/query/usage/":{"title":"Usage showcase","description":"Examples of where Comunica is used."},"/docs/query/faq/":{"title":"Querying FAQ","description":"Frequently asked questions about using Comunica."},"/docs/query/advanced/":{"title":"Advanced querying","description":"Advanced guides on how to get the most out of Comunica.","index":true},"/docs/query/advanced/basic_auth/":{"title":"HTTP Basic Authentication","description":"Send authenticated HTTP requests by including username and password."},"/docs/query/advanced/caching/":{"title":"Caching","description":"When remote sources are requested, caching allows them to be reused in the future."},"/docs/query/advanced/context/":{"title":"Passing a context","description":"A context can be passed to a query engine to tweak its runtime settings."},"/docs/query/advanced/federation/":{"title":"Federated Querying","description":"Query over the union of data within any number of sources"},"/docs/query/advanced/graphql_ld/":{"title":"GraphQL-LD","description":"Using the power of JSON-LD contexts, GraphQL queries can be executed by Comunica"},"/docs/query/advanced/hdt/":{"title":"HDT","description":"HDT offers highly compressed immutable RDF storage."},"/docs/query/advanced/logging/":{"title":"Logging","description":"Loggers can be set to different logging levels to inspect what Comunica is doing behind the scenes."},"/docs/query/advanced/memento/":{"title":"Memento","description":"Using the Memento protocol, time travel queries can be executed."},"/docs/query/advanced/proxying/":{"title":"HTTP Proxy","description":"All HTTP requests can optionally go through a proxy."},"/docs/query/advanced/rdfjs/":{"title":"RDF/JS","description":"To achieve maximum interoperability between different JavaScript libraries, Comunica builds on top of the RDF/JS specifications."},"/docs/query/advanced/rdfjs_querying/":{"title":"Querying over RDF/JS sources","description":"If the built-in source types are not sufficient, you can pass a custom JavaScript object implementing a specific interface."},"/docs/query/advanced/result_formats/":{"title":"Result formats","description":"Query results can be serialized in different formats."},"/docs/query/advanced/solid/":{"title":"Solid","description":"Solid – the Web-based decentralization ecosystem – can be queried with Comunica."},"/docs/query/advanced/source_types/":{"title":"Source types","description":"Comunica detects and handles different types of sources."},"/docs/query/advanced/sparql_query_types/":{"title":"SPARQL query types","description":"Different SPARQL query types are possible, such as SELECT, CONSTRUCT, ASK, ..."},"/docs/query/advanced/specifications/":{"title":"Supported specifications","description":"Comunica supports several RDF-related specifications"},"/docs/modify/":{"title":"Modify Comunica","description":"Learn how to configure your own Comunica engine, or extend Comunica by implementing new components.","index":true},"/docs/modify/getting_started/":{"title":"Getting started with modification","description":"Basic guides on how to easily get started with Comunica modification.","index":true},"/docs/modify/getting_started/custom_config_cli/":{"title":"Querying with a custom configuration from the command line","description":"Create a custom configuration of Comunica modules with reduced features, and query with it from the command line."},"/docs/modify/getting_started/custom_config_app/":{"title":"Querying with a custom configuration in a JavaScript app","description":"Create a custom configuration of Comunica modules with changed features, and query with it from within your application using the JavaScript API."},"/docs/modify/getting_started/contribute_actor/":{"title":"Contributing a new query operation actor to the Comunica repository","description":"Setup a development environment, implement a new actor, and create a pull request."},"/docs/modify/extensions/":{"title":"Extensions","description":"Existing extensions of Comunica."},"/docs/modify/faq/":{"title":"Modify FAQ","description":"Frequently asked question about Comunica modification."},"/docs/modify/advanced/":{"title":"Advanced modification","description":"Advanced guides on how to get the most out of Comunica modification.","index":true},"/docs/modify/advanced/algebra/":{"title":"Algebra","description":"The internal representation of queries during query execution."},"/docs/modify/advanced/architecture_core/":{"title":"Core Architecture","description":"The low-level software architecture of Comunica for achieving modularity."},"/docs/modify/advanced/architecture_sparql/":{"title":"SPARQL Architecture","description":"The high-level software architecture of Comunica for implementing SPARQL."},"/docs/modify/advanced/browser_builds/":{"title":"Browser builds","description":"All modules in Comunica can be built for the browser."},"/docs/modify/advanced/buses/":{"title":"Buses and Actors","description":"An overview of all buses in Comunica and their actors."},"/docs/modify/advanced/componentsjs/":{"title":"Components.js","description":"Components.js is the dependency injection framework that Comunica uses to wire components via config files."},"/docs/modify/advanced/hypermedia/":{"title":"Hypermedia","description":"Discovery of data source capabilities during query execution."},"/docs/modify/advanced/logging/":{"title":"Logging","description":"How to log messages from within actors."},"/docs/modify/advanced/mediators/":{"title":"Mediators","description":"An overview of all mediators in Comunica."},"/docs/modify/advanced/observers/":{"title":"Observers","description":"Passively observe actions executed by actors on a given bus."},"/docs/modify/advanced/query_output_types/":{"title":"Query output types","description":"An overview of the different output types for query operations."},"/docs/modify/advanced/rdf_parsing_serializing/":{"title":"RDF Parsing and Serializing","description":"Basic concepts behind parsing and serializing RDF."},"/docs/modify/advanced/sparqlee/":{"title":"Sparqlee","description":"The SPARQL expression evaluation engine of Comunica."},"/docs/modify/advanced/testing/":{"title":"Testing","description":"The unit and integration tests that lead to a more stable codebase."},"/logos/":{"title":"Logos","description":"Free to use logos of Comunica."},"/research/":{"title":"Research","description":"TODO"},"/roadmap/":{"title":"Roadmap","description":"The long-term goals of Comunica"}}},"__N_SSG":true}