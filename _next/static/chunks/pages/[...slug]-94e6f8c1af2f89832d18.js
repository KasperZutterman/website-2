_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[7],{"+VNs":function(e,n,t){"use strict";var a=t("3lC6");e.exports=new a({include:[t("2YgE")],implicit:[t("peYA"),t("0/QM"),t("ydHo"),t("Pe6h")]})},"/CLx":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Testing'\ndescription: 'The unit and integration tests that lead to a more stable codebase.'\n---\n\nSince [code stability is one of the main goals of Comunica](/about/#stability),\nwe spend a lot of effort on testing our code.\nFor this, we continuously execute different kinds of tests in our [continous integration setup](https://github.com/comunica/comunica/blob/master/.travis.yml).\nThis means that every changes to the codebase always goes through\na large number of tests to make sure that no existing logic breaks.\n\n## Unit tests\n\nUsing the [Jest testing framework](https://jestjs.io/),\nwe test each actor in isolation.\nThe code requires a code and branch coverage of 100%.\n\nAll unit tests can be executed in the development environment using the following command:\n```bash\n$ yarn run test\n```\n\n## Integration tests\n\nUsing [rdf-test-suite-ldf.js](https://github.com/comunica/rdf-test-suite-ldf.js),\nwe check the correctness of a collection of SPARQL queries over the different default Comunica configurations.\nThis tool makes use of [declarative test manifest](https://github.com/comunica/manifest-ldf-tests)\nthat are inspired by the SPARQL 1.1 test suite.\n\nAll integration tests can be executed in the development environment using the following command:\n```bash\n$ npx lerna run integration\n```\n\n## Specification tests\n\nTo ensure the compliance to [specifications](/docs/query/advanced/specifications/),\nwe continuously execute their test suites using [rdf-test-suite.js](https://github.com/rubensworks/rdf-test-suite.js).\n\nAll specification tests can be executed in the development environment using the following command:\n```bash\n$ npx lerna run spec\n```\n\n## Sanity checks\n\nCertain things such as [browser builds](/docs/modify/advanced/browser_builds/) are not fully tested yet.\nIn order to at least check if they succeed during building,\nwe check these steps as well.\n\nFor example:\n```bash\n$ npx lerna run browser\n```\n\n## Next steps\n\nThere's still a lot more we want regarding testing to improve stability.\nInterested in helping out? Have a look at [this issue](https://github.com/comunica/comunica/issues/167).\n"},"/ijM":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'HTTP Basic Authentication'\ndescription: 'Send authenticated HTTP requests by including username and password.'\n---\n\nVia [HTTP Basic Authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)\none can include **username and password** credentials in HTTP requests.\nIf you want to query such protected resources,\nyou can include this authentication information for _all_ HTTP requests,\nor only for requests to _specific sources_. \n\n## Authentication on the command line\n\nVia the command line, username and password can be included in the URL as follows:\n```bash\n$ comunica-sparql https://username:password@example.org/page \\\n  \"SELECT * WHERE { ?s ?p ?o }\"\n```\n\n## Authentication in an application\n\nWhen using [Comunica SPARQL in an application](/docs/query/getting_started/query_app/), authentication information can be set using the `httpAuth` [context entry](/docs/query/advanced/context/):\n\nEnabling basic authentication for _all_ HTTP requests:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n  httpAuth: 'username:password',\n});\n```\n\nEnabling basic authentication for _a specific source_:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['http://username:password@example.org/page'],\n});\n```\n"},0:function(e,n){},"0/QM":function(e,n,t){"use strict";var a=t("hyoZ");e.exports=new a("tag:yaml.org,2002:bool",{kind:"scalar",resolve:function(e){if(null===e)return!1;var n=e.length;return 4===n&&("true"===e||"True"===e||"TRUE"===e)||5===n&&("false"===e||"False"===e||"FALSE"===e)},construct:function(e){return"true"===e||"True"===e||"TRUE"===e},predicate:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"})},"1OyB":function(e,n,t){"use strict";function a(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}t.d(n,"a",(function(){return a}))},"1mAy":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Logging'\ndescription: 'Loggers can be set to different logging levels to inspect what Comunica is doing behind the scenes.'\n---\n\nIf you want to inspect what is going on during query execution,\nyou can enable a logger in Comunica.\n\n<div class=\"note\">\nThis guide focuses on configuring logging levels and printing output.\n<a href=\"/docs/modify/advanced/logging/\">Click here</a> if you want to learn more about invoking a logger from within an actor implementation.\n</div>\n\n## Logging on the command line\n\nUsing Comunica SPARQL on the command line, logging can be enabled via the `-l` option.\nFor example, printing debug-level logs can be done as follows:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    \"SELECT * WHERE { ?s ?p ?o } LIMIT 100\" \\\n    -l debug\n```\n```text\n[2022-02-23T09:46:17.615Z]  INFO: Requesting https://fragments.dbpedia.org/2016-04/en {\n  headers: {\n    accept: 'application/n-quads,application/trig;q=0.95,application/ld+json;q=0.9,application/n-triples;q=0.8,text/turtle;q=0.6,application/rdf+xml;q=0.5,application/json;q=0.45,text/n3;q=0.35,application/xml;q=0.3,image/svg+xml;q=0.3,text/xml;q=0.3,text/html;q=0.2,application/xhtml+xml;q=0.18',\n    'user-agent': 'Comunica/actor-http-fetch (Node.js v14.17.0; darwin)'\n  },\n  method: 'GET',\n  actor: 'urn:comunica:default:http/actors#fetch'\n}\n[2022-02-23T09:46:17.756Z]  INFO: Identified as qpf source: https://fragments.dbpedia.org/2016-04/en { actor: 'urn:comunica:default:rdf-resolve-hypermedia/actors#qpf' }\n[2022-02-23T09:46:17.761Z]  INFO: Requesting https://fragments.dbpedia.org/2016-04/en?predicate=http%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23type {\n  headers: {\n    accept: 'application/n-quads,application/trig;q=0.95,application/ld+json;q=0.9,application/n-triples;q=0.8,text/turtle;q=0.6,application/rdf+xml;q=0.5,application/json;q=0.45,text/n3;q=0.35,application/xml;q=0.3,image/svg+xml;q=0.3,text/xml;q=0.3,text/html;q=0.2,application/xhtml+xml;q=0.18',\n    'user-agent': 'Comunica/actor-http-fetch (Node.js v14.17.0; darwin)'\n  },\n  method: 'GET',\n  actor: 'urn:comunica:default:http/actors#fetch'\n}\n[2022-02-23T09:46:17.785Z]  DEBUG: Determined physical join operator 'inner-bind' {\n  entries: 2,\n  variables: [ [ 's', 'p', 'o' ], [ 's', 'o' ] ],\n  costs: {\n    'inner-none': undefined,\n    'inner-single': undefined,\n    'inner-multi-empty': undefined,\n    'inner-bind': 6458426063925.053,\n    'inner-hash': undefined,\n    'inner-symmetric-hash': undefined,\n    'inner-nested-loop': 104059105829280600,\n    'optional-bind': undefined,\n    'optional-nested-loop': undefined,\n    'minus-hash': undefined,\n    'minus-hash-undef': undefined,\n    'inner-multi-smallest': undefined\n  },\n  coefficients: {\n    'inner-none': undefined,\n    'inner-single': undefined,\n    'inner-multi-empty': undefined,\n    'inner-bind': {\n      iterations: 6404592831613.728,\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: 538332323.1132541\n    },\n    'inner-hash': {\n      iterations: 1140381039,\n      persistedItems: 1040358853,\n      blockingItems: 1040358853,\n      requestTime: 1391277679.44\n    },\n    'inner-symmetric-hash': {\n      iterations: 1140381039,\n      persistedItems: 1140381039,\n      blockingItems: 0,\n      requestTime: 1391277679.44\n    },\n    'inner-nested-loop': {\n      iterations: 104058966701512660,\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: 1391277679.44\n    },\n    'optional-bind': undefined,\n    'optional-nested-loop': undefined,\n    'minus-hash': undefined,\n    'minus-hash-undef': undefined,\n    'inner-multi-smallest': undefined\n  }\n}\n[2022-02-23T09:46:17.786Z]  DEBUG: First entry for Bind Join:  {\n  entry: Quad {\n    termType: 'Quad',\n    value: '',\n    subject: Variable { termType: 'Variable', value: 's' },\n    predicate: NamedNode {\n      termType: 'NamedNode',\n      value: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'\n    },\n    object: Variable { termType: 'Variable', value: 'o' },\n    graph: DefaultGraph { termType: 'DefaultGraph', value: '' },\n    type: 'pattern'\n  },\n  metadata: {\n    requestTime: 18,\n    pageSize: 100,\n    cardinality: { type: 'estimate', value: 100022186 },\n    first: 'https://fragments.dbpedia.org/2016-04/en?predicate=http%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23type&page=1',\n    next: 'https://fragments.dbpedia.org/2016-04/en?predicate=http%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23type&page=2',\n    previous: null,\n    last: null,\n    searchForms: { values: [Array] },\n    canContainUndefs: false,\n    order: undefined,\n    availableOrders: undefined,\n    variables: [ [Variable], [Variable] ]\n  },\n  actor: 'urn:comunica:default:rdf-join/actors#inner-multi-bind'\n}\n[2022-02-23T09:46:17.794Z]  INFO: Requesting https://fragments.dbpedia.org/2016-04/en?subject=http%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FSpecial%3AFilePath%2F%21%21%21%E5%96%84%E7%A6%8F%E5%AF%BA.JPG&object=http%3A%2F%2Fdbpedia.org%2Fontology%2FImage {\n  headers: {\n    accept: 'application/n-quads,application/trig;q=0.95,application/ld+json;q=0.9,application/n-triples;q=0.8,text/turtle;q=0.6,application/rdf+xml;q=0.5,application/json;q=0.45,text/n3;q=0.35,application/xml;q=0.3,image/svg+xml;q=0.3,text/xml;q=0.3,text/html;q=0.2,application/xhtml+xml;q=0.18',\n    'user-agent': 'Comunica/actor-http-fetch (Node.js v14.17.0; darwin)'\n  },\n  method: 'GET',\n  actor: 'urn:comunica:default:http/actors#fetch'\n}\n[2022-02-23T09:46:17.795Z]  INFO: Requesting https://fragments.dbpedia.org/2016-04/en?subject=http%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FSpecial%3AFilePath%2F%21%21%21%E5%96%84%E7%A6%8F%E5%AF%BA.JPG&object=http%3A%2F%2Fwikidata.dbpedia.org%2Fontology%2FImage {\n  headers: {\n    accept: 'application/n-quads,application/trig;q=0.95,application/ld+json;q=0.9,application/n-triples;q=0.8,text/turtle;q=0.6,application/rdf+xml;q=0.5,application/json;q=0.45,text/n3;q=0.35,application/xml;q=0.3,image/svg+xml;q=0.3,text/xml;q=0.3,text/html;q=0.2,application/xhtml+xml;q=0.18',\n    'user-agent': 'Comunica/actor-http-fetch (Node.js v14.17.0; darwin)'\n  },\n  method: 'GET',\n  actor: 'urn:comunica:default:http/actors#fetch'\n}\n```\n\nAll log messages will be printed to standard error (`stderr`).\n\nIf you only want to print the logs, you can void all query results as follows:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    \"SELECT * WHERE { ?s ?p ?o } LIMIT 100\" \\\n    -l debug > /dev/null\n```\n\nIf you want to redirect all logs to a file, you can forward them like this:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    \"SELECT * WHERE { ?s ?p ?o } LIMIT 100\" \\\n    -l debug 2> /path/to/log.txt\n```\n\n## Logging levels\n\nThe following logging levels are available in Comunica:\n\n* `trace`\n* `debug`\n* `info`\n* `warn`\n* `error`\n* `fatal`\n\n<div class=\"note\">\nWhen enabling a level, all levels below are also enabled.\nFor example, when enabling <code>error</code>, then <code>fatal</code> will also be enabled.\n</div>\n\n## Logging in an application\n\nUsing the `log` [context entry](/docs/query/advanced/context/), you can enable logging in a [JavaScript application that uses Comunica](/docs/query/getting_started/query_app/):\n```javascript\nimport {LoggerPretty} from \"@comunica/logger-pretty\";\n\nconst bindingsStream = await myEngine.queryBindings('SELECT * WHERE { ?s ?p ?o }', {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n  log: new LoggerPretty({ level: 'debug' }),\n});\n```\n\nThis logger makes use of `LoggerPretty`, which will print everything to standard error (`stderr`),\njust like Comunica SPARQL on the command line.\n\nAlternatively, more advanced logging can be achieved by making use of [`@comunica/logger-bunyan`](https://github.com/comunica/comunica/tree/master/packages/logger-bunyan/),\nor by implementing your own logger that implements the [`Logger` interface](https://github.com/comunica/comunica/blob/master/packages/core/lib/Logger.ts).\n"},"2RPy":function(e,n,t){"use strict";e.exports=function(e){return"undefined"!==typeof e&&null!==e&&("object"===typeof e||"function"===typeof e)}},"2YgE":function(e,n,t){"use strict";var a=t("3lC6");e.exports=new a({explicit:[t("LFvy"),t("vQl5"),t("Ljib")]})},"2vG4":function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Mediators\'\ndescription: \'An overview of all mediators in Comunica.\'\n---\n\nMediators form a critical part of [Comunica\'s core architecture](/docs/modify/advanced/architecture_core/).\nThey are responsible for **selecting one actor from a bus**, based on a given task.\n\nWhile actors perform the actual logic, they never communicate with each other directly.\nInstead, they always communicate through mediators, to reduce coupling between actors.\nIf a different actor selection technique is needed,\na different mediator can be configured without having to change any buses or actors.\n\n## Mediator implementations\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Race | [`@comunica/mediator-race`](https://github.com/comunica/comunica/tree/master/packages/mediator-race) | Picks the first actor that resolves its test. |\n| Number | [`@comunica/mediator-number`](https://github.com/comunica/comunica/tree/master/packages/mediator-number) | Mediates over a single number field. It can either choose the actor with the maximum or with the minimum value. |\n| All | [`@comunica/mediator-all`](https://github.com/comunica/comunica/tree/master/packages/mediator-all) | Special mediator that runs _all_ actors that resolve their test in parallel. |\n| Combine Pipeline | [`@comunica/mediator-combine-pipeline`](https://github.com/comunica/comunica/tree/master/packages/mediator-combine-pipeline) | Special mediator that goes over all actors in sequence and forwards I/O. This requires the action input and the actor output to be of the same type. |\n| Combine Union | [`@comunica/mediator-combine-union`](https://github.com/comunica/comunica/tree/master/packages/mediator-combine-union) | Special mediator that takes the union of all actor results. |\n| Join Coefficients Fixed | [`@comunica/mediator-join-coefficients-fixed`](https://github.com/comunica/comunica/tree/master/packages/mediator-join-coefficients-fixed) | Mediates over join actors implementing the [Join Coefficients mediator type](https://github.com/comunica/comunica/tree/master/packages/mediatortype-join-coefficients). |\n\n## Mediator types\n\nComunica contains several packages named `@comunica/mediatortype-*`\nthat expose interfaces that extend the `IActorTest` interface.\nThese interfaces can be reused in different actors to indicate what properties can be mediated over.\n\nThe following mediator types are available:\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| HTTP Requests | [`@comunica/mediatortype-httprequests`](https://github.com/comunica/comunica/tree/master/packages/mediatortype-httprequests) | Number of HTTP requests required for an action. |\n| Iterations | [`@comunica/mediatortype-iterations`](https://github.com/comunica/comunica/tree/master/packages/mediatortype-iterations) | Number of iterations that are needed for joining streams. |\n| Priority | [`@comunica/mediatortype-priority`](https://github.com/comunica/comunica/tree/master/packages/mediatortype-priority) | Priority of an actor, for example used for parsers and serializers in content negotiation. |\n| Time | [`@comunica/mediatortype-time`](https://github.com/comunica/comunica/tree/master/packages/mediatortype-time) | Estimated time an action will take. |\n| Join Coefficients | [`@comunica/mediatortype-join-coefficients`](https://github.com/comunica/comunica/tree/master/packages/mediatortype-join-coefficients) | Represents the cost of a join operation on the [RDF Join bus](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join). |\n\n## Configuring and using a mediator\n\n### Defining a component mediator parameter\n\nThe following components file shows how a `mediatorJoin` parameter is added to [`@comunica/actor-query-operation-join`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-join):\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-join/^2.0.0/components/context.jsonld",\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-operation/^2.0.0/components/context.jsonld"\n  ],\n  "@id": "npmd:@comunica/actor-query-operation-join",\n  "components": [\n    {\n      "@id": "caqoj:Actor/QueryOperation/Join",\n      "@type": "Class",\n      "extends": "cbqo:Actor/QueryOperationTypedMediated",\n      "requireElement": "ActorQueryOperationJoin",\n      "comment": "A comunica Join Query Operation Actor.",\n      "parameters": [\n        {\n          "@id": "caqoj:mediatorJoin",\n          "comment": "A mediator for joining Bindings streams",\n          "required": true,\n          "unique": true\n        }\n      ],\n      "constructorArguments": [\n        {\n          "extends": "cbqo:Actor/QueryOperationTypedMediated/constructorArgumentsObject",\n          "fields": [\n            {\n              "keyRaw": "mediatorJoin",\n              "value": "caqoj:mediatorJoin"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n### Instantiating a component mediator\n\nThe following config file shows how we instantiate an actor with a race mediator over the RDF join bus ([`@comunica/bus-rdf-join`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join)):\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-join/^2.0.0/components/context.jsonld",\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-race/^2.0.0/components/context.jsonld"\n  ],\n  "@id": "urn:comunica:my",\n  "actors": [\n    {\n      "@id": "config-sets:sparql-queryoperators.json#myJoinQueryOperator",\n      "@type": "ActorQueryOperationJoin",\n      "caqoj:mediatorJoin": {\n        "@id": "config-sets:sparql-queryoperators.json#mediatorRdfJoin",\n        "@type": "MediatorRace",\n        "cc:Mediator/bus": { "@id": "cbrj:Bus/RdfJoin" }\n      }\n    }\n  ]\n}\n``` \n\n### Invoking a mediator in TypeScript\n\nInvoking the mediator in a TypeScript actor implementation is done like this:\n```typescript\nimport { IActionContext } from \'@comunica/types\';\nimport { AIActorTest, Mediator } from \'@comunica/core\';\nimport { ActorRdfJoin, IActionRdfJoin } from \'@comunica/bus-rdf-join\';\nimport { IMediatorTypeIterations } from \'@comunica/mediatortype-iterations\';\n\nexport class ActorQueryOperationJoin extends ActorQueryOperationTypedMediated<Algebra.Join> {\n\n  public readonly mediatorJoin: Mediator<ActorRdfJoin,\n  IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n\n  public constructor(args: IActorQueryOperationJoinArgs) {\n    super(args, \'join\');\n  }\n\n  public async testOperation(pattern: Algebra.Join, context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Join, context: IActionContext): Promise<IActorQueryOperationOutput> {\n    const myAction: IActionRdfJoin = { ... }; \n    return this.mediatorJoin.mediate(myAction);\n  }\n}\n\nexport interface IActorQueryOperationJoinArgs extends IActorQueryOperationTypedMediatedArgs {\n  mediatorJoin: Mediator<ActorRdfJoin, IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n}\n```\n'},"3Et8":function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Contributing a new query operation actor to the Comunica repository\'\ndescription: \'Setup a development environment, implement a new actor, and create a pull request.\'\n---\n\nThis guide focuses on all the required steps for contributing a new query operation actor to Comunica.\nConcretely, we will focus on implementing a custom actor for the SPARQL `REDUCED` operator.\n\n<div class="note">\nOnce you have followed this guide and actually want to contribute,\nhave a look at our <a href="/contribute/">contribution guide</a>.\n</div>\n\n## 1. Requirements\n\nYou will need the following to follow this guide:\n\n* [git](https://git-scm.com/)\n* [Node.js](https://nodejs.org/en/) (version 8.0 or higher)\n* [Yarn](https://yarnpkg.com/en/) package manager\n* Any kind of editor that be used to edit JavaScript files (We recommend [WebStorm](https://www.jetbrains.com/community/education/#students))\n* A [GitHub](https://github.com/) account\n\n## 2. Cloning the repo\n\nSince you do not have access to the Comunica repository by default,\nyou will have to **fork** the Comunica repo first.\n\n1. Go to https://github.com/comunica/comunica\n2. Make sure you are logged into your GitHub account.\n3. Click on the "Fork" button.\n\nAfter this, a copy of the Comunica repo will be available for your account\nin which you can make all the changes you want.\n\nNext, we will **clone** your fork to the local file system as follows: \n```bash\n$ git clone https://github.com/<my-username>/comunica.git\n```\n_Make sure your replace `<my-username>` with your GitHub username._\n\nAs a final setup step, we can install all dependencies as follows:\n```bash\n$ cd comunica\n$ yarn install\n```\n\nThis will install the dependencies of all modules.\nAfter that, all [Comunica packages](https://github.com/comunica/comunica/tree/master/packages) are available in the `packages/` folder\nand can be used in a development environment.\nAll pre-built [Comunica engines and configs](https://github.com/comunica/comunica/tree/master/engines) are available in the `engines/` folder\nsuch as querying with [Comunica SPARQL (`engines/query-sparql`)](https://github.com/comunica/comunica/tree/master/engines/query-sparql).\n\nA good git practise is to develop on **feature branches**.\nFor this, branch from the `master` as follows:\n```bash\n$ git checkout -b feature/my-feature\n```\n_Replace `my-feature` with a short name (without spaces) of the feature you want to implement._\n\n<div class="note">\nIf you fix a bug, you can name your branch something like <code>fix/my-fix</code>.\n</div>\n\nIf you want to make sure that everything has been installed correctly,\nnavigate to `engines/query-sparql`, and try out a simple query from the command line:\n```bash\n$ cd engines/query-sparql\n$ node bin/query.js https://fragments.dbpedia.org/2016-04/en \\\n  \'SELECT * WHERE { ?s ?p ?o } LIMIT 100\'\n```\n\nIf this command produces valid output, your development environment has been successfully setup.\n\nLet\'s navigate back to the repo root so we\'re ready for the next step:\n```bash\n$ cd ../..\n```\n\n## 3. Creating a new package\n\nThe Comunica monorepo contains a large collection of packages in the [`packages/`](https://github.com/comunica/comunica/tree/master/packages) directory.\nThis contains different types of packages: _actors, mediators and buses_.\n\n<div class="note">\nLearn more about the <a href="/docs/modify/advanced/architecture_core/">core architecture</a> and <a href="/docs/modify/advanced/architecture_sparql/">SPARQL actors and buses</a>.\n</div>\n\nFor each type of package, we provide a **generator tool** to initialize a template repo.\nFor this, you can use the [generator-comunica](https://github.com/comunica/generate-comunica) project (a [Yo](https://www.npmjs.com/package/yo) generator).\n\nTo install this generator, start a _new terminal session_ outside of the Comunica repo directory,\nand execute the following commands:\n```bash\n$ npm i -g yo\n$ git clone git@github.com:comunica/generate-comunica.git\n$ cd generate-comunica\n$ npm install\n$ npm link\n```\n\nThis will expose the `comunica:bus`, `comunica:mediator`, `comunica:actor`, and `comunica:actor-query-operation` generators for initializing projects of the respective types.\n`comunica:actor-query-operation` is a special type of the `comunica:actor` generator that has been preconfigured to the `query-operation` bus,\nwhich we will make use of in this guide.\nIf you want to create an actor on another bus than `query-operation`, you will have to invoke `comunica:actor` instead.\n\nIn this case, we want to create an actor on the `query-operation` bus for the `REDUCED` query operation.\nAs such, we can **execute the generator** as follows in the repo root:\n```bash\n$ yo comunica:actor-query-operation\n? The SPARQL Algebra type name of the operator (lowercase) reduced\n? The SPARQL Algebra interface name Reduced\n? Actor name (without actor-bus- prefix, lowercase) reduced-my\n? The full readable name of the actor Reduced My\n? The component base name of the actor (without Bus part) ReducedMy\n? A description of the actor A comunica Reduced My Query Operation Actor.\n? The component context prefix caqorm\n   create packages/actor-query-operation-reduced-my/components/Actor/QueryOperation/ReducedMy.jsonld\n   create packages/actor-query-operation-reduced-my/components/components.jsonld\n   create packages/actor-query-operation-reduced-my/components/context.jsonld\n   create packages/actor-query-operation-reduced-my/lib/ActorQueryOperationReducedMy.ts\n   create packages/actor-query-operation-reduced-my/test/ActorQueryOperationReducedMy-test.ts\n   create packages/actor-query-operation-reduced-my/.npmignore\n   create packages/actor-query-operation-reduced-my/index.ts\n   create packages/actor-query-operation-reduced-my/package.json\n   create packages/actor-query-operation-reduced-my/README.md\n```\n\nAfter answering the required question, a new package will be initialized at `packages/actor-query-operation-reduced-my/`.\n\nIn order to **link the dependencies of this new package**, make sure to run `yarn install` again in the monorepo root.\nYou will see some compilation errors, which you can ignore, as your new actor has not been implemented yet.\n\n## 4. Implementing your actor\n\nIn this step, we will implement our actor in `packages/actor-query-operation-reduced-my/lib/ActorQueryOperationReducedMy.ts`.\n\nThe generated class extends from `ActorQueryOperationTypedMediated`,\nwhich abstracts away many of the commonly required tasks for operators.\nThis class requires you to override two methods: `testOperation` and `runOperation`.\nThese two methods correspond to the [test and run phases that will be called by mediators](/docs/modify/advanced/architecture_core/#run-and-test-phases-for-selecting-an-actor).\n\n### 4.1. Test phase\n\nSince the `ActorQueryOperationTypedMediated` class already implements the test phase by checking if the incoming operation is a `REDUCED` operation,\nwe can just implement `testOperation` as follows:\n```typescript\n  public async testOperation(pattern: Algebra.Reduced, context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n```\n\n<div class="note">\nIf you want to make your actor only handle specific types of this operation,\nyou can add additional checks in here.\nIf you want to fail the test in certain cases, you will have to <code>throw</code> an error.\n</div>\n\n### 4.2. Run phase\n\nThe `runOperation` method will contain the actual logic for evaluation the `REDUCED` operator.\n\nBefore we start, change the return type of this method from `Promise<IQueryOperationResult>` to `Promise<IQueryOperationResultBindings>`,\nbecause this method will always [return bindings as query result](/docs/modify/advanced/query_operation_result_types/).\n\nThe first step of implementing the REDUCED actor,\nrequires evaluating the sub-operation that this REDUCED operation exists over.\n\nFor example, `REDUCED` can applied over the following BGP:\n```\nSELECT REDUCED * WHERE {\n  ?s ?p <http://dbpedia.org/resource/Belgium>.\n  ?s ?p ?o.\n}\n```\n\nAs such, we first have to evaluate this BGP first (or whatever other sub-operator is defined).\n\nThis sub-operation is stored in the `input` field of our `pattern`.\nBy using the query operation mediator (`this.mediatorQueryOperation`),\nwe can evaluate this sub-operation.\nThe sub-operator can be evaluated by the mediator as follows:\n```javascript\n// Delegate resolving the input operation to the mediator.\nconst output = ActorQueryOperation.getSafeBindings(await this\n      .mediatorQueryOperation.mediate({ operation: pattern.input, context }));\n```\n\nSince the `REDUCED` operator is very loosely defined in the SPARQL specification,\nit is valid to filter _nothing_ from the results, and just return the child operator\'s results as-is.\n\nAs such, we can return the following:\n```bash\nreturn {\n  type: \'bindings\',\n  bindingsStream: output.bindingsStream,\n  metadata: output.metadata,\n};\n```\n\n<div class="note">\nHave a look at the other query operation actors if you want to do something more complex with the <code>output</code>\'s <code>bindingsStream</code>.\n</div>\n\n## 5. Unit-testing your actor\n\nSince [testing is very important in Comunica](/docs/modify/advanced/testing/),\nthe generator will automatically generate some unit tests for your class in `packages/actor-query-operation-reduced-my/test/ActorQueryOperationReducedMy-test.ts`.\n\nSince we don\'t actually do anything in our actor, all default unit test should already pass.\nCheck this by executing in the repo root:\n```bash\nyarn run test ActorQueryOperationReducedMy-test.ts\n```\n\nHere, it is important that every class in your package reaches a code coverage of 100%.\nTherefore, if you have a different actor implementation,\nyou may have to add additional unit tests to check different cases.\n\n## 6. Configuring your actor\n\nIf you want to make it so that your actor is enabled by default in Comunica SPARQL,\nthen you\'ll have to make sure it is present in the default config.\n\nFor this, first **add your package as a dependency** in `engines/query-sparql/package.json`:\n```text\n{\n  ...\n  "dependencies": {\n    ...\n    "@comunica/actor-query-operation-reduced-my": "^1.0.0"\n  }\n  ...\n}\n```\n\n<div class="note">\nWhen creating a new actor, you can leave the version fixed at <code>"^1.0.0"</code>.\nThis version will be incremented automatically upon each new Comunica release.\n</div>\n\nNext, we have to **configure the actor** by replacing the existing `REDUCED` actor in the default config file `engines/config-query-sparql/config/query-operation/actors/query/reduced.json`:\n```text\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^2.0.0/components/context.jsonld",\n\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-reduced-my/^2.0.0/components/context.jsonld"\n  ],\n  "@id": "urn:comunica:default:Runner",\n  "@type": "Runner",\n  "actors": [\n    {\n      "@id": "urn:comunica:default:query-operation/actors#reduced",\n      "@type": "ActorQueryOperationReducedMy",\n      "mediatorQueryOperation": { "@id": "urn:comunica:default:query-operation/mediators#main" }\n    }\n  ]\n}\n```\n\n<div class="note">\nWhen adding non-query-operator actors, you may have to include your actor in a different config set.\n</div>\n\n## 7. Testing with Comunica SPARQL\n\nBefore we make our pull request,\nwe have to make sure that our actor actually works in practise.\n\nFor this, we have to make sure our TypeScript is properly compiled to JavaScript,\nand that our configuration file has been compiled:\n```bash\n$ yarn run build # Compile typescript and the components files at the ROOT OF THE REPO\n$ cd engines/query-sparql\n$ yarn run prepare # Compiles config\n```\n\n<div class="note">\nYou can also just run <code>yarn install</code> again from the root package, which will take care of all of this, and more.\n</div>\n\nAfter that, we should now be able to execute Comunica SPARQL from the command line with a given `REDUCED` query:\n```bash\n$ node bin/query.js https://fragments.dbpedia.org/2016-04/en \\\n  \'SELECT REDUCED * WHERE { ?s ?p ?o } LIMIT 100\'\n```\n\n## 8. Creating a pull request\n\nOnce everything has been tested, we can commit our **code and create a pull request**.\n\nFirst, add the changed files, and commit your code.\n\n```bash\n$ git add packages/actor-query-operation-reduced-my \\\n  engines/query-sparql/config \\\n  engines/query-sparql/package.json\n$ git commit -m "Add my custom reduced operator" \n```\n\n<div class="note">\nBefore making the commit, make sure you are not any unneeded files. You can use <code>git status</code> for this.\n</div>\n\nSeveral [pre-commit checks](/contribute/#report-bugs-or-request-features) will be done, such as linting and unit testing.\nShould any of these checks fail, your commit will not be done,\nand you have to retry again after fixing the problems.\n\nAlso make sure to check in your new package if there are any `TODO`s remaining,\nsuch as in the `README.md` file.\n\nOnce your commit is done, you can push your changes to your fork:\n```bash\n$ git push origin feature/my-feature\n```\n\nThe only thing that\'s left to do is making the pull request\nfrom your branch to the Comunica master branch at https://github.com/comunica/comunica/pulls.\nOnce you\'ve opened the pull request, several [automated checks](/contribute/#report-bugs-or-request-features)\nwill be run, and someone will have a look at your contribution very soon!\n'},"3VWD":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Benchmarking'\ndescription: 'Guidelines on running experiments with Comunica.'\n---\n\nThis page lists guidelines on how to run experiments with Comunica.\nThis can be useful for researchers that want to evaluate their modification,\nor for Comunica core developers that want to check performance.\n\n## Considerations when benchmarking\n\n### Running Node in production mode\n\nIf you want to do benchmarking with Comunica in Node.js, make sure to **run Node.js in production** mode as follows:\n\n```bash\nNODE_ENV=production node packages/some-package/bin/some-bin.js\n```\n\nThe reason for this is that Comunica extensively generates internal `Error` objects.\nIn non-production mode, these also produce long stacktraces, which may in some cases impact performance.\n\n### Taking into account startup time of the engine\n\nIf you want to run experiments, it is important to take into account the **time it takes for the query engine to start**.\nWhen measuring execution time, one should _only_ measure the actual time it takes for the engine to execute the query,\nexcluding the query engine's startup time.\n\nAs such, simply measuring the execution time via the command line is not advised.\nInstead, one should either make use of the `stats` writer on the command line,\nor measure query execution via JavaScript.\n\n## Simple benchmarking using the stats writer\n\nThe easiest way to do simple benchmarking is to make use of the `-t stats` [result format](/docs/query/advanced/result_formats/).\n\n```bash\n$ NODE_ENV=production \\\n    comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    \"SELECT * WHERE { ?s ?p ?o } LIMIT 100\" \\\n    -t stats\n```\n\nThis will output CSV in the form of:\n```csv\nResult,Delay (ms),HTTP requests\n1,136.638436,2\n2,137.211264,2\n3,137.385467,2\n...\n98,151.781901,2\n99,151.838555,2\n100,151.898222,2\nTOTAL,152.175256,2\n```\n\nThis tells us:\n\n* The number of query results\n* The cumulative time for each result to be emitted\n* The cumulative number of HTTP requests required up until each result\n\n## Simple benchmarking in JavaScript\n\nWhen [creating a Comunica query engine from a JavaScript application](/docs/query/getting_started/query_app/),\nmeasuring a query's execution time can be done as follows:\n```javascript\n// Start a timer\nconsole.time(\"myTimer\");\n\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n\nbindingsStream.on('data', (binding) => {\n    // Optionally do some logging\n});\nbindingsStream.on('end', () => {\n    // End the timer\n    console.timeEnd(\"myTimer\");\n});\n```\n\nMeasuring execution time from JavaScript gives you more flexibility compared to the command line.\n\nExamples for more advanced benchmarking in JavaScript can be found in the [examples repo](https://github.com/comunica/examples/).\n\n## Reproducible benchmarking via Comunica Bencher\n\n[Comunica Bencher](https://github.com/comunica/comunica-bencher)\nis a Docker-based benchmarking framework\nfor easily creating and running benchmarks with Comunica and [LDF Server](https://github.com/LinkedDataFragments/Server.js).\nIt is useful if you want to compare different configurations of Comunica with each other.\n\nTogether with the (semantic) configuration files of Comunica and LDF Server,\nthis tool completes the whole provenance chain of experimental results:\n\n* **Setup** of sofware based on configuration\n* **Generating** experiment input data\n* **Execution** of experiments based on parameters\n* Description of environment **dependencies** during experiments\n* **Reporting** of results\n* **Archiving** results into a single file for easy exchange\n"},"3lC6":function(e,n,t){"use strict";var a=t("Y2Yi"),o=t("w+qe"),i=t("hyoZ");function r(e,n,t){var a=[];return e.include.forEach((function(e){t=r(e,n,t)})),e[n].forEach((function(e){t.forEach((function(n,t){n.tag===e.tag&&n.kind===e.kind&&a.push(t)})),t.push(e)})),t.filter((function(e,n){return-1===a.indexOf(n)}))}function s(e){this.include=e.include||[],this.implicit=e.implicit||[],this.explicit=e.explicit||[],this.implicit.forEach((function(e){if(e.loadKind&&"scalar"!==e.loadKind)throw new o("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")})),this.compiledImplicit=r(this,"implicit",[]),this.compiledExplicit=r(this,"explicit",[]),this.compiledTypeMap=function(){var e,n,t={scalar:{},sequence:{},mapping:{},fallback:{}};function a(e){t[e.kind][e.tag]=t.fallback[e.tag]=e}for(e=0,n=arguments.length;e<n;e+=1)arguments[e].forEach(a);return t}(this.compiledImplicit,this.compiledExplicit)}s.DEFAULT=null,s.create=function(){var e,n;switch(arguments.length){case 1:e=s.DEFAULT,n=arguments[0];break;case 2:e=arguments[0],n=arguments[1];break;default:throw new o("Wrong number of arguments for Schema.create function")}if(e=a.toArray(e),n=a.toArray(n),!e.every((function(e){return e instanceof s})))throw new o("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");if(!n.every((function(e){return e instanceof i})))throw new o("Specified list of YAML types (or a single Type object) contains a non-Type object.");return new s({include:e,explicit:n})},e.exports=s},"3yd8":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Release 2.3.0: Better timeout support and minor enhancements'\n---\n\nIt's been a while since our latest blog post,\nso here's a small announcement on the latest 2.3.0 release.\n\n\x3c!-- excerpt-end --\x3e\n\n## Better timeout support\n\nWhen doing queries over slow sources, it may sometimes be desired to have requests time out if they run for too long.\nAs of this release, it is possible to [configure such timeouts](/docs/query/advanced/context/#16--http-timeout).\n\nFor example, configuring a timeout of 60 seconds when querying over a TPF endpoint can be done as follows:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n  httpTimeout: 60_000,\n});\n```\n\nThis functionality was implemented by [@Tpt](https://github.com/Tpt), as the functionality was requested via a [bounty](https://comunica.dev/association/bounties/).\n\n## Union default graph\n\nBy default, Comunica will only query over the [default graph](https://www.w3.org/TR/sparql11-query/#unnamedGraph).\nIf you want to query over triples in other named graphs, you need to specify this via the `GRAPH`, `FROM`, or `FROM NAMED` clauses.\nHowever, by setting the `unionDefaultGraph` context option to `true`, triples patterns will also apply to triples in the non-default graph.\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  unionDefaultGraph: true,\n});\n```\n\n## Improved ordering of terms\n\nWe recently noticed that ordering of terms in Comunica (as used by `ORDER BY`), did not fully implement total ordering.\nThis caused [issues](https://github.com/comunica/comunica/issues/892) where certain terms would be ordered in an inconsistent manner.\nThanks to [@Tpt](https://github.com/Tpt), Comunica (and the underlying [Sparqlee expressions evaluator](https://github.com/comunica/sparqlee)) now have proper total ordering support.\n\n## Full changelog\n\nAs always, if you want to learn more about these changes, check out the [full changelog](https://github.com/comunica/comunica/blob/master/CHANGELOG.md#v230---2022-06-29).\n"},"49sm":function(e,n){var t={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==t.call(e)}},"4M5b":function(e,n,t){"use strict";var a=t("hyoZ"),o=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),i=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");e.exports=new a("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:function(e){return null!==e&&(null!==o.exec(e)||null!==i.exec(e))},construct:function(e){var n,t,a,r,s,c,u,l,d=0,p=null;if(null===(n=o.exec(e))&&(n=i.exec(e)),null===n)throw new Error("Date resolve error");if(t=+n[1],a=+n[2]-1,r=+n[3],!n[4])return new Date(Date.UTC(t,a,r));if(s=+n[4],c=+n[5],u=+n[6],n[7]){for(d=n[7].slice(0,3);d.length<3;)d+="0";d=+d}return n[9]&&(p=6e4*(60*+n[10]+ +(n[11]||0)),"-"===n[9]&&(p=-p)),l=new Date(Date.UTC(t,a,r,s,c,u,d)),p&&l.setTime(l.getTime()-p),l},instanceOf:Date,represent:function(e){return e.toISOString()}})},"4eDq":function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'2022-09-13/15: Semantics Conference\'\ndescription: \'The Comunica Association will have a booth and talk at the Semantics Conference in Vienna\'\n---\n\n<div class="docs-intro-img">\n  <a href="https://2022-eu.semantics.cc/"><img src="https://2022-eu.semantics.cc/sites/2022-eu.semantics.cc/files/semantics-vienna-2022.png" alt="Semantics conference" style="width:50%" /></a>\n</div>\n\nThe week after [the online launch event of the Comunica Association](/events/2022-09-07-association_launch/),\nwe will be present at the European [Semantics Conference](https://2022-eu.semantics.cc/) in Vienna from September 13 until September 15.\n\nBe sure to attend the conference if you want to talk to us there.\nWe will have a **booth** at which you can find us during the breaks,\nand we will have a **talk about Comunica** at the main conference.\n'},"53tM":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Logging'\ndescription: 'How to log messages from within actors.'\n---\n\nActors can log messages at different levels,\nwhich may be useful for debugging,\nor emitting basic information.\n\n<div class=\"note\">\nThis guide focuses on invoking a logger from within an actor implementation.\n<a href=\"/docs/query/advanced/logging/\">Click here</a> if you want to learn more about configuring logging levels and printing output.\n</div>\n\n## Logging methods\n\nAll actors ([`Actor`](https://comunica.github.io/comunica/classes/core.actor.html)) expose the following methods:\n\n* `logTrace(context, message, dataCb?)`\n* `logDebug(context, message, dataCb?)`\n* `logInfo(context, message, dataCb?)`\n* `logWarn(context, message, dataCb?)`\n* `logError(context, message, dataCb?)`\n* `logFatal(context, message, dataCb?)`\n\nThese methods allow a log message to be emitted at the different [logging levels](/docs/query/advanced/logging/#logging-levels).\n\nThese methods require the [context](/docs/query/advanced/context/) to be passed,\nand a string message.\nOptionally, you can pass a callback to a JSON data hash.\n\n## Example\n\nEmitting a log message in an actor's `run` method can be done as follows:\n```typescript\npublic run(action: IAction): Promise<IActorHttpOutput> {\n  this.logInfo(action.context, 'This is a message');\n  this.logInfo(action.context, 'This is another message, with data',\n    () => ({ someParam: 'someValue' }));\n}\n```\n\n\n\n"},"6E7Q":function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Querying with a custom configuration from the command line\'\ndescription: \'Create a custom configuration of Comunica modules with reduced features, and query with it from the command line.\'\n---\n\nWhile packages such as [Comunica SPARQL](https://github.com/comunica/comunica/tree/master/engines/query-sparql)\nship with a default configuration that offer specific querying functionality,\nit is possible to **override these configurations**,\nso that you can modify the internal capabilities of your query engine.\n\nIn this guide, we will keep it simple,\nand we will just **remove some parts of the config file** to create a more lightweight query engine,\nand query it from the command line.\nIn a next guide, we will look into [querying with a custom config from a JavaScript app](/docs/modify/getting_started/custom_config_app/). \n\n<div class="note">\nThis guide assumes basic knowledge on querying with Comunica.\nIf you haven\'t looked into this yet, it is recommended to follow\n<a href="/docs/query/getting_started/query_cli/">the getting started guide on querying from the command line</a>.\n</div>\n\n## 1. Requirements of a config file\n\nComunica is composed of a **set of _[actors](/docs/modify/advanced/architecture_core/)_**\nthat execute specific tasks.\nFor example, all SPARQL query operators (`DISTINCT`, `FILTER`, `ASK`, ...)\nhave a corresponding actor that implements them in a certain way.\n\nBy modifying the Comunica config file,\nit is possible to **plug in** different implementations for certain SPARQL query operators,\nin case you for example have a more efficient implementation yourself. \n\n### Main config file\n\nA **Comunica config is written in JSON**, and typically looks something like this:\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/config-query-sparql/^2.0.0/components/context.jsonld"\n  ],\n  "@id": "urn:comunica:my",\n  "@type": "Runner",\n  "import": [\n    "ccqs:config/context-preprocess/actors.json",\n    "ccqs:config/context-preprocess/mediators.json",\n    "ccqs:config/http/actors.json",\n    "ccqs:config/http/mediators.json",\n    "ccqs:config/init/actors.json",\n    "ccqs:config/optimize-query-operation/actors.json",\n    "ccqs:config/optimize-query-operation/mediators.json",\n    "ccqs:config/query-operation/actors.json",\n    "ccqs:config/query-operation/mediators.json"\n  ]\n}\n``` \n\nEssentially, this config file contains a list of imports to smaller config files,\nwhich are loaded in when Comunica reads this config file.\n\nThese imported config files each represent a component on a particular bus.\nFor example `ccqs:config/query-operation/actors.json` refers to all actors that are registered on the query operation bus,\nand `ccqs:config/query-operation/mediators.json` refers to the mediators that are defined over the query operation bus.\n\n<div class="note">\nFor more details on the config fragmentation and IRI strategy,\nplease refer to <a href="https://github.com/comunica/comunica/blob/master/engines/config-query-sparql/config/README.md">config directory README.md file on GitHub</a>.\n</div>\n\nThe `ccqs:` prefix refers to the scope of the `@comunica/config-query-sparql` package,\nwhich means that all paths following it refer to files within this package.\n\n### Imported config file\n\nFor example, the imported config file `ccqs:config/query-operation/actors.json` could look something like this:\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/config-query-sparql/^2.0.0/components/context.jsonld"\n  ],\n  "import": [\n    "ccqs:config/query-operation/actors/query/ask.json",\n    "ccqs:config/query-operation/actors/query/bgp.json",\n    "ccqs:config/query-operation/actors/query/construct.json",\n    "ccqs:config/query-operation/actors/query/describe.json",\n    "ccqs:config/query-operation/actors/query/distinct.json",\n    "ccqs:config/query-operation/actors/query/extend.json",\n    "ccqs:config/query-operation/actors/query/filter.json",\n    "ccqs:config/query-operation/actors/query/from.json",\n    "ccqs:config/query-operation/actors/query/group.json",\n    "ccqs:config/query-operation/actors/query/join.json",\n    "ccqs:config/query-operation/actors/query/leftjoin.json",\n    "ccqs:config/query-operation/actors/query/minus.json",\n    "ccqs:config/query-operation/actors/query/nop.json",\n    "ccqs:config/query-operation/actors/query/orderby.json",\n    "ccqs:config/query-operation/actors/query/project.json",\n    "ccqs:config/query-operation/actors/query/quadpattern.json",\n    "ccqs:config/query-operation/actors/query/reduced.json",\n    "ccqs:config/query-operation/actors/query/service.json",\n    "ccqs:config/query-operation/actors/query/slice.json",\n    "ccqs:config/query-operation/actors/query/sparql-endpoint.json",\n    "ccqs:config/query-operation/actors/query/union.json",\n    "ccqs:config/query-operation/actors/query/values.json"\n  ]\n}\n```\n\nThis example config file imports several smaller config files,\nwhere each config file contains a single _[actor](/docs/modify/advanced/architecture_core/)_ that will be loaded into Comunica.\n\nFor example, the `ccqs:config/query-operation/actors/query/ask.json` file could look as follows:\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^2.0.0/components/context.jsonld",\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-ask/^2.0.0/components/context.jsonld"\n  ],\n  "@id": "urn:comunica:default:Runner",\n  "@type": "Runner",\n  "actors": [\n    {\n      "@id": "urn:comunica:default:query-operation/actors#ask",\n      "@type": "ActorQueryOperationAsk",\n      "mediatorQueryOperation": { "@id": "urn:comunica:default:query-operation/mediators#main" }\n    }\n  ]\n}\n```\n\nEach configured actor fulfills a specific task, e.g.:\n\n* `ActorQueryOperationAsk`: Executes SPARQL `ASK` queries.\n* `ActorQueryOperationDistinctHash`: Executes the SPARQL `DISTINCT` operator.\n* `ActorQueryOperationFilterSparqlee`: Executes SPARQL `FILTER` expressions.\n\n<div class="note">\nWhile the exact meaning of these config files are not important for this guide,\nif you want to learn more about its details,\nhave a look at the guide on\n<a href="/docs/modify/advanced/componentsjs/#creating-configurations-in-json-ld">configuration files</a>.\n</div>\n\n## 2. Install Comunica SPARQL\n\nSince we want to override the default config of **Comunica SPARQL**,\nwe have to make sure its package is installed first:\n\n```bash\n$ npm install -g @comunica/query-sparql\n```\n\n## 3. Start from an existing config file\n\nThe easiest way to create a custom config, is to start from an existing one, and add/remove things to fit your needs.\n\nLet\'s start by creating a new empty directory,\nand create a file called `config.json`.\n\nIn this guide, we will start from\nthe [Comunica SPARQL default config file](https://github.com/comunica/comunica/blob/master/engines/config-query-sparql/config/config-default.json).\nLet\'s **copy it\'s contents entirely into our `config.json`**:\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/config-query-sparql/^2.0.0/components/context.jsonld"\n  ],\n  "import": [\n    "ccqs:config/context-preprocess/actors.json",\n    "ccqs:config/context-preprocess/mediators.json",\n    "ccqs:config/hash-bindings/actors.json",\n    "ccqs:config/hash-bindings/mediators.json",\n    "ccqs:config/http/actors.json",\n    "ccqs:config/http/mediators.json",\n    "ccqs:config/http-invalidate/actors.json",\n    "ccqs:config/http-invalidate/mediators.json",\n    "ccqs:config/init/actors.json",\n    "ccqs:config/optimize-query-operation/actors.json",\n    "ccqs:config/optimize-query-operation/mediators.json",\n    "ccqs:config/query-operation/actors.json",\n    "ccqs:config/query-operation/mediators.json",\n    "ccqs:config/query-parse/actors.json",\n    "ccqs:config/query-parse/mediators.json",\n    "ccqs:config/query-result-serialize/actors.json",\n    "ccqs:config/query-result-serialize/mediators.json",\n    "ccqs:config/dereference/actors.json",\n    "ccqs:config/dereference/mediators.json",\n    "ccqs:config/dereference-rdf/actors.json",\n    "ccqs:config/dereference-rdf/mediators.json",\n    "ccqs:config/rdf-join/actors.json",\n    "ccqs:config/rdf-join/mediators.json",\n    "ccqs:config/rdf-join-entries-sort/actors.json",\n    "ccqs:config/rdf-join-entries-sort/mediators.json",\n    "ccqs:config/rdf-join-selectivity/actors.json",\n    "ccqs:config/rdf-join-selectivity/mediators.json",\n    "ccqs:config/rdf-metadata/actors.json",\n    "ccqs:config/rdf-metadata/mediators.json",\n    "ccqs:config/rdf-metadata-extract/actors.json",\n    "ccqs:config/rdf-metadata-extract/mediators.json",\n    "ccqs:config/rdf-parse/actors.json",\n    "ccqs:config/rdf-parse/mediators.json",\n    "ccqs:config/rdf-parse-html/actors.json",\n    "ccqs:config/rdf-resolve-hypermedia/actors.json",\n    "ccqs:config/rdf-resolve-hypermedia/mediators.json",\n    "ccqs:config/rdf-resolve-hypermedia-links/actors.json",\n    "ccqs:config/rdf-resolve-hypermedia-links/mediators.json",\n    "ccqs:config/rdf-resolve-hypermedia-links-queue/actors.json",\n    "ccqs:config/rdf-resolve-hypermedia-links-queue/mediators.json",\n    "ccqs:config/rdf-resolve-quad-pattern/actors.json",\n    "ccqs:config/rdf-resolve-quad-pattern/mediators.json",\n    "ccqs:config/rdf-serialize/actors.json",\n    "ccqs:config/rdf-serialize/mediators.json",\n    "ccqs:config/rdf-update-hypermedia/actors.json",\n    "ccqs:config/rdf-update-hypermedia/mediators.json",\n    "ccqs:config/rdf-update-quads/actors.json",\n    "ccqs:config/rdf-update-quads/mediators.json"\n  ]\n}\n```\n\n## 4. Execute with Comunica SPARQL\n\nWhile we usually use `comunica-sparql` to invoke Comunica SPARQL on the command line,\nwe can instead call `comunica-dynamic-sparql` with exactly the same arguments\nto allow **loading in a custom config file**.\n\nIn order to specify a custom config file,\nwe have to set the path to our config file via the `COMUNICA_CONFIG` environment variable:\n```bash\n$ export COMUNICA_CONFIG="config.json"\n```\n\nIf you now execute `comunica-dynamic-sparql`,\nit will load in your `config.json` file.\n\nLet\'s try a simple query to see if this works:\n```bash\n$ comunica-dynamic-sparql http://fragments.dbpedia.org/2016-04/en \\\n    "CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100"\n```\n\n<div class="note">\nIf you don\'t define the <code>COMUNICA_CONFIG</code> environment variable,\n<code>comunica-dynamic-sparql</code> will fallback to the default Comunica SPARQL config file.\n</div>\n\n<div class="note">\n<code>comunica-dynamic-sparql</code> has a significant startup delay compared to <code>comunica-sparql</code>,\nsince it now have to load in, parse, and interpret a config file.\n<code>comunica-dynamic-sparql</code> should therefore only be used for simple testing\nbefore you <a href="/docs/modify/getting_started/custom_config_app/">use your query engine in a separate package</a>.\n</div>\n\n## 5. Removing RDF serialization actors\n\nAs an example, we will **remove all actors that can output results in any RDF format**.\nAll of these actors are defined in the `ccqs:config/rdf-serialize/actors.json` config file.\n\nBefore we make any changes to our config file,\nlet us inspect the result formats that are currently available:\n```bash\n$ comunica-dynamic-sparql --listformats\napplication/ld+json\napplication/trig\napplication/n-quads\ntext/turtle\napplication/n-triples\ntext/n3\nstats\ntree\ntable\napplication/sparql-results+xml\ntext/tab-separated-values\napplication/sparql-results+json\ntext/csv\nsimple\napplication/json\n```\n\nThe first 6 of those formats are RDF serialization formats,\nwhich are mainly used for outputting `CONSTRUCT` query results.\n\nIf we want to remove those actors from the config file,\nwe can remove the following line from our `config.json`:\n```diff\n-    "ccqs:config/rdf-serialize/actors.json",\n```\n\nIf we now inspect the available result formats, we get the following:\n```bash\n$ comunica-dynamic-sparql --listformats\nstats\ntree\ntable\napplication/sparql-results+xml\ntext/tab-separated-values\napplication/sparql-results+json\ntext/csv\nsimple\napplication/json\n```\n\nAs you can see, the 6 RDF serialization formats are not present anymore.\nThis is because Comunica has not loaded them in because we have removed them from our config file.\n\n## 6. Only allowing `SELECT` queries\n\nLet\'s take our config modifications a step further,\nand let\'s say our goal is to build a query engine that can **_only_ execute `SELECT`** queries,\nand we don\'t want to be able to execute `CONSTRUCT` and `DESCRIBE` queries.\nThis will require us to remove some more actors.\n\nWhile the actors for `CONSTRUCT` and `DESCRIBE` are defined in `ccqs:config/query-operation/actors.json`,\nwe can not just simply remove that file from our imports,\nbecause it also contains actors for other SPARQL query operators which we don\'t want to remove, such as `SELECT`.\nInstead of _just_ removing `ccqs:config/query-operation/actors.json`,\nwe will remove it _and_ copy its contents directly into our config file.\n\n### 6.1. Inline an imported config\n\nTo do this, first **remove** the following line from our `config.json`:\n```text\n-    "ccqs:config/query-operation/actors.json",\n```\n\nNext, **copy the `"import"` entries** from [`ccqs:config/query-operation/actors.json`](https://raw.githubusercontent.com/comunica/comunica/master/engines/config-query-sparql/config/query-operation/actors.json) ([GitHub](https://github.com/comunica/comunica/blob/master/engines/config-query-sparql/config/query-operation/actors.json)),\nand paste it after the current `"import"` entries in our `config.json`.\n\nYour `config.json` file should have the following structure now:\n```text\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/config-query-sparql/^2.0.0/components/context.jsonld"\n  ],\n  "import": [\n    "ccqs:config/context-preprocess/actors.json",\n    "ccqs:config/context-preprocess/mediators.json",\n    ...\n    "ccqs:config/rdf-update-quads/actors.json",\n    "ccqs:config/rdf-update-quads/mediators.json",\n    \n    "ccqs:config/query-operation/actors/query/ask.json",\n    "ccqs:config/query-operation/actors/query/bgp.json",\n    "ccqs:config/query-operation/actors/query/construct.json",\n    ...\n    "ccqs:config/query-operation/actors/update/load.json",\n    "ccqs:config/query-operation/actors/update/move.json"\n  ]\n}\n\n```\n\n<div class="note">\nAt this point, your config file should still be valid.\nConfirm this by executing <code>comunica-dynamic-sparql</code>.\n</div>\n\n### 6.2. Remove actors\n\nNext, we will remove the query operation actors we don\'t need.\nConcretely, we will remove the following imports to actors:\n\n* `ccqs:config/query-operation/actors/query/construct.json`: Handles `CONSTRUCT` queries.\n* `ccqs:config/query-operation/actors/query/describe.json`: Handles `DESCRIBE` queries.\n\nFor this, remove the following lines:\n```diff\n-    "ccqs:config/query-operation/actors/query/construct.json",\n-    "ccqs:config/query-operation/actors/query/describe.json",\n```\n\n### 6.3. Test changes\n\nAfter this change, you should now be unable to execute `CONSTRUCT` or `DESCRIBE` queries.\nTry this out by executing the following:\n```bash\n$ comunica-dynamic-sparql http://fragments.dbpedia.org/2016-04/en \\\n    "CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100"\n```\n\nExecuting a `SELECT` query will still work:\n```bash\n$ comunica-dynamic-sparql http://fragments.dbpedia.org/2016-04/en \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100"\n```\n\nYou have now successfully built your own custom Comunica engine that is a bit more lightweight than the default one.\nJust like the `CONSTRUCT` and `DESCRIBE` actors,\nyou can remove any other actors you don\'t want to make it even more lightweight.\n\n<div class="note">\nLoading custom configs from the command line is limited to loading from a single custom config file.\nIf you want to split up your config file over different parts, you have to <a href="/docs/modify/getting_started/custom_config_app/">load it via the JavaScript API</a>.\n</div>\n'},"6eLG":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Bindings'\ndescription: 'Bindings objects are used to represent results of SPARQL SELECT queries'\n---\n\nSPARQL `SELECT` query results are represented as a stream of _bindings_ (sometimes also referred to as `BindingsStream`),\nwhere each bindings object represents a mapping from zero or more variables to RDF terms.\n\n<div class=\"note\">\nThe SPARQL specification uses <a href=\"https://www.w3.org/TR/sparql11-query/#sparqlSolutions\">solution mapping</a> as terminology to refer to bindings.\nThis means that a bindings object is equivalent to a solution mapping,\nand a <i>solution sequence</i> is equivalent to a bindings stream.\n</div>\n\nBindings object are represented using the [RDF/JS `Bindings`](http://rdf.js.org/query-spec/#bindings-interface) interface,\nand can be created using any RDF/JS [`BindingsFactory`](http://rdf.js.org/query-spec/#bindingsfactory-interface).\nComunica provides the [`@comunica/bindings-factory`](https://github.com/comunica/comunica/tree/master/packages/bindings-factory) package that implements these interfaces.\n\nBelow, several examples are shown on how these bindings objects can be used.\nPlease refer to [the README of `@comunica/bindings-factory`](https://github.com/comunica/comunica/tree/master/packages/bindings-factory) for a complete overview of its operations.\n\n## Reading values of bindings\n\n### `Bindings.has()`\n\nThe `has()` method is used to check if a value exists for the given variable.\nThe variable can either be supplied as a string (without `?` prefix), or as an RDF/JS variable.\n\n```typescript\nif (bindings.has('var1')) {\n  console.log('Has var1!');\n}\nif (bindings.has(DF.variable('var2'))) {\n  console.log('Has var2!');\n}\n```\n\n### `Bindings.get()`\n\nThe `get()` method is used to read the bound value of variable.\nThe variable can either be supplied as a string (without `?` prefix), or as an RDF/JS variable.\n\n```typescript\nimport * as RDF from '@rdfjs/types';\n\nconst term1: RDF.Term | undefined = bindings.get('var1');\nconst term2: RDF.Term | undefined = bindings.get(DF.variable('var2'));\n```\n\n### Entry iteration\n\nEach bindings object is an Iterable over its key-value entries,\nwhere each entry is a tuple of type `[RDF.Variable, RDF.Term]`.\n\n```typescript\n// Iterate over all entries\nfor (const [ key, value ] of bindings) {\n  console.log(key);\n  console.log(value);\n}\n\n// Save the entries in an array\nconst entries = [ ...bindings ];\n```\n\n### `Bindings.toString`\n\nThe `toString()` method returns a compact string representation of the bindings object,\nwhich can be useful for debugging.\n\n```typescript\nconsole.log(bindings.toString());\n\n/*\nCan output in the form of:\n{\n  \"a\": \"ex:a\",\n  \"b\": \"ex:b\",\n  \"c\": \"ex:c\"\n}\n */\n```\n\n## Creating bindings\n\nFirst, a bindings factory must be created:\n```typescript\nimport * as RDF from '@rdfjs/types';\nimport { DataFactory } from '@comunica/data-factory';\nimport { BindingsFactory } from '@comunica/bindings-factory';\n\nconst DF = new DataFactory();\nconst BF = new BindingsFactory(DF);\n```\n\nBindings can be created in different ways:\n```typescript\nconst bindings1: RDF.Bindings = BF.bindings([\n  [ DF.variable('var1'), DF.literal('abc') ],\n  [ DF.variable('var2'), DF.literal('def') ],\n]);\n\nconst bindings2: RDF.Bindings = BF.fromRecord({\n  var1: DF.literal('abc'),\n  var2: DF.literal('def'),\n});\n```\n"},"6r/d":function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Explain\'\ndescription: \'Display information about the logical and physical query plan\'\n---\n\nThe explain functionality allows you to extract information about the query plan of a Comunica query engine.\n\nThere are three explain modes available:\n\n- `parsed`: The [SPARQL Algebra](/docs/modify/advanced/algebra/) tree as parsed from the input query.\n- `logical`: The optimized logical query plan in SPARQL Algebra.\n- `physical`: A hierarchical log of which logical operations have been executed by which (physical) actors.\n\nWhile the `parsed` and `logical` explain modes happen before query execution,\nthe `physical` explain mode requires query execution to be completed.\nThis is because Comunica is an adaptive query engine that alters its query plan dynamically based on the sources it discovers at runtime.\nThis means that query execution must be completed before the final (physical) query plan can be inspected.\n\n<div class="note">\nIf you require more insight into what operations are being executed at runtime,\nyou can make use of the built-in <a href="/docs/query/advanced/logging/">logging</a> functionality.\n</div>\n\n<div class="note">\nThe output for the physical mode is an experimental feature,\nwhich means that the format of it might improve and be changed in the future inbetween major updates.\n</div>\n\n## Explaining on the command line\n\nIf you have [installed Comunica SPARQL for the command line](/docs/query/getting_started/query_cli/),\nthen you will have immediate access to the query explain functionality via the `--explain` option.\n\nBelow, you can see examples on how the different explain modes can be invoked.\n\n### Explain parsed on the command line\n\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n  -q \'SELECT * { ?s ?p ?o } LIMIT 100\' --explain parsed\n\n{\n  "type": "slice",\n  "input": {\n    "type": "project",\n    "input": {\n      "type": "bgp",\n      "patterns": [\n        {\n          "termType": "Quad",\n          "value": "",\n          "subject": {\n            "termType": "Variable",\n            "value": "s"\n          },\n          "predicate": {\n            "termType": "Variable",\n            "value": "p"\n          },\n          "object": {\n            "termType": "Variable",\n            "value": "o"\n          },\n          "graph": {\n            "termType": "DefaultGraph",\n            "value": ""\n          },\n          "type": "pattern"\n        }\n      ]\n    },\n    "variables": [\n      {\n        "termType": "Variable",\n        "value": "s"\n      },\n      {\n        "termType": "Variable",\n        "value": "p"\n      },\n      {\n        "termType": "Variable",\n        "value": "o"\n      }\n    ]\n  },\n  "start": 0,\n  "length": 100\n}\n```\n\n### Explain logical on the command line\n\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n  -q \'SELECT * { ?s ?p ?o } LIMIT 100\' --explain logical\n\n{\n  "type": "slice",\n  "input": {\n    "type": "project",\n    "input": {\n      "type": "join",\n      "input": [\n        {\n          "termType": "Quad",\n          "value": "",\n          "subject": {\n            "termType": "Variable",\n            "value": "s"\n          },\n          "predicate": {\n            "termType": "Variable",\n            "value": "p"\n          },\n          "object": {\n            "termType": "Variable",\n            "value": "o"\n          },\n          "graph": {\n            "termType": "DefaultGraph",\n            "value": ""\n          },\n          "type": "pattern"\n        }\n      ]\n    },\n    "variables": [\n      {\n        "termType": "Variable",\n        "value": "s"\n      },\n      {\n        "termType": "Variable",\n        "value": "p"\n      },\n      {\n        "termType": "Variable",\n        "value": "o"\n      }\n    ]\n  },\n  "start": 0,\n  "length": 100\n}\n```\n\n### Explain physical on the command line\n\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n  -q \'SELECT * { ?s ?p ?o. ?s a ?o } LIMIT 100\' --explain physical\n\n{\n  "logical": "slice",\n  "children": [\n    {\n      "logical": "project",\n      "variables": [\n        "s",\n        "p",\n        "o"\n      ],\n      "children": [\n        {\n          "logical": "join",\n          "children": [\n            {\n              "logical": "pattern",\n              "pattern": "?s ?p ?o"\n            },\n            {\n              "logical": "pattern",\n              "pattern": "?s http://www.w3.org/1999/02/22-rdf-syntax-ns#type ?o"\n            },\n            {\n              "logical": "join-inner",\n              "physical": "bind",\n              "bindIndex": 1,\n              "bindOrder": "depth-first",\n              "cardinalities": [\n                {\n                  "type": "estimate",\n                  "value": 1040358853\n                },\n                {\n                  "type": "estimate",\n                  "value": 100022186\n                }\n              ],\n              "joinCoefficients": {\n                "iterations": 6404592831613.728,\n                "persistedItems": 0,\n                "blockingItems": 0,\n                "requestTime": 556926378.1422498\n              },\n              "children": [\n                {\n                  "logical": "pattern",\n                  "pattern": "http://commons.wikimedia.org/wiki/Special:FilePath/!!!\u5584\u798f\u5bfa.JPG ?p http://dbpedia.org/ontology/Image"\n                },\n                {\n                  "logical": "pattern",\n                  "pattern": "http://commons.wikimedia.org/wiki/Special:FilePath/!!!\u5584\u798f\u5bfa.JPG ?p http://wikidata.dbpedia.org/ontology/Image"\n                },\n                ...\n                {\n                  "logical": "pattern",\n                  "pattern": "http://commons.wikimedia.org/wiki/Special:FilePath/%22..._WAAC_cooks_prepare_dinner_for_the_first_time_in_new_kitchen_at_Fort_Huachuca,_Arizona.%22,_12-05-1942_-_NARA_-_531152.jpg ?p http://wikidata.dbpedia.org/ontology/Image"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Explaining in JavaScript\n\nIf you have [installed Comunica SPARQL in a JavaScript app](/docs/query/getting_started/query_app/),\nthen you can invoke the `explain` method on your query engine with a certain explain mode.\n\nBelow, you can see examples on how the different explain modes can be invoked.\n\n### Explain parsed in JavaScript\n\n```typescript\nconsole.log(await engine.explain(`SELECT * WHERE {\n      ?s ?p ?o.\n    }`, {\n  sources: [ \'https://www.rubensworks.net/\' ],\n}, \'parsed\'));\n\n/*\nWill print:\n\n{\n  explain: true,\n  type: \'parsed\',\n  data: {\n    input: {\n      patterns: [\n        factory.createPattern(\n          DF.variable(\'s\'),\n          DF.variable(\'p\'),\n          DF.variable(\'o\'),\n        ),\n      ],\n      type: \'bgp\',\n    },\n    type: \'project\',\n    variables: [\n      DF.variable(\'s\'),\n      DF.variable(\'p\'),\n      DF.variable(\'o\'),\n    ],\n  },\n}\n\nwith DF being an RDF data factory, and factory being a SPARQL algebra factory.\n */\n```\n\n### Explain logical in JavaScript\n\n```typescript\nconsole.log(await engine.explain(`SELECT * WHERE {\n      ?s ?p ?o.\n    }`, {\n  sources: [ \'https://www.rubensworks.net/\' ],\n}, \'logical\'));\n\n/*\nWill print:\n\n{\n  explain: true,\n  type: \'logical\',\n  data: {\n    input: {\n      input: [\n        factory.createPattern(\n          DF.variable(\'s\'),\n          DF.variable(\'p\'),\n          DF.variable(\'o\'),\n        ),\n      ],\n      type: \'join\',\n    },\n    type: \'project\',\n    variables: [\n      DF.variable(\'s\'),\n      DF.variable(\'p\'),\n      DF.variable(\'o\'),\n    ],\n  },\n}\n\nwith DF being an RDF data factory, and factory being a SPARQL algebra factory.\n */\n```\n\n### Explain physical in JavaScript\n\n```typescript\nconsole.log(await engine.explain(`SELECT * WHERE {\n      ?s ?p ?o.\n    }`, {\n  sources: [ \'https://www.rubensworks.net/\' ],\n}, \'physical\'));\n\n/*\nWill print:\n\n{\n  explain: true,\n  type: \'physical\',\n  data: {\n    logical: \'project\',\n    variables: [ \'s\', \'p\', \'o\' ],\n    children: [\n      {\n        logical: \'join\',\n        children: [\n          {\n            logical: \'pattern\',\n            pattern: \'?s ?p ?o\',\n          },\n        ],\n      },\n    ],\n  },\n}\n */\n```\n'},"6sZF":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Federated Querying'\ndescription: 'Query over the union of data within any number of sources'\n---\n\nOne of the key features of Comunica,\nis the ability to query over **multiple sources** of different types.\nThis concept of querying over multiple sources is called _federated querying_.\n\nThis functionality can be exploited on both\nthe [CLI](/docs/query/getting_started/query_cli/) and the [JavaScript API](/docs/query/getting_started/query_app/).\nIn this guide, we will make use of the CLI as an example.\n\n<div class=\"note\">\nFederated query execution does not just send the query to each source separately.\nInstead, the triples from all sources are considered one large virtual dataset, which can then be queried over.\n</div> \n\n## Distributed Knowledge\n\nA fundamental concept of Linked Data and the Semantic Web\nis that data can be spread over different sources across the Web.\nThis means that querying over this data potentially involves more than one source.\n\nWhile some knowledge graphs such as\n[DBpedia](https://wiki.dbpedia.org/) and [Wikidata](https://www.wikidata.org/wiki/Wikidata:Main_Page)\naim to accumulate as much data as possible in one place,\nthese always have limitations in scope.\nAs such, federated querying may be needed for some queries.\n\n## Federated Querying in Comunica\n\nComunica's ability to execute federated queries is enabled by default.\nThis can be invoked by simply passing more than one source to the engine.\n\nFor example, the following query will retrieve all triples from DBpedia and two RDF documents:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    https://www.rubensworks.net/ \\\n    https://ruben.verborgh.org/profile/ \\\n    \"SELECT * WHERE { ?s ?p ?o }\"\n```\n\nThe example above shows that sources do not necessarily have to be of [the same type](/docs/query/advanced/source_types/).\n\n## Real-world federation example\n\nOne example of a real-world federated query,\nis task of linking people in DBpedia to library datasets.\nFor this, the [Virtual International Authority File](http://viaf.org/) can be used as a source to provide this linking.\n\nThe query below will retrieve all books in the Harvard Library written by people born in San Francisco:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    http://data.linkeddatafragments.org/viaf \\\n    http://data.linkeddatafragments.org/harvard \\\n    'SELECT ?person ?name ?book ?title {\n       ?person dbpedia-owl:birthPlace [ rdfs:label \"San Francisco\"@en ].\n       ?viafID schema:sameAs ?person;\n                    schema:name ?name.\n       ?book dc:contributor [ foaf:name ?name ];\n                   dc:title ?title.\n     }'\n```\n"},7104:function(e,n){var t=Object.prototype.toString;function a(e){return"function"===typeof e.constructor?e.constructor.name:null}e.exports=function(e){if(void 0===e)return"undefined";if(null===e)return"null";var n=typeof e;if("boolean"===n)return"boolean";if("string"===n)return"string";if("number"===n)return"number";if("symbol"===n)return"symbol";if("function"===n)return"GeneratorFunction"===a(e)?"generatorfunction":"function";if(function(e){return Array.isArray?Array.isArray(e):e instanceof Array}(e))return"array";if(function(e){if(e.constructor&&"function"===typeof e.constructor.isBuffer)return e.constructor.isBuffer(e);return!1}(e))return"buffer";if(function(e){try{if("number"===typeof e.length&&"function"===typeof e.callee)return!0}catch(n){if(-1!==n.message.indexOf("callee"))return!0}return!1}(e))return"arguments";if(function(e){return e instanceof Date||"function"===typeof e.toDateString&&"function"===typeof e.getDate&&"function"===typeof e.setDate}(e))return"date";if(function(e){return e instanceof Error||"string"===typeof e.message&&e.constructor&&"number"===typeof e.constructor.stackTraceLimit}(e))return"error";if(function(e){return e instanceof RegExp||"string"===typeof e.flags&&"boolean"===typeof e.ignoreCase&&"boolean"===typeof e.multiline&&"boolean"===typeof e.global}(e))return"regexp";switch(a(e)){case"Symbol":return"symbol";case"Promise":return"promise";case"WeakMap":return"weakmap";case"WeakSet":return"weakset";case"Map":return"map";case"Set":return"set";case"Int8Array":return"int8array";case"Uint8Array":return"uint8array";case"Uint8ClampedArray":return"uint8clampedarray";case"Int16Array":return"int16array";case"Uint16Array":return"uint16array";case"Int32Array":return"int32array";case"Uint32Array":return"uint32array";case"Float32Array":return"float32array";case"Float64Array":return"float64array"}if(function(e){return"function"===typeof e.throw&&"function"===typeof e.return&&"function"===typeof e.next}(e))return"generator";switch(n=t.call(e)){case"[object Object]":return"object";case"[object Map Iterator]":return"mapiterator";case"[object Set Iterator]":return"setiterator";case"[object String Iterator]":return"stringiterator";case"[object Array Iterator]":return"arrayiterator"}return n.slice(8,-1).toLowerCase().replace(/\s/g,"")}},"8+mo":function(e,n,t){"use strict";var a=t("hyoZ"),o=Object.prototype.hasOwnProperty,i=Object.prototype.toString;e.exports=new a("tag:yaml.org,2002:omap",{kind:"sequence",resolve:function(e){if(null===e)return!0;var n,t,a,r,s,c=[],u=e;for(n=0,t=u.length;n<t;n+=1){if(a=u[n],s=!1,"[object Object]"!==i.call(a))return!1;for(r in a)if(o.call(a,r)){if(s)return!1;s=!0}if(!s)return!1;if(-1!==c.indexOf(r))return!1;c.push(r)}return!0},construct:function(e){return null!==e?e:[]}})},"8Qj+":function(e,n,t){"use strict";const a=t("7104"),o=t("VQEG"),i=t("tfEw");function r(e){return"\n"!==e.slice(-1)?e+"\n":e}e.exports=function(e,n,t){if(null==n&&null==t)switch(a(e)){case"object":n=e.data,t={};break;case"string":return e;default:throw new TypeError("expected file to be a string or object")}const s=e.content,c=i(t);if(null==n){if(!c.data)return e;n=c.data}const u=e.language||c.language,l=o(u,c);if("function"!==typeof l.stringify)throw new TypeError('expected "'+u+'.stringify" to be a function');n=Object.assign({},e.data,n);const d=c.delimiters[0],p=c.delimiters[1],h=l.stringify(n,t).trim();let m="";return"{}"!==h&&(m=r(d)+r(h)+r(p)),"string"===typeof e.excerpt&&""!==e.excerpt&&-1===s.indexOf(e.excerpt.trim())&&(m+=r(e.excerpt)+r(p)),m+r(s)}},"8cl0":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Getting started with querying'\ndescription: 'Basic guides on how to easily get started with querying.'\nindex: true\n---\n\nThe following guides explain some basic ways in which you can use Comunica for querying.\n"},"91Zj":function(e,n,t){"use strict";t.r(n),t.d(n,"__N_SSG",(function(){return j})),t.d(n,"default",(function(){return R})),t.d(n,"getStaticData",(function(){return T}));var a=t("o0o1"),o=t.n(a);function i(e,n,t,a,o,i,r){try{var s=e[i](r),c=s.value}catch(u){return void t(u)}s.done?n(c):Promise.resolve(c).then(a,o)}function r(e){return function(){var n=this,t=arguments;return new Promise((function(a,o){var r=e.apply(n,t);function s(e){i(r,a,o,s,c,"next",e)}function c(e){i(r,a,o,s,c,"throw",e)}s(void 0)}))}}var s=t("nKUr");function c(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=new Array(n);t<n;t++)a[t]=e[t];return a}function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var t=[],a=!0,o=!1,i=void 0;try{for(var r,s=e[Symbol.iterator]();!(a=(r=s.next()).done)&&(t.push(r.value),!n||t.length!==n);a=!0);}catch(c){o=!0,i=c}finally{try{a||null==s.return||s.return()}finally{if(o)throw i}}return t}}(e,n)||function(e,n){if(e){if("string"===typeof e)return c(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?c(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var l=t("1OyB"),d=t("vuIU"),p=t("Ji7U"),h=t("md7G"),m=t("foSv"),f=t("2pyn"),g=t("hb5E"),y=t.n(g);function b(e){var n=e.path,t=e.paths,a=e.mattersData,o=e.reverse,i=t.filter((function(e){return e.startsWith(n)&&e!==n+"/"})).map((function(e){return e.slice(n.length+1,e.length)})).filter((function(e){return(e.match(/\//g)||[]).length<=2})).map((function(e){return{path:e,title:a[n+"/"+e].title,description:a[n+"/"+e].description,indent:(e.match(/\//g)||[]).length-1}})).map((function(e){return Object(s.jsxs)("a",{href:e.path,className:"index-entry indent-"+e.indent,children:[Object(s.jsx)("h3",{children:e.title}),Object(s.jsx)("p",{children:e.description})]},e.path)}));return o&&(i=i.reverse()),Object(s.jsx)("div",{className:"index",children:i})}var w=t("wR4/");function v(e){var n=e.path,t=e.paths,a=e.mattersData,o=t.filter((function(e){return e.startsWith(n)&&e!==n+"/"})).map((function(e){return e.slice(n.length+1,e.length)})).filter((function(e){return 1===(e.match(/\//g)||[]).length})).reverse().map((function(e){var t=u(/^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])-/.exec(e),4),o=(t[0],t[1]),i=t[2],r=t[3];return{path:e,date:"".concat(new Date("".concat(i," ").concat(r," ").concat(o)).toLocaleDateString("en-US",{weekday:"long",year:"numeric",month:"long",day:"numeric"})),title:a[n+"/"+e].title,excerpt:a[n+"/"+e].excerpt}})).map((function(e){return Object(s.jsxs)("a",{href:e.path,className:"blog-entry",children:[Object(s.jsx)("h3",{children:e.title}),Object(s.jsx)("p",{className:"date",children:e.date}),Object(s.jsxs)("div",{className:"excerpt",children:[Object(s.jsx)(w.a,{body:e.excerpt}),Object(s.jsx)("p",{className:"read-more",children:"Read more..."})]})]},e.path)}));return Object(s.jsx)("div",{className:"index",children:o})}function q(e){var n=e.frontmatter,t=e.path,a=e.paths,o=e.mattersData,i=a.filter((function(e){return t.startsWith(e)})).map((function(e){return{path:e,title:o[e].title}})).map((function(e){return Object(s.jsx)("li",{children:Object(s.jsx)("a",{href:e.path,children:e.title})},e.path)}));return i.length>0&&i.push(Object(s.jsx)("li",{children:n.title},"_")),Object(s.jsx)("ul",{className:"breadcrumbs",children:i})}var x=t("q1tI");function S(e,n){var t;if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(t=function(e,n){if(!e)return;if("string"===typeof e)return k(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return k(e,n)}(e))||n&&e&&"number"===typeof e.length){t&&(e=t);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,r=!0,s=!1;return{s:function(){t=e[Symbol.iterator]()},n:function(){var e=t.next();return r=e.done,e},e:function(e){s=!0,i=e},f:function(){try{r||null==t.return||t.return()}finally{if(s)throw i}}}}function k(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=new Array(n);t<n;t++)a[t]=e[t];return a}function A(e){var n=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,a=Object(m.a)(e);if(n){var o=Object(m.a)(this).constructor;t=Reflect.construct(a,arguments,o)}else t=a.apply(this,arguments);return Object(h.a)(this,t)}}var j=!0,R=function(e){Object(p.a)(t,e);var n=A(t);function t(){return Object(l.a)(this,t),n.apply(this,arguments)}return Object(d.a)(t,[{key:"render",value:function(){var e=this.props,n=e.frontmatter,t=e.body,a=e.path,o=e.paths,i=e.mattersData,r=e.excerpt,c="";if(a.startsWith("/blog/")){var l=u(/^\/blog\/([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])-/.exec(a),4),d=(l[0],l[1]),p=l[2],h=l[3],m=new Date("".concat(p," ").concat(h," ").concat(d)).toLocaleDateString("en-US",{weekday:"long",year:"numeric",month:"long",day:"numeric"});c=Object(s.jsx)("p",{className:"date",children:m})}return Object(s.jsxs)("div",{className:"container-page",children:[Object(s.jsx)(f.a,{title:n.title,description:r||n.description}),Object(s.jsxs)("main",{children:[Object(s.jsx)(q,{frontmatter:n,path:a,paths:o,mattersData:i}),Object(s.jsx)("h1",{children:n.title}),c,Object(s.jsx)("hr",{}),n.wip&&Object(s.jsxs)("div",{className:"wip",children:[Object(s.jsx)("h2",{children:"\ud83d\udea7 Under construction \ud83d\udea7\ufe0f"}),Object(s.jsxs)("p",{children:["This section still needs to be created \ud83d\udd28.",Object(s.jsx)("br",{}),"In the meantime, you can read our ",Object(s.jsx)("a",{href:"https://comunica.readthedocs.io/en/latest/",children:"old documentation"})," and check our ",Object(s.jsx)("a",{href:"https://github.com/comunica?utf8=%E2%9C%93&q=topic%3Atutorial&type=&language=",children:"tutorials"}),"."]}),Object(s.jsx)("p",{children:Object(s.jsx)("a",{href:"/contribute/",children:"You can contribute by helping to write guides like this."})})]}),Object(s.jsxs)("div",{className:"headers-overview",children:[Object(s.jsx)("p",{children:"On this page"}),Object(s.jsx)("ol",{className:"headers-overview-elements"})]}),Object(s.jsx)(w.a,{body:t}),n.index&&Object(s.jsx)(b,{path:a,paths:o,mattersData:i,reverse:n.reverse}),n.blog_index&&Object(s.jsx)(v,{path:a,paths:o,mattersData:i})]})]})}},{key:"componentDidMount",value:function(){var e,n=document.querySelector(".headers-overview-elements"),t=document.querySelector(".container-page").querySelectorAll("h2"),a=S(t);try{for(a.s();!(e=a.n()).done;){var o=e.value,i=document.createElement("li"),r=document.createElement("a");r.textContent=o.innerText,r.setAttribute("href","#"+o.id),r.setAttribute("class","headers-overview-element"),i.appendChild(r),n.appendChild(i)}}catch(c){a.e(c)}finally{a.f()}function s(){for(var e=document.querySelectorAll("a.headers-overview-element"),a=0;a<e.length;a++)e[a].classList.remove("headers-overview-element-active");var o=function(){var e,n,a=S(t);try{for(a.s();!(n=a.n()).done;){var o=n.value;if(o.id){if(!(o.getBoundingClientRect().top<=70))return e;e=o}}}catch(c){a.e(c)}finally{a.f()}return e}();if(o){var i=n.querySelector('a[href="#'+o.id+'"]');i&&i.classList.add("headers-overview-element-active")}}t.length>0&&(n.parentNode.style.display="block"),window.addEventListener("load",s),window.addEventListener("scroll",s)}}]),t}(t.n(x).a.Component);function T(){return C.apply(this,arguments)}function C(){return(C=r(o.a.mark((function e(){var n,a,i;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=t("iYKO"),n=o.keys().map((function(e,n){return e.slice(1,-3)+"/"})),a=n.map((function(e){for(var n;n=/\/[0-9]*_/.exec(e);)e=e.replace(n,"/");return e})),e.next=4,Promise.all(n.map((function(e){return t("UIgr")(".".concat(e.slice(0,-1),".md"))})));case 4:return i=e.sent.map((function(e){return y()(e.default,{excerpt_separator:"\x3c!-- excerpt-end --\x3e"})})).reduce((function(e,n,t){return e[a[t]]=n,e}),{}),e.abrupt("return",{paths:a,matters:i,fallback:!1});case 6:case"end":return e.stop()}var o}),e)})))).apply(this,arguments)}},"9Nb6":function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Exposing your custom config as an npm package\'\ndescription: \'Wrap your config in an npm package, and expose a CLI tool and a JavaScript API.\'\n---\n\nIn this guide, we will wrap our custom config into a new npm package,\nso that we can **expose it as a proper reusable query engine**.\nThis package will be able to do everything packages such as Comunica SPARQL (`@comunica/query-sparql`) can do.\nThis means that this package will have a CLI tool, and that it will expose a JavaScript API for use in other packages.\n\n<div class="note">\nA fully functional example can be found\n<a href="https://github.com/comunica/comunica-feature-solid/tree/master/engines/query-sparql-solid">here</a>.\n</div>\n\n## 1. Initialize a new package\n\nInitialize a new **empty npm package** as follows:\n```bash\n$ npm init\n```\n\nThe simplest way to include all required Comunica dependencies is to extend from **Comunica SPARQL**.\nAs such, add it as a dependency as follows:\n```bash\n$ npm install @comunica/query-sparql\n```\n\n<div class="note">\nIf you want to create a more lightweight package by selecting only those dependencies that are absolutely required,\nyou can make use of the <a href="https://github.com/comunica/comunica/blob/master/packager/packager">Comunica Packager</a>.\n</div>\n\nWe recommend to also **install TypeScript** as a dev dependency:\n```bash\n$ npm install -D typescript\n```\n\nAdd a `tsconfig.json` file with the following contents:\n```text\n{\n  "compileOnSave": true,\n  "compilerOptions": {\n    "module": "commonjs",\n    "lib": [\n      "es2020",\n      "es2021",\n      "dom"\n    ],\n    "target": "es2020",\n    "removeComments": false,\n    "preserveConstEnums": true,\n    "sourceMap": true,\n    "inlineSources": true,\n    "declaration": true,\n    "resolveJsonModule": true,\n    "downlevelIteration": true,\n\n    "strict": true,\n    "strictFunctionTypes": false,\n    "strictPropertyInitialization": false\n  },\n  "include": [\n    "lib/**/*",\n    "bin/**/*"\n  ],\n  "exclude": [\n    "**/node_modules",\n    "**/test/*"\n  ]\n}\n```\n\n\n<div class="note">\nIf your custom config also depends on other packages\nthat are not included in Comunica SPARQL,\nyou have to install them here as well.\n</div>\n\n## 2. Add a config file\n\n### 2.1. Create config file\n\nWe assume here that **you already have created a custom config file**.\n[Click here to learn how to create one](/docs/modify/getting_started/custom_config_app/) should you not have done this already.\n\nCreate a `config/` folder, and add your config file (`config-default.json`) in here.\n\nIf you config file includes other config sets, you can include them in this folder as well.\nIn this case, you also have to make sure to include the context file in `components/context.jsonld`.\n\nThe only requirement here is that there is at least a file **`config/config-default.json`**.\n\n### 2.2. Declare config options in `package.json`\n\n<div class="note">\nIf your config file is decomposed into several files,\nyou may already have done this step.\n</div>\n\nBefore we can refer to other files within our config file,\nwe have to add the `"lsd:module"` entry to our `package.json` file\nso that the config files can be found during engine initialization.\n\nConcretely, we need to **add the following entry to `package.json`**:\n```text\n{\n  ...\n  "lsd:module": true\n  ...\n}\n```\n\n<div class="note">\nIf you want to learn more about what this config entry means,\nread our guide on <a href="/docs/modify/advanced/componentsjs/">Components.js</a>,\na dependency injection framework that Comunica uses.\n</div>\n\n## 3. Compiling the config into JavaScript\n\nIn order to make the query engine start as fast as possible,\nwe will pre-compile our config file into a JavaScript file.\n\nWe will configure this in such as way that we can still modify our config file if needed,\nand recompile the JavaScript file easily.\n\nFor this, add the following **scripts to our `package.json`** file:\n```text\n{\n  ...\n  "scripts": {\n    ...\n    "prepublishOnly": "npm run build",\n    "build:engine": "comunica-compile-config config/config-default.json > engine-default.js",\n    "build:lib": "tsc",\n    "build": "npm run build:lib && npm run build:engine",\n    "postinstall": "npm run build"\n  },\n}\n```\n\nTry if your script works correctly by running:\n```bash\n$ npm run build\n```\n\nAfterwards, you should have an `engine-default.js` file in your folder.\n\n## 4. Creating command line tools\n\nIn this step, we will create three command line tools:\n\n* `bin/query.js`: The main CLI tool.\n* `bin/http.js`: Script for starting a SPARQL endpoint.\n* `bin/query-dynamic.js`: A [CLI tool in which you can load a custom config](/docs/modify/getting_started/custom_config_cli/).\n\nEach of these CLI tools are optional, and you only have to create those you want.\nFor this, **create the following files**:\n\n`bin/query.js`:\n```typescript\n#!/usr/bin/env node\nimport { runArgsInProcessStatic } from \'@comunica/runner-cli\';\nrunArgsInProcessStatic(require(\'../engine-default.js\'));\n```\n\n`bin/http.js`:\n```typescript\n#!/usr/bin/env node\nimport { HttpServiceSparqlEndpoint } from \'@comunica/actor-init-query\';\nconst defaultConfigPath = `${__dirname}/../config/config-default.json`;\nHttpServiceSparqlEndpoint.runArgsInProcess(process.argv.slice(2), process.stdout, process.stderr, `${__dirname}/../`, process.env, defaultConfigPath, code => process.exit(code))\n  .catch(error => process.stderr.write(`${error.message}/n`));\n```\n\n`bin/query-dynamic.js`:\n```typescript\n#!/usr/bin/env node\nimport { runArgsInProcess } from \'@comunica/runner-cli\';\nrunArgsInProcess(`${__dirname}/../`, `${__dirname}/../config/config-default.json`);\n```\n\nAs a final step, we have to make sure that we expose our CLI tools from the package.\nAs such, add the following **bin entries to `package.json`**:\n```text\n{\n  ...\n  "bin": {\n    "my-comunica": "./bin/query.js",\n    "my-comunica-http": "./bin/http.js",\n    "my-comunica-dynamic": "./bin/query-dynamic.js"\n  },\n}\n```\n_You can replace `my-comunica` with any name you want.`\n\nIf needed, [custom arguments may be added to CLI tools](/docs/modify/advanced/custom_cli_arguments/).\n\n## 5. Exposing a JavaScript API\n\nIn order to use your query engine as a dependency in other packages,\nwe have to expose its JavaScript API.\nWe will also immediately make it browser-friendly.\n\nFor this, create the following files:\n\n**`lib/QueryEngine.ts`**:\n```typescript\nimport { QueryEngineBase } from \'@comunica/actor-init-query\';\nimport type { ActorInitQueryBase } from \'@comunica/actor-init-query\';\nconst engineDefault = require(\'../engine-default.js\');\n\n/**\n * A Comunica SPARQL query engine.\n */\nexport class QueryEngine extends QueryEngineBase {\n  public constructor(engine: ActorInitQueryBase = engineDefault) {\n    super(engine);\n  }\n}\n```\n\n**`lib/QueryEngineFactory.ts`**:\n```typescript\nimport { QueryEngineFactoryBase } from \'@comunica/actor-init-query\';\nimport { QueryEngine } from \'./QueryEngine\';\n\n/**\n * A factory that can create query engines dynamically based on a given config.\n */\nexport class QueryEngineFactory extends QueryEngineFactoryBase<QueryEngine> {\n  public constructor() {\n    super(\n      `${__dirname}/../`,\n      `${__dirname}/../config/config-default.json`,\n      actorInitQuery => new QueryEngine(actorInitQuery),\n    );\n  }\n}\n```\n\n**`lib/index.ts`**:\n```typescript\nexport * from \'./QueryEngine\';\nexport * from \'./QueryEngineFactory\';\n```\n\n**`lib/index-browser.ts`**:\n```typescript\nexport * from \'./QueryEngine\';\n```\n\nAs a final step,\nmake sure to expose the following entries in your **`package.json`** file:\n```text\n{\n  ...\n  "main": "lib/index.js",\n  "types": "lib/index",\n  "browser": {\n    "./lib/index.js": "./lib/index-browser.js"\n  }\n}\n```\n\n## 6. Indicating what files should be published\n\nNot all files should be published to npm when releasing the package,\nand not all files should be added to git repositories.\n\nFor this **create the following files**:\n\n`.npmignore`\n```text\n```\n_`.npmignore` MUST exist and MUST be empty._\n\n`.gitignore`\n```text\nengine-default.js\nnode_modules\nlib/**/*.js\nlib/**/*.js.map\nlib/**/*.d.ts\ntest/**/*.js\ntest/**/*.js.map\ntest/**/*.d.ts\nbin/**/*.js\nbin/**/*.js.map\nbin/**/*.d.ts\n```\n\nAs a final step, **add following entries to `package.json`**:\n```text\n{\n  ...\n  "files": [\n    "components",\n    "config",\n    "bin/**/*.d.ts",\n    "bin/**/*.js",\n    "lib/**/*.d.ts",\n    "lib/**/*.js",\n    "engine-default.js"\n  ],\n}\n```\n\n## 7. Publish to npm\n\nNow, you are ready to [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages),\nand allow other to use it via the CLI or via the JavaScript API.\n'},"9qMJ":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Querying over RDF/JS sources'\ndescription: 'If the built-in source types are not sufficient, you can pass a custom JavaScript object implementing a specific interface.'\n---\n\nOne of the [different types of sources](/docs/query/advanced/source_types/) that is supported by Comunica\nis the [RDF/JS `Source` interface](http://rdf.js.org/stream-spec/#source-interface).\nThis allows you to pass objects as source to Comunica as long as they implement this interface.\n\nAn RDF/JS `Source` exposes the [`match`](http://rdf.js.org/stream-spec/#source-interface) method\nthat allows quad pattern queries to be executed,\nand matching quads to be returned as a stream.\n\n<div class=\"note\">\nLearn more about RDF/JS in this <a href=\"/docs/query/advanced/rdfjs/\">RDF/JS guide</a>.\n</div>\n\nSeveral implementations of this `Source` interface exist.\nIn the example below, we make use of the [`Store` from `N3.js`](https://github.com/rdfjs/N3.js#storing)\nthat offers one possible implementation when you want to [query over it with Comunica within a JavaScript application](/docs/query/getting_started/query_app/):\n```javascript\nconst store = new N3.Store();\nstore.addQuad(\n  namedNode('http://ex.org/Pluto'),\n  namedNode('http://ex.org/type'),\n  namedNode('http://ex.org/Dog')\n);\nstore.addQuad(\n  namedNode('http://ex.org/Mickey'),\n  namedNode('http://ex.org/type'),\n  namedNode('http://ex.org/Mouse')\n);\n\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: [store],\n});\n```\n\n<div class=\"note\">\nInstead of the default Comunica SPARQL package (<code>@comunica/query-sparql</code>),\nthe <a href=\"https://github.com/comunica/comunica/tree/master/engines/query-sparql-rdfjs#readme\">Comunica SPARQL RDF/JS (<code>@comunica/query-sparql-rdfjs</code>)</a>\ncan also be used as a more lightweight alternative\nthat <i>only</i> allows querying over RDF/JS sources.\n</div>\n\n<div class=\"note\">\nIf the RDF/JS `Source` also implements the RDF/JS <a href=\"http://rdf.js.org/stream-spec/#store-interface\"><code>Store</code> interface</a>,\nthen it is also supports <a href=\"/docs/query/advanced/rdfjs_updating/\">update queries</a> to add, change or delete quads in the store.\n</div>\n\n## Optional: query optimization\n\nThe RDFJS [Source interface](http://rdf.js.org/#source-interface) by default only exposed the `match` method.\nIn order to allow Comunica to produce more efficient query plans,\nyou can optionally expose a `countQuads` method that has the same signature as `match`,\nbut returns a `number` or `Promise<number>` that represents (an estimate of)\nthe number of quads that would match the given quad pattern.\nCertain `Source` implementations may be able to provide an efficient implementation of this method,\nwhich would lead to better query performance.\n\nIf Comunica does not detect a `countQuads` method, it will fallback to a sub-optimal counting mechanism\nwhere `match` will be called again to manually count the number of matches.\n"},A2Uh:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Destination types'\ndescription: 'Comunica detects and handles different types of destinations.'\n---\n\nComunica SPARQL supports _update_ queries to add, delete, or change data\non both the [command line](/docs/query/getting_started/update_cli/)\nand when [calling Comunica from a JavaScript application](/docs/query/getting_started/update_app/).\n\nUpdate queries typically consists of two parts:\n\n1. Query pattern to select data from a [_source_](/docs/query/advanced/source_types/);\n2. Quads to add or delete based on the query pattern into a _destination_.\n\nIn most cases, the _source_ and _destination_ are equal,\nsuch as when modifying data in [an in-memory RDF/JS Store](/docs/query/advanced/rdfjs_updating/).\n\nSince Comunica decouples _source_ and _destination_,\nit is possible to _read_ data from one place, and _apply changes_ in another place.\n\nUsually, destinations are passed as URLs that point to Web resources.\nBased on what is returned when _dereferencing_ this URL,\nComunica can apply different update algorithms.\n\nInstead of relying on Comunica's detection algorithms,\nyou can **enforce** the use of a certain type.\n\n<div class=\"note\">\nSome SPARQL endpoints may be recognised as a file instead of a SPARQL endpoint due to them not supporting <a href=\"https://www.w3.org/TR/sparql11-service-description/\">SPARQL Service Description</a>,\nwhich may produce incorrect results. For these cases, the <code>sparql</code> type MUST be set.\n</div>\n\n<div class=\"note\">\nWhen enabling the <a href=\"/docs/modify/advanced/logging/\"><code>info</code> logger</a>,\nyou can derive what type Comunica has determined for each destination.\n</div>\n\n## Setting destination type on the command line\n\nDestination types can optionally be enforced by prefixing the URL with `<typeName>@`, such as\n\n```bash\n$ comunica-sparql https://example.org/file-in.ttl \\\n    --to patchSparqlUpdate@https://example.org/file-out.ttl \\\n    \"INSERT DATA { <ex:s> <ex:p> <ex:o> }\"\n```\n\n## Setting destination type in an application\n\nVia a [JavaScript application](/docs/query/getting_started/query_app/),\nthe destination type can be set by using a hash containing `type` and `value`:\n```javascript\nawait myEngine.queryVoid(`...`, {\n  sources: [\n    { type: 'file', value: 'https://example.org/file-in.ttl' },\n  ],\n  destination: { type: 'patchSparqlUpdate', value: 'https://example.org/file-out.ttl' },\n});\n```\n\n## Supported destination types\n\nThe table below summarizes the different destination types that Comunica supports by default:\n\n| **Type name** | **Description** |\n| ------- | --------------- |\n| `rdfjsStore` | JavaScript objects implementing the [RDF/JS `store` interface](/docs/query/advanced/rdfjs_updating/) |\n| `sparql` | [SPARQL endpoint](https://www.w3.org/TR/sparql11-protocol/) |\n| `putLdp` | [Linked Data Platform](https://www.w3.org/TR/ldp/) HTTP APIs accepting `PUT` requests containing an RDF document, such as [Solid servers](https://github.com/solid/solid-spec/blob/master/api-rest.md#alternative-using-sparql-1). |\n| `patchSparqlUpdate` | [Linked Data Platform](https://www.w3.org/TR/ldp/) HTTP APIs accepting `PATCH` requests containing SPARQL Update queries (`application/sparql-update`), such as [Solid servers](https://github.com/solid/solid-spec/blob/master/api-rest.md#alternative-using-sparql-1). |\n\nThe default source type is `auto`,\nwhich will automatically detect the proper source type.\nFor example, if an `Accept-Patch: application/sparql-update` header\nis detected, the `patchSparqlUpdate` type is used.\n"},AMha:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Release 1.18.0: Smaller Web bundles and Microdata parsing'\n---\n\nThis post gives a brief overview of the new 1.18.0 release.\n\n\x3c!-- excerpt-end --\x3e\n\n## Smaller Web bundle sizes\n\nThanks to [Jacopo Scazzosi](https://github.com/jacoscaz),\nthe **Webpack bundle size** of the default Comunica config has been reduced from **1.47 MiB to 1.15 MiB**.\nThis reduction is mainly caused by swapping to smaller and more Web-friendly dependencies.\n\nThese changes were applied in preparation of the new release of [Quadstore](https://github.com/beautifulinteractions/node-quadstore),\na Comunica-powered RDF graph database where small bundle sizes are crucial.\n\n## Microdata parsing\n\nComunica already supported parsing RDFa from HTML (and other XML-like) documents.\nSince Microdata is [the most popular form of structured information on the Web](http://webdatacommons.org/structureddata/2019-12/stats/stats.html),\nit makes a lot of sense to be able to query over this as RDF.\nAs such, we plugged in the recently created [Microdata to RDF Streaming Parser](https://github.com/rubensworks/microdata-rdf-streaming-parser.js) into the default Comunica SPARQL config.\n\nShould you not need this parser in your querying use case,\nno worries, you can easily exclude this by creating a [custom config](https://comunica.dev/docs/modify/).\n\n## Fixes and enhancements\n\nNext to the changes above, several other smaller fixes and enhancements (such as [Emoji-support in query expressions](https://github.com/comunica/sparqlee/commit/4b873834a38c35329495d142eaf1c59f56fc0038)) were applied.\nCheck out the [full changelog](https://github.com/comunica/comunica/blob/master/CHANGELOG.md#v1180---2020-11-02) to read more about them.\n"},BXjD:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Comunica Association Memberships\'\n---\n\n[Earlier this year](/blog/2021-06-21-comunica_association_bounties/),\nwe announced the [Comunica Association](/association/),\nwhich is a non-profit organization that aims to make Comunica sustainable in the long term.\nIn this post, we announce the possibility to become a _member_ or _sponsor_ to the association,\nallowing organizations to drive the future roadmap of Comunica.\nWe plan an **official launch in fall 2022**, up until when organizations can choose\nto become a **founding member** of the Comunica Association.\n\n\x3c!-- excerpt-end --\x3e\n\n## \ud83c\udfc6 Status of the bounty program\n\nThe [bounty program](/association/bounties/) has now been running for a couple of months,\nand so far it is working exactly as intended.\nAt the time of writing, two organizations ([Triply](https://triply.cc/) and [Netwerk Digitaal Erfgoed](https://netwerkdigitaalerfgoed.nl/))\nhave placed a total of six bounties, with a varying scope.\nOne of these bounties has already been completed, and two of them are being worked on. \n\nAn important finding is that bounties are **best applied on issues that have a clearly defined scope**, and are not too large.\nFor example, a bounty for a specific and easily reproducible bug is ideal.\nOn the other hand, more high-level issues such as the need to [improve overall performance](https://github.com/comunica/comunica/issues/846)\nseem to be less suited for bounties, as the scope is large or infinite, and the required effort is hard to predict.\nSuch issues are better suited for being part of the general roadmap of Comunica,\nwhich is the main motivation for introducing a membership structure.\n\n## \ud83c\udfc5 Members and sponsors\n\nUp until now, Comunica primarily had a research-driven [roadmap](/roadmap/),\nbecause it grew out of a research project.\nTo allow more organizations and individuals to determine what this roadmap should look like,\nthe Comunica Association now allows [_members_ to become part of the board](/association/board/).\n\n**Board members are able to determine Comunica\'s roadmap**, and the future of the association.\nOne can become part of the board by either contributing time or via a financial contribution,\nwhich will both be invested in core maintenance of Comunica,\nsuch as managing issues and pull requests, and working towards the roadmap.\n\nFurthermore, for organizations that want to support the association,\nbut do not have the desire to become part of the board,\nthere is the option to become a _sponsor_, for which three tiers currently exist.\nThe **budget provided by sponsors will also go directly towards funding core maintenance of Comunica**,\nwith the option for sponsors to prioritize certain issues.\n\n<div class="docs-intro-img">\n  <img src="/img/association_members.svg" alt="Comunica Association Members and Sponsors" style="width:100%" \\>\n</div>\n\nSince the Comunica Association has a commitment to work as publicly and transparant as possible,\nall financial contributions from members and sponsors will go via our [Open Collective](https://opencollective.com/comunica-association) page.\nThis will allow everyone to see who contributed to the project, and how the budget is being spent.\n\n## \ud83d\ude80 Next steps\n\nOrganizations that are interested in **supporting Comunica**, can do so **starting from today**.\nBecoming a board member or a sponsor can be done via our [Open Collective](https://opencollective.com/comunica-association) page,\nafter which we will contact you about the practical next steps.\nIf you want to become a board member by contributing time, you can [contact us](mailto:ruben.taelman@ugent.be) directly.\n\nAll members and sponsors that are active by our launch date in the fall of 2022 (exact date will be announced later),\nwill be considered **founding members and sponsors**, and will receive a permanent mention on this website.\nBased on the active members and sponsors, we will be actively looking for dedicated core maintainers\nthat want to be funded by the Comunica Association (be sure to [contact us](mailto:ruben.taelman@ugent.be) if you\'re interested in this!).\n\n[Click here to learn more about the Comunica Association,](/association/)\nor [contact us](mailto:ruben.taelman@ugent.be) regarding any specific questions\nyou may have about the association.\n'},"Bqm/":function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Logos\'\ndescription: \'Free to use logos of Comunica.\'\n---\n\n<div class="docs-intro-img">\n  <img src="/img/comunica_red.svg" alt="Comunica red" style="width:23%" \\>\n  <img src="/img/comunica_white_on_red.svg" alt="Comunica white on red" style="width:23%" \\>\n  <img src="/img/comunica_black.svg" alt="Comunica black" style="width:23%" \\>\n  <img src="/img/comunica_red_plain.svg" alt="Comunica red plain" style="width:23%" \\>\n  <img src="/img/comunica_wide.svg" alt="Comunica wide" style="width:50%" \\>\n</div>\n\nIf you want to indicate that you use Comunica in your project,\nyou are free to use any form of the Comunica logo.\n\n[**Download the logo pack**](https://www.dropbox.com/s/s7xmy6ednifgm9v/comunica-logos.zip?dl=1).\n\nYou are not allowed to use these logos directly as your application\'s logo.\n'},C4fY:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Memento'\ndescription: 'Using the Memento protocol, time travel queries can be executed.'\n---\n\nUsing the [Memento protocol](https://tools.ietf.org/html/rfc7089),\nit is possible to perform **time-based content negotiation** over HTTP.\nThis allows servers to expose different temporal versions of resources next to each other,\nand clients to retrieve these versions at different times.\n\nComunica has built-in support for the Memento protocol\n([`actor-http-memento`](https://github.com/comunica/comunica/tree/master/packages/actor-http-memento)).\nTo enable Memento, one simply passes a date to the query engine via the [context](/docs/query/advanced/context/),\nand Comunica will perform time-based negotiation for that date.\n\nFor example, the [DBpedia TPF interface supports the Memento protocol](https://ruben.verborgh.org/blog/2016/06/22/querying-history-with-linked-data/).\nIn order to query over it at version 2010 from the command line, a custom date can be passed with `-d`:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    -d 'June 1, 2010' \\\n    'SELECT ?name ?deathDate WHERE {\n       ?person a dbpedia-owl:Artist;\n               rdfs:label ?name;\n               dbpedia-owl:birthPlace [ rdfs:label \"York\"@en ].\n       FILTER LANGMATCHES(LANG(?name),  \"EN\")\n       OPTIONAL { ?person dbpprop:dateOfDeath ?deathDate. }\n     }'\n```\n\nDates can also be passed via the JavaScript API, via the [query engine context](/docs/query/advanced/context/).\n"},CS1f:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'SPARQL Architecture\'\ndescription: \'The high-level software architecture of Comunica for implementing SPARQL.\'\n---\n\nThis document gives an overview of the architecture that implements SPARQL query execution in Comunica.\nThis builds upon the [core architecture](/docs/modify/advanced/architecture_core/) of _actors_, _mediators_, and _buses_.\n\n## Overview\n\nThe figure below shows an overview of the most relevant _buses_ and _actors_ that are used in Comunica SPARQL.\nSome buses such as _Query Operation_ contain a large number of subscribed actors,\nwhich is why the figure below only shows a few as illustration. \n\n[Click on the figure](/img/architecture_sparql.svg) to view it in full screen, or view the [PDF version](/img/architecture_sparql.pdf).\n\n<div class="docs-intro-img">\n  <a href="/img/architecture_sparql.svg"><img src="/img/architecture_sparql.svg" alt="SPARQL Architecture" style="width:100%" \\></a>\n  <strong>\n  </strong>\n</div>\n\n## Data flow for a query execution\n\nFor a given SPARQL query, the following logic flow occurs: (_some parts are omitted for simplicity_)\n\n* **Init:** All Comunica engines start here. This is where they accept generic input parameters, such as CLI arguments.\n    * **Comunica SPARQL:** Extracts things like query and output format from input arguments.\n        * **Context Preprocess:** A bus in which actors can optionally modify the [query context](/docs/query/advanced/context/).\n        * **SPARQL Parse:** Parsing the SPARQL query into SPARQL algebra.\n        * **Optimize Query Operation:** Applies optional optimizations to the SPARQL algebra before actual execution.\n        * **Query Operation:** Executes the query operation.\n            * **Join:** Handles joins between multiple query operations via its own separate bus.\n            * **Quad Pattern:** Evaluates triple/quad pattern operations via the *RDF Resolve Quad Pattern* bus, which translates a quad pattern into a stream of quad.\n                * **Federated:** Translates the array of sources in the [query context](/docs/query/advanced/context/) into the union of quad streams by resolving each source separately in the *RDF Resolve Quad Pattern* bus.\n                * **Hypermedia:** Resolves the quad stream of a resource by interpreting hypermedia links and controls.\n                    * **Dereference RDF:** Dereferences a path or URL into a stream of quads, which internally makes use of several parsers in the *RDF Parse* bus, and it uses data lookup actors from the *Dereference* bus.\n                    * **RDF Metadata:** Extracts the quads relevant for metadata from the stream of data quads.\n                    * **RDF Metadata Extract:** Create an object with metadata for a given metadata quad stream.\n                    * **RDF Resolve Hypermedia Links:** Determines which links should be followed from the metadata of the current source.\n                    * **RDF Resolve Hypermedia Links Queue:** Creates a link queue that enables different strategies for queueing links.\n                    * **RDF Resolve Hypermedia:** Handle a source based on the extracted metadata.\n                        * **None:** The source is considered a raw RDF file, for which all data quads matching the quad pattern are returned.\n                        * **SPARQL:** The source is considered a SPARQL endpoint if it has a service description, for which we use the SPARQL protocol.\n                        * **QPF:** The source is considered a [Triple/Quad Pattern Fragments](https://linkeddatafragments.org/) interface.\n        * **SPARQL Serialize:** Serializes the query result into a text-based serialization.\n\n[Click here for a full list of buses and actors](/docs/modify/advanced/buses/).\n'},ClZL:function(e,n,t){"use strict";var a=t("Y2Yi"),o=t("w+qe"),i=t("tN50"),r=t("Z3Ei"),s=t("VtPO"),c=Object.prototype.hasOwnProperty,u=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,l=/[\x85\u2028\u2029]/,d=/[,\[\]\{\}]/,p=/^(?:!|!!|![a-z\-]+!)$/i,h=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function m(e){return Object.prototype.toString.call(e)}function f(e){return 10===e||13===e}function g(e){return 9===e||32===e}function y(e){return 9===e||32===e||10===e||13===e}function b(e){return 44===e||91===e||93===e||123===e||125===e}function w(e){var n;return 48<=e&&e<=57?e-48:97<=(n=32|e)&&n<=102?n-97+10:-1}function v(e){return 48===e?"\0":97===e?"\x07":98===e?"\b":116===e||9===e?"\t":110===e?"\n":118===e?"\v":102===e?"\f":114===e?"\r":101===e?"\x1b":32===e?" ":34===e?'"':47===e?"/":92===e?"\\":78===e?"\x85":95===e?"\xa0":76===e?"\u2028":80===e?"\u2029":""}function q(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10),56320+(e-65536&1023))}for(var x=new Array(256),S=new Array(256),k=0;k<256;k++)x[k]=v(k)?1:0,S[k]=v(k);function A(e,n){this.input=e,this.filename=n.filename||null,this.schema=n.schema||s,this.onWarning=n.onWarning||null,this.legacy=n.legacy||!1,this.json=n.json||!1,this.listener=n.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.documents=[]}function j(e,n){return new o(n,new i(e.filename,e.input,e.position,e.line,e.position-e.lineStart))}function R(e,n){throw j(e,n)}function T(e,n){e.onWarning&&e.onWarning.call(null,j(e,n))}var C={YAML:function(e,n,t){var a,o,i;null!==e.version&&R(e,"duplication of %YAML directive"),1!==t.length&&R(e,"YAML directive accepts exactly one argument"),null===(a=/^([0-9]+)\.([0-9]+)$/.exec(t[0]))&&R(e,"ill-formed argument of the YAML directive"),o=parseInt(a[1],10),i=parseInt(a[2],10),1!==o&&R(e,"unacceptable YAML version of the document"),e.version=t[0],e.checkLineBreaks=i<2,1!==i&&2!==i&&T(e,"unsupported YAML version of the document")},TAG:function(e,n,t){var a,o;2!==t.length&&R(e,"TAG directive accepts exactly two arguments"),a=t[0],o=t[1],p.test(a)||R(e,"ill-formed tag handle (first argument) of the TAG directive"),c.call(e.tagMap,a)&&R(e,'there is a previously declared suffix for "'+a+'" tag handle'),h.test(o)||R(e,"ill-formed tag prefix (second argument) of the TAG directive"),e.tagMap[a]=o}};function _(e,n,t,a){var o,i,r,s;if(n<t){if(s=e.input.slice(n,t),a)for(o=0,i=s.length;o<i;o+=1)9===(r=s.charCodeAt(o))||32<=r&&r<=1114111||R(e,"expected valid JSON character");else u.test(s)&&R(e,"the stream contains non-printable characters");e.result+=s}}function E(e,n,t,o){var i,r,s,u;for(a.isObject(t)||R(e,"cannot merge mappings; the provided source object is unacceptable"),s=0,u=(i=Object.keys(t)).length;s<u;s+=1)r=i[s],c.call(n,r)||(n[r]=t[r],o[r]=!0)}function L(e,n,t,a,o,i,r,s){var u,l;if(Array.isArray(o))for(u=0,l=(o=Array.prototype.slice.call(o)).length;u<l;u+=1)Array.isArray(o[u])&&R(e,"nested arrays are not supported inside keys"),"object"===typeof o&&"[object Object]"===m(o[u])&&(o[u]="[object Object]");if("object"===typeof o&&"[object Object]"===m(o)&&(o="[object Object]"),o=String(o),null===n&&(n={}),"tag:yaml.org,2002:merge"===a)if(Array.isArray(i))for(u=0,l=i.length;u<l;u+=1)E(e,n,i[u],t);else E(e,n,i,t);else e.json||c.call(t,o)||!c.call(n,o)||(e.line=r||e.line,e.position=s||e.position,R(e,"duplicated mapping key")),n[o]=i,delete t[o];return n}function P(e){var n;10===(n=e.input.charCodeAt(e.position))?e.position++:13===n?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):R(e,"a line break is expected"),e.line+=1,e.lineStart=e.position}function I(e,n,t){for(var a=0,o=e.input.charCodeAt(e.position);0!==o;){for(;g(o);)o=e.input.charCodeAt(++e.position);if(n&&35===o)do{o=e.input.charCodeAt(++e.position)}while(10!==o&&13!==o&&0!==o);if(!f(o))break;for(P(e),o=e.input.charCodeAt(e.position),a++,e.lineIndent=0;32===o;)e.lineIndent++,o=e.input.charCodeAt(++e.position)}return-1!==t&&0!==a&&e.lineIndent<t&&T(e,"deficient indentation"),a}function D(e){var n,t=e.position;return!(45!==(n=e.input.charCodeAt(t))&&46!==n||n!==e.input.charCodeAt(t+1)||n!==e.input.charCodeAt(t+2)||(t+=3,0!==(n=e.input.charCodeAt(t))&&!y(n)))}function F(e,n){1===n?e.result+=" ":n>1&&(e.result+=a.repeat("\n",n-1))}function Q(e,n){var t,a,o=e.tag,i=e.anchor,r=[],s=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=r),a=e.input.charCodeAt(e.position);0!==a&&45===a&&y(e.input.charCodeAt(e.position+1));)if(s=!0,e.position++,I(e,!0,-1)&&e.lineIndent<=n)r.push(null),a=e.input.charCodeAt(e.position);else if(t=e.line,M(e,n,3,!1,!0),r.push(e.result),I(e,!0,-1),a=e.input.charCodeAt(e.position),(e.line===t||e.lineIndent>n)&&0!==a)R(e,"bad indentation of a sequence entry");else if(e.lineIndent<n)break;return!!s&&(e.tag=o,e.anchor=i,e.kind="sequence",e.result=r,!0)}function O(e){var n,t,a,o,i=!1,r=!1;if(33!==(o=e.input.charCodeAt(e.position)))return!1;if(null!==e.tag&&R(e,"duplication of a tag property"),60===(o=e.input.charCodeAt(++e.position))?(i=!0,o=e.input.charCodeAt(++e.position)):33===o?(r=!0,t="!!",o=e.input.charCodeAt(++e.position)):t="!",n=e.position,i){do{o=e.input.charCodeAt(++e.position)}while(0!==o&&62!==o);e.position<e.length?(a=e.input.slice(n,e.position),o=e.input.charCodeAt(++e.position)):R(e,"unexpected end of the stream within a verbatim tag")}else{for(;0!==o&&!y(o);)33===o&&(r?R(e,"tag suffix cannot contain exclamation marks"):(t=e.input.slice(n-1,e.position+1),p.test(t)||R(e,"named tag handle cannot contain such characters"),r=!0,n=e.position+1)),o=e.input.charCodeAt(++e.position);a=e.input.slice(n,e.position),d.test(a)&&R(e,"tag suffix cannot contain flow indicator characters")}return a&&!h.test(a)&&R(e,"tag name cannot contain such characters: "+a),i?e.tag=a:c.call(e.tagMap,t)?e.tag=e.tagMap[t]+a:"!"===t?e.tag="!"+a:"!!"===t?e.tag="tag:yaml.org,2002:"+a:R(e,'undeclared tag handle "'+t+'"'),!0}function N(e){var n,t;if(38!==(t=e.input.charCodeAt(e.position)))return!1;for(null!==e.anchor&&R(e,"duplication of an anchor property"),t=e.input.charCodeAt(++e.position),n=e.position;0!==t&&!y(t)&&!b(t);)t=e.input.charCodeAt(++e.position);return e.position===n&&R(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(n,e.position),!0}function M(e,n,t,o,i){var r,s,u,l,d,p,h,m,v=1,k=!1,A=!1;if(null!==e.listener&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,r=s=u=4===t||3===t,o&&I(e,!0,-1)&&(k=!0,e.lineIndent>n?v=1:e.lineIndent===n?v=0:e.lineIndent<n&&(v=-1)),1===v)for(;O(e)||N(e);)I(e,!0,-1)?(k=!0,u=r,e.lineIndent>n?v=1:e.lineIndent===n?v=0:e.lineIndent<n&&(v=-1)):u=!1;if(u&&(u=k||i),1!==v&&4!==t||(h=1===t||2===t?n:n+1,m=e.position-e.lineStart,1===v?u&&(Q(e,m)||function(e,n,t){var a,o,i,r,s,c=e.tag,u=e.anchor,l={},d={},p=null,h=null,m=null,f=!1,b=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=l),s=e.input.charCodeAt(e.position);0!==s;){if(a=e.input.charCodeAt(e.position+1),i=e.line,r=e.position,63!==s&&58!==s||!y(a)){if(!M(e,t,2,!1,!0))break;if(e.line===i){for(s=e.input.charCodeAt(e.position);g(s);)s=e.input.charCodeAt(++e.position);if(58===s)y(s=e.input.charCodeAt(++e.position))||R(e,"a whitespace character is expected after the key-value separator within a block mapping"),f&&(L(e,l,d,p,h,null),p=h=m=null),b=!0,f=!1,o=!1,p=e.tag,h=e.result;else{if(!b)return e.tag=c,e.anchor=u,!0;R(e,"can not read an implicit mapping pair; a colon is missed")}}else{if(!b)return e.tag=c,e.anchor=u,!0;R(e,"can not read a block mapping entry; a multiline key may not be an implicit key")}}else 63===s?(f&&(L(e,l,d,p,h,null),p=h=m=null),b=!0,f=!0,o=!0):f?(f=!1,o=!0):R(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,s=a;if((e.line===i||e.lineIndent>n)&&(M(e,n,4,!0,o)&&(f?h=e.result:m=e.result),f||(L(e,l,d,p,h,m,i,r),p=h=m=null),I(e,!0,-1),s=e.input.charCodeAt(e.position)),e.lineIndent>n&&0!==s)R(e,"bad indentation of a mapping entry");else if(e.lineIndent<n)break}return f&&L(e,l,d,p,h,null),b&&(e.tag=c,e.anchor=u,e.kind="mapping",e.result=l),b}(e,m,h))||function(e,n){var t,a,o,i,r,s,c,u,l,d,p=!0,h=e.tag,m=e.anchor,f={};if(91===(d=e.input.charCodeAt(e.position)))o=93,s=!1,a=[];else{if(123!==d)return!1;o=125,s=!0,a={}}for(null!==e.anchor&&(e.anchorMap[e.anchor]=a),d=e.input.charCodeAt(++e.position);0!==d;){if(I(e,!0,n),(d=e.input.charCodeAt(e.position))===o)return e.position++,e.tag=h,e.anchor=m,e.kind=s?"mapping":"sequence",e.result=a,!0;p||R(e,"missed comma between flow collection entries"),l=null,i=r=!1,63===d&&y(e.input.charCodeAt(e.position+1))&&(i=r=!0,e.position++,I(e,!0,n)),t=e.line,M(e,n,1,!1,!0),u=e.tag,c=e.result,I(e,!0,n),d=e.input.charCodeAt(e.position),!r&&e.line!==t||58!==d||(i=!0,d=e.input.charCodeAt(++e.position),I(e,!0,n),M(e,n,1,!1,!0),l=e.result),s?L(e,a,f,u,c,l):i?a.push(L(e,null,f,u,c,l)):a.push(c),I(e,!0,n),44===(d=e.input.charCodeAt(e.position))?(p=!0,d=e.input.charCodeAt(++e.position)):p=!1}R(e,"unexpected end of the stream within a flow collection")}(e,h)?A=!0:(s&&function(e,n){var t,o,i,r,s,c=1,u=!1,l=!1,d=n,p=0,h=!1;if(124===(r=e.input.charCodeAt(e.position)))o=!1;else{if(62!==r)return!1;o=!0}for(e.kind="scalar",e.result="";0!==r;)if(43===(r=e.input.charCodeAt(++e.position))||45===r)1===c?c=43===r?3:2:R(e,"repeat of a chomping mode identifier");else{if(!((i=48<=(s=r)&&s<=57?s-48:-1)>=0))break;0===i?R(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):l?R(e,"repeat of an indentation width identifier"):(d=n+i-1,l=!0)}if(g(r)){do{r=e.input.charCodeAt(++e.position)}while(g(r));if(35===r)do{r=e.input.charCodeAt(++e.position)}while(!f(r)&&0!==r)}for(;0!==r;){for(P(e),e.lineIndent=0,r=e.input.charCodeAt(e.position);(!l||e.lineIndent<d)&&32===r;)e.lineIndent++,r=e.input.charCodeAt(++e.position);if(!l&&e.lineIndent>d&&(d=e.lineIndent),f(r))p++;else{if(e.lineIndent<d){3===c?e.result+=a.repeat("\n",u?1+p:p):1===c&&u&&(e.result+="\n");break}for(o?g(r)?(h=!0,e.result+=a.repeat("\n",u?1+p:p)):h?(h=!1,e.result+=a.repeat("\n",p+1)):0===p?u&&(e.result+=" "):e.result+=a.repeat("\n",p):e.result+=a.repeat("\n",u?1+p:p),u=!0,l=!0,p=0,t=e.position;!f(r)&&0!==r;)r=e.input.charCodeAt(++e.position);_(e,t,e.position,!1)}}return!0}(e,h)||function(e,n){var t,a,o;if(39!==(t=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,a=o=e.position;0!==(t=e.input.charCodeAt(e.position));)if(39===t){if(_(e,a,e.position,!0),39!==(t=e.input.charCodeAt(++e.position)))return!0;a=e.position,e.position++,o=e.position}else f(t)?(_(e,a,o,!0),F(e,I(e,!1,n)),a=o=e.position):e.position===e.lineStart&&D(e)?R(e,"unexpected end of the document within a single quoted scalar"):(e.position++,o=e.position);R(e,"unexpected end of the stream within a single quoted scalar")}(e,h)||function(e,n){var t,a,o,i,r,s,c;if(34!==(s=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,t=a=e.position;0!==(s=e.input.charCodeAt(e.position));){if(34===s)return _(e,t,e.position,!0),e.position++,!0;if(92===s){if(_(e,t,e.position,!0),f(s=e.input.charCodeAt(++e.position)))I(e,!1,n);else if(s<256&&x[s])e.result+=S[s],e.position++;else if((r=120===(c=s)?2:117===c?4:85===c?8:0)>0){for(o=r,i=0;o>0;o--)(r=w(s=e.input.charCodeAt(++e.position)))>=0?i=(i<<4)+r:R(e,"expected hexadecimal character");e.result+=q(i),e.position++}else R(e,"unknown escape sequence");t=a=e.position}else f(s)?(_(e,t,a,!0),F(e,I(e,!1,n)),t=a=e.position):e.position===e.lineStart&&D(e)?R(e,"unexpected end of the document within a double quoted scalar"):(e.position++,a=e.position)}R(e,"unexpected end of the stream within a double quoted scalar")}(e,h)?A=!0:!function(e){var n,t,a;if(42!==(a=e.input.charCodeAt(e.position)))return!1;for(a=e.input.charCodeAt(++e.position),n=e.position;0!==a&&!y(a)&&!b(a);)a=e.input.charCodeAt(++e.position);return e.position===n&&R(e,"name of an alias node must contain at least one character"),t=e.input.slice(n,e.position),c.call(e.anchorMap,t)||R(e,'unidentified alias "'+t+'"'),e.result=e.anchorMap[t],I(e,!0,-1),!0}(e)?function(e,n,t){var a,o,i,r,s,c,u,l,d=e.kind,p=e.result;if(y(l=e.input.charCodeAt(e.position))||b(l)||35===l||38===l||42===l||33===l||124===l||62===l||39===l||34===l||37===l||64===l||96===l)return!1;if((63===l||45===l)&&(y(a=e.input.charCodeAt(e.position+1))||t&&b(a)))return!1;for(e.kind="scalar",e.result="",o=i=e.position,r=!1;0!==l;){if(58===l){if(y(a=e.input.charCodeAt(e.position+1))||t&&b(a))break}else if(35===l){if(y(e.input.charCodeAt(e.position-1)))break}else{if(e.position===e.lineStart&&D(e)||t&&b(l))break;if(f(l)){if(s=e.line,c=e.lineStart,u=e.lineIndent,I(e,!1,-1),e.lineIndent>=n){r=!0,l=e.input.charCodeAt(e.position);continue}e.position=i,e.line=s,e.lineStart=c,e.lineIndent=u;break}}r&&(_(e,o,i,!1),F(e,e.line-s),o=i=e.position,r=!1),g(l)||(i=e.position+1),l=e.input.charCodeAt(++e.position)}return _(e,o,i,!1),!!e.result||(e.kind=d,e.result=p,!1)}(e,h,1===t)&&(A=!0,null===e.tag&&(e.tag="?")):(A=!0,null===e.tag&&null===e.anchor||R(e,"alias node should not have any properties")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===v&&(A=u&&Q(e,m))),null!==e.tag&&"!"!==e.tag)if("?"===e.tag){for(null!==e.result&&"scalar"!==e.kind&&R(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),l=0,d=e.implicitTypes.length;l<d;l+=1)if((p=e.implicitTypes[l]).resolve(e.result)){e.result=p.construct(e.result),e.tag=p.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else c.call(e.typeMap[e.kind||"fallback"],e.tag)?(p=e.typeMap[e.kind||"fallback"][e.tag],null!==e.result&&p.kind!==e.kind&&R(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+p.kind+'", not "'+e.kind+'"'),p.resolve(e.result)?(e.result=p.construct(e.result),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):R(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")):R(e,"unknown tag !<"+e.tag+">");return null!==e.listener&&e.listener("close",e),null!==e.tag||null!==e.anchor||A}function H(e){var n,t,a,o,i=e.position,r=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap={},e.anchorMap={};0!==(o=e.input.charCodeAt(e.position))&&(I(e,!0,-1),o=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==o));){for(r=!0,o=e.input.charCodeAt(++e.position),n=e.position;0!==o&&!y(o);)o=e.input.charCodeAt(++e.position);for(a=[],(t=e.input.slice(n,e.position)).length<1&&R(e,"directive name must not be less than one character in length");0!==o;){for(;g(o);)o=e.input.charCodeAt(++e.position);if(35===o){do{o=e.input.charCodeAt(++e.position)}while(0!==o&&!f(o));break}if(f(o))break;for(n=e.position;0!==o&&!y(o);)o=e.input.charCodeAt(++e.position);a.push(e.input.slice(n,e.position))}0!==o&&P(e),c.call(C,t)?C[t](e,t,a):T(e,'unknown document directive "'+t+'"')}I(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,I(e,!0,-1)):r&&R(e,"directives end mark is expected"),M(e,e.lineIndent-1,4,!1,!0),I(e,!0,-1),e.checkLineBreaks&&l.test(e.input.slice(i,e.position))&&T(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&D(e)?46===e.input.charCodeAt(e.position)&&(e.position+=3,I(e,!0,-1)):e.position<e.length-1&&R(e,"end of the stream or a document separator is expected")}function B(e,n){n=n||{},0!==(e=String(e)).length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+="\n"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var t=new A(e,n),a=e.indexOf("\0");for(-1!==a&&(t.position=a,R(t,"null byte is not allowed in input")),t.input+="\0";32===t.input.charCodeAt(t.position);)t.lineIndent+=1,t.position+=1;for(;t.position<t.length-1;)H(t);return t.documents}function W(e,n,t){null!==n&&"object"===typeof n&&"undefined"===typeof t&&(t=n,n=null);var a=B(e,t);if("function"!==typeof n)return a;for(var o=0,i=a.length;o<i;o+=1)n(a[o])}function U(e,n){var t=B(e,n);if(0!==t.length){if(1===t.length)return t[0];throw new o("expected a single document in the stream, but found more")}}e.exports.loadAll=W,e.exports.load=U,e.exports.safeLoadAll=function(e,n,t){return"object"===typeof n&&null!==n&&"undefined"===typeof t&&(t=n,n=null),W(e,n,a.extend({schema:r},t))},e.exports.safeLoad=function(e,n){return U(e,a.extend({schema:r},n))}},DBOs:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Query with Comunica'\ndescription: 'Learn how to execute queries in different environments. Such as live in the browser, in JavaScript applications, or the CLI.'\nindex: true\n---\n\nThe following guides explain how to execute queries in different environments,\nsuch as live in the browser, in JavaScript applications, or the CLI.\n\n<div class=\"video\">\nWatch some of these guides in action <em>live</em> within this <a href=\"https://youtu.be/ydpdziVNw1k\">Webinar recording</a>.\n</div>\n"},DdL9:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'RDF Parsing and Serializing'\ndescription: 'Basic concepts behind parsing and serializing RDF.'\n---\n\nParsing from and serializing to RDF is of great importance within Comunica,\nas Comunica needs to be able to query over RDF files in different formats,\nand produce RDF query results in different formats.\n\nFor this, Comunica provides the\n[RDF Parse](/docs/modify/advanced/buses/#rdf-parse) ([`@comunica/bus-rdf-parse`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-parse))\nand\n[RDF Serialize](/docs/modify/advanced/buses/#rdf-serialize) ([`@comunica/bus-rdf-serialize`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-serialize)) bus.\nThese buses respectively contain spec-compliant **streaming** [parsers](/docs/query/advanced/specifications/#parsing-rdf)\nand [serializers](/docs/query/advanced/specifications/#serializing-rdf) for the most important RDF formats.\n\n## Calling a parser\n\nRDF parsing actors implement the [`ActorRdfParse`](https://comunica.github.io/comunica/classes/bus_rdf_parse.actorrdfparse.html) abstract class,\nwhich can handle two types of actions:\n\n* Retrieval of supported media types (`mediaTypes`), such as `'text/turtle'`, `application/ld+json`, ...\n* Parsing for a given media type (`handle`).\n\nWhile the first action can be used to determine all available media types that can be parsed across all actors in a bus,\nthe second action is typically used afterwards to parse RDF for a specific media type.\n\nSince there are two types of actions, calling an RDF parser involves two respective mediators.\nAn example of such two mediators can be found in [`dereference-rdf/actors.json`](https://github.com/comunica/comunica/blob/master/engines/config-query-sparql/config/dereference-rdf/actors.json).\nIn TypeScript, these mediators will correspond to the following fields:\n```typescript\npublic readonly mediatorRdfParseMediatypes: MediateMediaTypes;\npublic readonly mediatorRdfParseHandle: MediateMediaTyped<\n  IActionParse<IActionRdfParseMetadata>,\n  IActorTest,\n  IActorParseOutput<RDF.Stream, IActorRdfParseOutputMetadata>\n>;\n```\n\nAll available media types can be retrieved as follows:\n```typescript\nconst { mediaTypes } = await this.mediatorRdfParseMediatypes.mediate(\n  { context, mediaTypes: true },\n);\n```\n\nParsing for a specific media type can be done as follows:\n```typescript\nconst { quads } = (await this.mediatorRdfParseHandle.mediate(\n  {\n    context,\n    handle: {\n      context,\n      headers: undefined, // Optional HTTP fetch headers\n      input: textStream,\n      metadata: { baseIRI: 'http://example.org/' },\n    },\n    handleMediaType: 'text/turtle',\n  },\n)).handle;\n```\nInput `quadStream` must always be a text stream,\noutput `quads` is am [RDF/JS stream](/docs/query/advanced/rdfjs/).\n\nMore examples on how these parses are used can be found\nin actors on the [Dereference RDF bus](/docs/modify/advanced/buses/#dereference-rdf)\nor in the [rdf-parse.js package](https://github.com/rubensworks/rdf-parse.js).\n\n## Calling a serializer\n\nRDF serialzation actors implement the [`ActorRdfSerialize`](https://comunica.github.io/comunica/classes/bus_rdf_serialize.actorrdfserialize.html),\nwhich can handle two types of actions:\n\n* Retrieval of supported media types (`mediaTypes`), such as `'text/turtle'`, `application/ld+json`, ...\n* Retrieval of supported media types as URLs (`mediaTypeFormats`), such as `http://www.w3.org/ns/formats/N3`, `http://www.w3.org/ns/formats/JSON-LD`, ...\n* Parsing for a given media type (`handle`).\n\nThe first action can be used to determine all available media types that can be parsed across all actors in a bus,\nthe second action is used to identify media types by URL in things like SPARQL service descriptions,\nand the third action is typically used afterwards to parse RDF for a specific media type.\n\nSince there are three types of actions, calling an RDF serializer involves three respective mediators.\nAn example of such two mediators can be found in [`sparql-serializers.json`](https://github.com/comunica/comunica/blob/master/engines/query-sparql/config/sets/sparql-serializers.json).\nIn TypeScript, these mediators will correspond to the following fields:\n```typescript\npublic readonly mediatorRdfSerialize: MediatorRdfSerializeHandle;\npublic readonly mediatorMediaTypeCombiner: MediatorRdfSerializeMediaTypes;\npublic readonly mediatorMediaTypeFormatCombiner: MediatorRdfSerializeMediaTypeFormats;\n```\n\nAll available media types can be retrieved as follows:\n```typescript\nconst { mediaTypes } = await this.mediatorMediaTypeCombiner.mediate(\n  { context, mediaTypes: true },\n);\n```\n\nAll available media type URLs can be retrieved as follows:\n```typescript\nconst { mediaTypeFormats } = await this.mediatorMediaTypeFormatCombiner.mediate(\n  { context, mediaTypeFormats: true },\n);\n```\n\nSerializing for a specific media type can be done as follows:\n```typescript\nconst { data } = (await this.mediatorRdfSerialize.mediate({\n  context,\n  handle: {\n    type: 'quads',\n    quadStream, // An RDF/JS Stream of RDF/JS quads.\n  },\n  handleMediaType: 'text/turtle',\n})).handle\n```\nInput `quadStream` must always be an [RDF/JS stream](/docs/query/advanced/rdfjs/),\noutput `data` is a text stream.\n\nMore examples on how these parses are used can be found\nin the [SPARQL RDF Serialize actor](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf).\n"},DfW2:function(e,n,t){"use strict";var a=t("hyoZ"),o=Object.prototype.toString;e.exports=new a("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:function(e){if(null===e)return!0;var n,t,a,i,r,s=e;for(r=new Array(s.length),n=0,t=s.length;n<t;n+=1){if(a=s[n],"[object Object]"!==o.call(a))return!1;if(1!==(i=Object.keys(a)).length)return!1;r[n]=[i[0],a[i[0]]]}return!0},construct:function(e){if(null===e)return[];var n,t,a,o,i,r=e;for(i=new Array(r.length),n=0,t=r.length;n<t;n+=1)a=r[n],o=Object.keys(a),i[n]=[o[0],a[o[0]]];return i}})},EqAk:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Result formats\'\ndescription: \'Query results can be serialized in different formats.\'\n---\n\nBy default, Comunica has support for the following result formats:\n\n| **Media type** | **Description** |\n| ------- | --------------- |\n| [`application/json`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-json) | A custom, simplified JSON result format. |\n| [`simple`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-simple) | A custom, text-based result format. |\n| [`application/sparql-results+json`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-sparql-json) | The [SPARQL/JSON](https://www.w3.org/TR/sparql11-results-json/) results format. |\n| [`application/sparql-results+xml`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-sparql-xml) | The [SPARQL/XML](https://www.w3.org/TR/rdf-sparql-XMLres/) results format. |\n| [`text/csv`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-sparql-csv) | The [SPARQL/CSV](https://www.w3.org/TR/sparql11-results-csv-tsv/) results format. |\n| [`text/tab-separated-values`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-sparql-tsv) | The [SPARQL/TSV](https://www.w3.org/TR/sparql11-results-csv-tsv/) results format. |\n| [`stats`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-stats) | A custom results format for testing and debugging. |\n| [`table`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-table) | A text-based visual table result format. |\n| [`tree`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-tree) | A tree-based result format for GraphQL-LD result compacting. |\n| [`application/trig`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [TriG](https://www.w3.org/TR/trig/) RDF serialization. |\n| [`application/n-quads`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [N-Quads](https://www.w3.org/TR/n-quads/) RDF serialization. |\n| [`text/turtle`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [Turtle](https://www.w3.org/TR/turtle/) RDF serialization. |\n| [`application/n-triples`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [N-Triples](https://www.w3.org/TR/n-triples/) RDF serialization. |\n| [`text/n3`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [Notation3](https://www.w3.org/TeamSubmission/n3/) serialization. |\n| [`application/ld+json`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [JSON-LD](https://json-ld.org/) RDF serialization. |\n\n## Querying from the command line\n\nWhen using [Comunica from the command line](/docs/query/getting_started/query_cli/),\nthe result format can be set using the `-t` option:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100" \\\n    -t "application/sparql-results+json"\n```\n```json\n{"head": {"vars":["s","p","o"]},\n"results": { "bindings": [\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/date","type":"uri"},"o":{"value":"1899-05-06","type":"literal","datatype":"http://www.w3.org/2001/XMLSchema#date"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/isCitedBy","type":"uri"},"o":{"value":"http://dbpedia.org/resource/Tierce_(unit)","type":"uri"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/newspaper","type":"uri"},"o":{"value":"Biloxi Daily Herald","type":"literal"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/page","type":"uri"},"o":{"value":"6","type":"literal"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/title","type":"uri"},"o":{"value":"A New System of Weights and Measures","type":"literal"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/url","type":"uri"},"o":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"}},\n...\n```\n\n<div class="note">\nAll <a href="/docs/query/advanced/result_formats/">available formats</a> can be printed via <code>comunica-sparql --listformats</code>\n</div>\n\n### Querying in a JavaScript app\n\nWhen using [Comunica in a JavaScript application](/docs/query/getting_started/query_app/),\nresults can be serialized to a certain format using `resultToString()`:\n```javascript\nconst result = await myEngine.query(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: [\'http://fragments.dbpedia.org/2015/en\'],\n});\nconst { data } = await myEngine.resultToString(result,\n  \'application/sparql-results+json\');\ndata.pipe(process.stdout); // Print to standard output\n```\n\nThe `resultToString()` method accepts a query result and a result format media type.\nThe media type is optional, and will default to `application/json` for bindings, `application/trig` for quads, and `simple` for booleans.\n\n<div class="note">\n<a href="/docs/query/advanced/result_formats/">All available result formats</a> can be retrieved programmatically\nby invoking the asynchronous <code>getResultMediaTypes()</code> method.\n</div>\n'},FVUX:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Core Architecture\'\ndescription: \'The low-level software architecture of Comunica for achieving modularity.\'\n---\n\nThis document gives an overview of the core architecture of Comunica,\nwhich gives us the desired **modularity** and **flexibility**.\n\nThis core architecture has been implemented in [`@comunica/core`](https://github.com/comunica/comunica/tree/master/packages/core).\n\nOn top of this architecture, the more high-level [SPARQL architecture](/docs/modify/advanced/architecture_sparql/) has been defined.\n\n<div class="video">\nWatch a <a href="https://youtu.be/ydpdziVNw1k?t=2494">Webinar recording</a> to gain a high-level overview of the core architecture.\n</div>\n\n## Core components: Actor, Mediator, and Bus\n\nComunica\'s architecture has been designed with flexibility and loose coupling of components as main goals.\nFor this, Comunica consists of **three types of components**: **actors**, **mediators**, and **buses**.\n\nAll logic in Comunica is separated into different **actors** ([`Actor`](https://comunica.github.io/comunica/classes/core.actor.html)),\nfollowing the [actor model](https://en.wikipedia.org/wiki/Actor_model).\nEach actor independently performs a specific task.\nFor example, one actor can take implement the SPARQL `UNION` operator,\nanother actor can parse JSON-LD documents,\nand another actor can parse JSON-LD documents _in a different way_.\n\nAll actors are subscribed onto task-specific **buses** ([`Bus`](https://comunica.github.io/comunica/classes/core.bus.html)),\nfollowing the [publish-subscribe pattern](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern).\nFor example, a SPARQL query operator bus could contain actors for `UNION`, `SELECT`, `FILTER`, and more.\nAn RDF parsing bus could contain actors for JSON-LD, RDFa, Turtle, and more.\n\nSince multiple actors can exist for solving a specific task\n(for example if we have two actors for parsing JSON-LD documents),\n**mediators** ([`Mediator`](https://comunica.github.io/comunica/classes/core.mediator.html)) are used for determining the "best" actor on a bus for executing a certain action,\nfollowing the [mediator pattern](https://en.wikipedia.org/wiki/Mediator_pattern).\n\nTo ensure loose coupling of components, actors never communicate with each other directly.\nInstead, they always communicate via a mediators and buses, as shown in the following figure:\n\n<div class="docs-intro-img">\n  <img src="/img/actor-mediator-bus.svg" alt="Actor Mediator Bus Architecture" style="width:100%" \\>\n</div>\n\n<div class="note">\nWith <a href="/docs/modify/advanced/observers/">Observers</a>, you can passively observe actions executed by actors on a given bus.\n</div>\n\n<div class="note">\nOptionally, actors can <a href="/docs/modify/advanced/logging/">log certain events</a>.\n</div>\n\n## Run and test phases for selecting an actor\n\nDifferent mediators can select actors in different ways.\nFor this, the **mediator** will go through **two phases**:\n\n1. **Test phase**: The action is sent onto the bus to all subscribed actors. The actors return the estimated conditions under which the action could be executed, without actually executing the action.\n2. **Run phase**: The action is sent to a single actor for execution, where this actor is chosen by the mediator based on the returned test conditions.\n\nFor instance, the following figure shows an example of a mediator that will always pick the fastest actor on the bus as possible.\n\n<div class="docs-intro-img">\n  <img src="/img/run-test-phases.svg" alt="Run and test phase" style="width:100%" \\>\n</div>\n\nTherefore, an actor must at least expose the following methods:\n```typescript\nexport interface Actor {\n  test(action: IAction): Promise<IActorTest>;\n  run(action: IAction): Promise<IActorOutput>;\n}\n```\n\nThe interfaces `IAction`, `IActorTest`, and `IActorOutput` depend on the bus this actor is subscribed to.\n\nLearn more about the [actors, buses](/docs/modify/advanced/buses/) and [mediators](/docs/modify/advanced/mediators/) that exist in Comunica.\n\n## Wiring of components\n\nAll Comunica actors, buses, and mediators are implemented as [separate npm packages](https://github.com/comunica/comunica/tree/master/packages).\nIn order to _wire_ these different components with each other in a single application,\nwe make use of the **dependency injection** framework [Components.js](/docs/modify/advanced/componentsjs/).\nComponents.js allows us to wire components with each other using one or more [configuration files](/docs/modify/advanced/componentsjs/#creating-configurations-in-json-ld).\nPlugging in different components therefore do not require any code changes, but simply a config change.\n\nConsidering these different types of components,\nwe make use of the following naming conventions for packages:\n\n* Buses: `@comunica/bus-[name-of-bus-type]`\n* Mediators: `@comunica/mediator-[name-of-mediator]`\n* Actors: `@comunica/actor-[name-of-bus-type]-[name-of-actor]`\n* Mediator types: `@comunica/mediatortype-[name-of-mediator-type]`\n'},G7oB:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'SPARQL query types\'\ndescription: \'Different SPARQL query types are possible, such as SELECT, CONSTRUCT, ASK, ...\'\n---\n\nThe [SPARQL 1.1 query specification](https://www.w3.org/TR/sparql11-query/)\nintroduces four query types:\n\n* `SELECT`: Return matches as a collection of solution bindings.\n* `CONSTRUCT`: Create RDF triples from matches.\n* `DESCRIBE`: Create RDF triples about a resource.\n* `ASK`: Check if at least one match exists.\n\nThe [SPARQL 1.1 update specification](https://www.w3.org/TR/sparql11-update/)\nalso introduces query types that modify data, but return no output.\n\nThis guide shows how to handle these query types from the [command line](/docs/query/getting_started/query_cli/)\nand via [a JavaScript application](/docs/query/getting_started/query_app/).\n\n<div class="note">\nQuery results for each of these query types can be represented in <a href="/docs/query/advanced/result_formats/">different formats</a>.\n</div>\n\n<div class="note">\nLearn more about how the <a href="/docs/modify/advanced/query_operation_result_types/">output types are represented internally</a>.\n</div>\n\n## 1. Command line\n\nBelow, the different query type usages are summarized.\nMore information can be found in the [command line guide](/docs/query/getting_started/query_cli/).\n\n### 1.1. `SELECT`\n\nThe following query retrieves the first 100 triples from [DBpedia](https://fragments.dbpedia.org/2016-04/en):\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100"\n```\n\nAs output, a JSON array of bindings for the selected variables will be returned:\n```\n[\n{"?s":"https://fragments.dbpedia.org/2016-04/en#dataset","?p":"http://www.w3.org/1999/02/22-rdf-syntax-ns#type","?o":"http://rdfs.org/ns/void#datasource"},\n{"?s":"https://fragments.dbpedia.org/2016-04/en#dataset","?p":"http://www.w3.org/1999/02/22-rdf-syntax-ns#type","?o":"http://www.w3.org/ns/hydra/core#Collection"},\n{"?s":"https://fragments.dbpedia.org/2016-04/en#dataset","?p":"http://www.w3.org/ns/hydra/core#search","?o":"https://fragments.dbpedia.org/2016-04/en#triplePattern"}\n...\n```\n\n### 1.2. `CONSTRUCT`\n\nNext to SPARQL `SELECT` queries,\nit is also possible to execute `CONSTRUCT` queries to produce RDF triples:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100"\n```\n```text\n<http://0-access.newspaperarchive.com.topcat.switchinc.org/Viewer.aspx?img=8716084> <http://dbpedia.org/property/accessdate> "2010-04-21"^^<http://www.w3.org/2001/XMLSchema#date>;\n    <http://dbpedia.org/property/date> "1939-01-02"^^<http://www.w3.org/2001/XMLSchema#date>;\n    <http://dbpedia.org/property/format> "PDF";\n    <http://dbpedia.org/property/isCitedBy> <http://dbpedia.org/resource/List_of_Attorneys_General_of_Wisconsin>;\n    <http://dbpedia.org/property/location> "Sheboygan, Wisconsin";\n    <http://dbpedia.org/property/page> "1";\n...\n```\n\n### 1.3. `DESCRIBE`\n\nSimilar to `CONSTRUCT`, `DESCRIBE` will output triples that are connected to a given resource by any predicate:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "DESCRIBE <http://dbpedia.org/resource/List_of_Attorneys_General_of_Wisconsin>"\n```\n```text\n<http://dbpedia.org/resource/List_of_Attorneys_General_of_Wisconsin> <http://dbpedia.org/ontology/wikiPageExternalLink> <http://www.legis.state.wi.us/lrb/bb/05bb/695-743.pdf>, <http://www.usgennet.org/usa/wi/state/wihist-2.htm>, <http://caselaw.lp.findlaw.com/scripts/getcase.pl?court=us&navby=title&v1=State+of+Wisconsin>, <http://law.justia.com/codes/wisconsin/>, <http://legalnewsline.com/?s=Wisconsin+attorney+general>, <http://naag.org/naag/attorneys-general/whos-my-ag/wisconsin/brad-schimel.php>, <http://public.findlaw.com/LCsearch.html?restrict=consumer&entry=%22Wisconsin+Attorney+General%22>, <http://www.abajournal.com/search/results/search&keywords=Wisconsin+Attorney+General/>, <http://www.doj.state.wi.us/>, <http://www.doj.state.wi.us/media-center/2015-news-releases>, <http://www.wisbar.org/Pages/default.aspx>;\n    <http://dbpedia.org/ontology/wikiPageID> "4945528"^^<http://www.w3.org/2001/XMLSchema#integer>;\n    <http://dbpedia.org/ontology/wikiPageLength> "14830"^^<http://www.w3.org/2001/XMLSchema#nonNegativeInteger>;\n    <http://dbpedia.org/ontology/wikiPageOutDegree> "71"^^<http://www.w3.org/2001/XMLSchema#nonNegativeInteger>;\n    <http://dbpedia.org/ontology/wikiPageRevisionID> "697541030"^^<http://www.w3.org/2001/XMLSchema#integer>;\n...\n```\n\n### 1.4. `ASK`\n\n`ASK` queries will produce a boolean output:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "ASK { ?s ?p ?o }"\n```\n```\ntrue\n```\n\n### 1.5. Update\n\nUpdate queries will produce no output, unless an error occurs:\n```bash\n$ comunica-sparql https://example.org/file.ttl \\\n    "INSERT DATA { <ex:s> <ex:p> <ex:o> }"\n```\n\n## 2. Application\n\nBelow, the different query type usages are summarized.\nMore information can be found in the [application guide](/docs/query/getting_started/query_app/).\n\n### 1.1. `SELECT`\n\nThe following query retrieves the first 100 triples from [DBpedia](https://fragments.dbpedia.org/2016-04/en):\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: [\'http://fragments.dbpedia.org/2015/en\'],\n});\nbindingsStream.on(\'data\', (binding) => {\n    console.log(binding.get(\'s\').value);\n    console.log(binding.get(\'p\').value);\n    console.log(binding.get(\'o\').value);\n});\n```\n\n### 1.2. `CONSTRUCT`\n\nNext to SPARQL `SELECT` queries,\nit is also possible to execute `CONSTRUCT` queries to produce RDF triples:\n```javascript\nconst quadStream = await myEngine.queryQuads(`\n  CONSTRUCT WHERE {\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: [\'http://fragments.dbpedia.org/2015/en\'],\n});\n```\n```javascript\nquadStream.on(\'data\', (quad) => {\n    console.log(quad.subject.value);\n    console.log(quad.predicate.value);\n    console.log(quad.object.value);\n    console.log(quad.graph.value);\n});\n```\n\n### 1.3. `DESCRIBE`\n\nSimilar to `CONSTRUCT`, `DESCRIBE` will output triples that are connected to a given resource by any predicate:\n```javascript\nconst quadStream = await myEngine.queryQuads(`\n  DESCRIBE <http://dbpedia.org/resource/List_of_Attorneys_General_of_Wisconsin>`, {\n  sources: [\'http://fragments.dbpedia.org/2015/en\'],\n});\n```\n```javascript\nquadStream.on(\'data\', (quad) => {\n    console.log(quad.subject.value);\n    console.log(quad.predicate.value);\n    console.log(quad.object.value);\n    console.log(quad.graph.value);\n});\n```\n\n### 1.4. `ASK`\n\n`ASK` queries will produce a boolean output:\n```javascript\nconst hasMatches = await myEngine.queryBoolean(`\n  ASK {\n    ?s ?p <http://dbpedia.org/resource/Belgium>\n  }`, {\n  sources: [\'http://fragments.dbpedia.org/2015/en\'],\n})\n```\n\n### 1.5. Update\n\nUpdate queries will produce a void output:\n```javascript\nawait myEngine.queryVoid(`\n  PREFIX dc: <http://purl.org/dc/elements/1.1/>\n  INSERT DATA\n  { \n    <http://example/book1> dc:title "A new book" ;\n                           dc:creator "A.N.Other" .\n  }`, {\n  sources: [ store ],\n});\n```\n'},GFD4:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Buses and Actors'\ndescription: 'An overview of all buses in Comunica and their actors.'\n---\n\nThis page gives an **overview of all _buses_ and _actors_**\nthat are used in the default Comunica engines,\nsuch as [Comunica SPARQL](https://github.com/comunica/comunica/tree/master/engines/query-sparql)\nand [Comunica SPARQL File](https://github.com/comunica/comunica/tree/master/engines/query-sparql-file)\nOther configurations such as [Comunica SPARQL HDT](https://github.com/comunica/comunica-query-sparql-hdt) contain additional actors and buses.\n\nThis builds upon the [core architecture](/docs/modify/advanced/architecture_core/) of _actors_, _mediators_, and _buses_.\nAn overview of how these buses and actors are connected can be found in the [SPARQL architecture](/docs/modify/advanced/architecture_sparql/).\n\n## Init\n\n_Package: [`@comunica/bus-init`](https://github.com/comunica/comunica/tree/master/packages/bus-init)_\n\nAll Comunica engines start here. This is where they accept generic input parameters, such as CLI arguments.\n\nSubscribed actors need to implement [`ActorInit`](https://comunica.github.io/comunica/classes/bus_init.actorinit.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Query | [`@comunica/actor-init-query`](https://github.com/comunica/comunica/tree/master/packages/actor-init-query) | Initializes query execution by parsing a given query, optimizing, executing, and serializing results. |\n\n\n## Context Preprocess\n\n_Package: [`@comunica/bus-context-preprocess`](https://github.com/comunica/comunica/tree/master/packages/bus-context-preprocess)_\n\nA bus in which actors can optionally modify the [query context](/docs/query/advanced/context/).\n\nSubscribed actors need to implement [`ActorContextPreprocess`](https://comunica.github.io/comunica/classes/bus_context_preprocess.actorcontextpreprocess.html).\n\n_Contains no actors yet._\n\n\n## Query Parse\n\n_Package: [`@comunica/bus-query-parse`](https://github.com/comunica/comunica/tree/master/packages/bus-query-parse)_\n\nParsing an input query into (SPARQL) algebra.\n\nSubscribed actors need to implement [`ActorQueryParse`](https://comunica.github.io/comunica/classes/bus_query_parse.actorqueryparse.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| SPARQL | [`@comunica/actor-query-parse-sparql`](https://github.com/comunica/comunica/tree/master/packages/actor-query-parse-algebra) | Uses [SPARQLAlgebra.js](https://github.com/joachimvh/SPARQLAlgebra.js) for parsing SPARQL query strings into SPARQL algebra. |\n| GraphQL | [`@comunica/actor-query-parse-graphql`](https://github.com/comunica/comunica/tree/master/packages/actor-query-parse-graphql) | Parses GraphQL strings into SPARQL algebra following the [GraphQL-LD](/docs/query/advanced/graphql_ld/) approach. |\n\n\n## Optimize Query Operation\n\n_Package: [`@comunica/bus-optimize-query-operation`](https://github.com/comunica/comunica/tree/master/packages/bus-optimize-query-operation)_\n\nApply optional optimizations to the SPARQL algebra before actual execution.\nOptionally, a modified context can be returned.\n\nSubscribed actors need to implement [`ActorOptimizeQueryOperation`](https://comunica.github.io/comunica/classes/bus_optimize_query_operation.actoroptimizequeryoperation.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| BGP to Join | [`@comunica/actor-optimize-query-operation-bgp-to-join`](https://github.com/comunica/comunica/tree/master/packages/actor-optimize-query-operation-bgp-to-join) | Converts BGPs into join operations. |\n| Join BGP | [`@comunica/actor-optimize-query-operation-join-bgp`](https://github.com/comunica/comunica/tree/master/packages/actor-optimize-query-operation-join-bgp) | Merges joins of multiple BGPs into a single BGP. |\n| Join Connected | [`@comunica/actor-optimize-query-operation-join-connected`](https://github.com/comunica/comunica/tree/master/packages/actor-optimize-query-operation-join-connected) | Clusters entries within a join operation into separate sub-joins if they are connected by variables. |\n\n\n## Query Operation\n\n_Package: [`@comunica/bus-query-operation`](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation)_\n\nEvaluates [SPARQL algebra operations](/docs/modify/advanced/algebra/).\n\nSubscribed actors need to implement [`ActorQueryOperation`](https://comunica.github.io/comunica/classes/bus_query_operation.actorqueryoperation.html)\nor [`ActorQueryOperationTyped`](https://comunica.github.io/comunica/classes/bus_query_operation.actorqueryoperationtyped.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Ask | [`@comunica/actor-query-operation-ask`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-ask) | Handles `ASK` operations. |\n| BGP join | [`@comunica/actor-query-operation-bgp-join`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-bgp-join) | Handles BGPs by delegating to [`@comunica/bus-rdf-join`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join). |\n| Construct | [`@comunica/actor-query-operation-construct`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-construct) | Handles `CONSTRUCT` operations. |\n| Describe subject | [`@comunica/actor-query-operation-describe-subject`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-describe-subject) | Handles `DESCRIBE` operations. |\n| Distinct hash | [`@comunica/actor-query-operation-distinct-hash`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-distinct-hash) | Handles `DISTINCT` operations through hashing. |\n| Extend | [`@comunica/actor-query-operation-extend`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-extend) | Handles `EXTEND` operations. |\n| Filter direct | [`@comunica/actor-query-operation-filter-direct`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-filter-direct) | Handles `FILTER` operations in a direct, but non-spec-compliant manner. |\n| Filter Sparqlee | [`@comunica/actor-query-operation-filter-sparqlee`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-filter-sparqlee) | Handles `FILTER` operations using [Sparqlee](/docs/modify/advanced/sparqlee/) |\n| From quad | [`@comunica/actor-query-operation-from-quad`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-from-quad) | handles `FROM` operations by considering FROM and FROM NAMED as target graph elements in quads. |\n| Group | [`@comunica/actor-query-operation-group`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-group) | Handles `GROUP BY` operations. |\n| Join | [`@comunica/actor-query-operation-join`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-join) | Handles join operations by delegating as inner join to [`@comunica/bus-rdf-join`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join). |\n| Left join | [`@comunica/actor-query-operation-leftjoin`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-leftjoin) | Handles `OPTIONAL` operations by delegating as optional join to [`@comunica/bus-rdf-join`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join). |\n| Minus | [`@comunica/actor-query-operation-minus`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-minus) | Handles `MINUS` operations by delegating as minus join to [`@comunica/bus-rdf-join`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join). |\n| Order by direct | [`@comunica/actor-query-operation-orderby-direct`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-orderby-direct) | Handles `ORDER BY` operations in a direct, but non-spec-compliant manner. |\n| Order by Sparqlee | [`@comunica/actor-query-operation-orderby-sparqlee`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-orderby-sparqlee) | Handles `ORDER BY` operations using [Sparqlee](/docs/modify/advanced/sparqlee/) |\n| Path Alt | [`@comunica/actor-query-operation-path-alt`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-path-alt) | Handles `alt` property path expressions. |\n| Path Inv | [`@comunica/actor-query-operation-path-inv`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-path-inv) | Handles `inv` property path expressions. |\n| Path Link | [`@comunica/actor-query-operation-path-link`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-path-link) | Handles `link` property path expressions. |\n| Path Nps | [`@comunica/actor-query-operation-path-nps`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-path-nps) | Handles `nps` property path expressions. |\n| Path One or more | [`@comunica/actor-query-operation-path-one-or-more`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-path-one-or-more) | Handles `one-or-more` property path expressions. |\n| Path Seq | [`@comunica/actor-query-operation-path-seq`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-path-seq) | Handles `seq` property path expressions. |\n| Path Zero or more | [`@comunica/actor-query-operation-path-zero-or-more`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-path-zero-or-more) | Handles `zero-or-more` property path expressions. |\n| Path Zero or one | [`@comunica/actor-query-operation-path-zero-or-one`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-path-zero-or-one) | Handles `zero-or-one` property path expressions. |\n| Project | [`@comunica/actor-query-operation-project`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-project) | Handles `SELECT` operations. |\n| Quad pattern | [`@comunica/actor-query-operation-quadpattern`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-quadpattern) | Handles triple/quad patterns. |\n| Reduced hash | [`@comunica/actor-query-operation-reduced-hash`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-reduced-hash) | Handles `REDUCED` operations through hashing. |\n| Service | [`@comunica/actor-query-operation-service`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-service) | Handles `SERVICE` operations. |\n| Slice | [`@comunica/actor-query-operation-slice`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-slice) | Handles `LIMIT` and `OFFSET` operations. |\n| SPARQL endpoint | [`@comunica/actor-query-operation-sparql-endpoint`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-sparql-endpoint) | Delegates a full SPARQL query to a SPARQL endpoint if there is only a single SPARQL endpoint source. |\n| Union | [`@comunica/actor-query-operation-union`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-union) | Handles `UNION` operations. |\n| Values | [`@comunica/actor-query-operation-values`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-values) | Handles `VALUES` operations. |\n| Update Add | [`@comunica/actor-query-operation-update-add-rewrite`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-update-add-rewrite) | Handles `ADD` operations by rewriting the operation in terms of an insert. |\n| Update Clear | [`@comunica/actor-query-operation-update-clear`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-update-clear) | Handles `CLEAR` operations. |\n| Update Composite Update | [`@comunica/actor-query-operation-update-compositeupdate`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-update-compositeupdate) | Handles `composition of multiple SPARQL update operations. |\n| Update Copy | [`@comunica/actor-query-operation-update-copy-rewrite`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-update-copy-rewrite) | Handles `COPY` operations by rewriting the operation in terms of drop and add. |\n| Update Create | [`@comunica/actor-query-operation-update-create`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-update-create) | Handles `CREATE` operations. |\n| Update Delete Insert | [`@comunica/actor-query-operation-update-deleteinsert`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-update-deleteinsert) | Handles `INSERT DATA`, `DELETE DATA`, and `INSERT/DELETE` operations. |\n| Update Drop | [`@comunica/actor-query-operation-update-drop`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-update-drop) | Handles `DROP` operations. |\n| Update Load | [`@comunica/actor-query-operation-update-load`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-update-load) | Handles `LOAD` operations. |\n| Update Move | [`@comunica/actor-query-operation-update-move-rewrite`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-update-move-rewrite) | Handles `COPY` operations by rewriting the operation in terms of drop and add. |\n\n## Query Serialize\n\n_Package: [`@comunica/bus-query-serialize`](https://github.com/comunica/comunica/tree/master/packages/bus-query-serialize)_\n\nSerializes the query result into a text-based serialization.\n\nSubscribed actors need to implement [`ActorQuerySerialize`](https://comunica.github.io/comunica/classes/bus_query_serialize.actorqueryserialize.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| JSON | [`@comunica/actor-query-serialize-json`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-json) | Serializes to a simple JSON format. |\n| RDF | [`@comunica/actor-query-serialize-rdf`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-rdf) | Serializes to an RDF format by delegating to [`@comunica/bus-rdf-serialize`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-serialize). |\n| Simple | [`@comunica/actor-query-serialize-simple`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-) | Serializes to a simple format. |\n| SPARQL CSV | [`@comunica/actor-query-serialize-sparql-csv`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-csv) | Serializes to SPARQL/CSV. |\n| SPARQL JSON | [`@comunica/actor-query-serialize-sparql-json`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-json) | Serializes to SPARQL/JSON. |\n| SPARQL TSV | [`@comunica/actor-query-serialize-sparql-tsv`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-tsv) | Serializes to SPARQL/TSV. |\n| SPARQL XML | [`@comunica/actor-query-serialize-sparql-xml`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-xml) | Serializes to SPARQL/XML. |\n| Stats | [`@comunica/actor-query-serialize-stats`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-stats) | Serializes basic statistics. |\n| Table | [`@comunica/actor-query-serialize-table`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-table) | Serializes in a simple table format. |\n| Tree | [`@comunica/actor-query-serialize-tree`](https://github.com/comunica/comunica/tree/master/packages/actor-query-serialize-tree) | Serializes to a JSON tree. |\n\n\n## RDF Serialize\n\n_Package: [`@comunica/bus-rdf-serialize`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-serialize)_\n\nSerializes quads to an RDF serialization format.\n\nSubscribed actors need to implement [`ActorRdfSerialize`](https://comunica.github.io/comunica/classes/bus_rdf_serialize.actorrdfserialize.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| JSON-LD | [`@comunica/actor-rdf-serialize-jsonld`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-serialize-jsonld) | Serializes to JSON-LD. |\n| N3 | [`@comunica/actor-rdf-serialize-n3`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-serialize-n3) | Serializes to Turtle, Trig, N-triples, or N-Quads. |\n\n\n## RDF Join\n\n_Package: [`@comunica/bus-rdf-join`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join)_\n\nHandles joining of bindings streams.\n\nIt supports different logical join types, such as inner, optional, and minus joins.\n\nSubscribed actors need to implement [`ActorRdfJoin`](https://comunica.github.io/comunica/classes/bus_rdf_join.actorrdfjoin.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Inner Hash | [`@comunica/actor-rdf-join-inner-hash`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-hash) | Inner hash join of two entries. |\n| Inner Nested loop | [`@comunica/actor-rdf-join-inner-nestedloop`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-nestedloop) | Inner nested loop join of two entries. |\n| Inner None | [`@comunica/actor-rdf-join-inner-none`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-none) | Inner join between zero entries, and returns a single binding. |\n| Inner Single | [`@comunica/actor-rdf-join-inner-single`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-single) | Inner join of a single entry, and returns the entry itself. |\n| Inner Symmetric hash | [`@comunica/actor-rdf-join-inner-symmetrichash`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-symmetrichash) | Inner symmetric hash join of two entries. |\n| Inner Multi empty | [`@comunica/actor-rdf-join-inner-multi-empty`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-multi-empty) | Inner multi-join that accepts any number of inner-join entries of which at least one is empty and returns an empty stream. |\n| Inner Multi Bind | [`@comunica/actor-rdf-join-inner-multi-bind`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-multi-bind) | Inner multi-join that inner-joins 2 or more streams by picking the one with the lowest cardinality, binding each item with the remaining operations, and recursively resolving those operations by delegating to [`@comunica/bus-query-operation`](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation). |\n| Inner Multi sequential | [`@comunica/actor-rdf-join-inner-multi-sequential`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-multi-sequential) | Inner multi-join by just picking the two of them hierarchically. |\n| Inner Multi smallest | [`@comunica/actor-rdf-join-inner-multi-smallest`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-multi-smallest) | Inner multi-join by always picking the first two streams with smallest estimate cardinality. |\n| Minus Hash | [`@comunica/actor-rdf-join-minus-hash`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-minus-hash) | Anti-join (minus) of 2 streams using the hash join algorithm. This actor does _not_ support streams that can have undefined values. |\n| Minus Hash undef | [`@comunica/actor-rdf-join-minus-hash-undef`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-minus-hash-undef) | Anti-join (minus) of 2 streams using the hash join algorithm. This actor supports streams that can have undefined values. |\n| Optional Bind | [`@comunica/actor-rdf-join-optional-bind`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-optional-bind) | Left-join (optional) 2 streams using the bind join algorithm. It binds each item of the first stream with the second operation, and recursively resolving that operation by delegating to [`@comunica/bus-query-operation`](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation). |\n| Optional Nested loop | [`@comunica/actor-rdf-join-optional-nestedloop`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-optional-nestedloop) | Left-join (optional) 2 streams using the nested loop join algorithm. |\n\n\n## RDF Join Entries Sort\n\n_Package: [`@comunica/bus-rdf-join-entries-sort`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join-entries-sort)_\n\nDetermines the order in which join entries should be ordered.\n\nSubscribed actors need to implement [`ActorRdfJoinEntriesSort`](https://comunica.github.io/comunica/classes/bus_rdf_join_entries_sort.actorrdfjoinentriessort.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Cardinality | [`@comunica/actor-rdf-join-entries-sort-cardinality`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-entries-sort-cardinality) | Orders join entries by increasing cardinality. |\n\n\n## RDF Join Selectivity\n\n_Package: [`@comunica/bus-rdf-join-selectivity`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join-selectivity)_\n\nCalculates or estimates the selectivity of joins.\n\nSubscribed actors need to implement [`ActorRdfJoinSelectivity`](https://comunica.github.io/comunica/classes/bus_rdf_join_selectivity.actorrdfjoinselectivity.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Variable Counting | [`@comunica/actor-rdf-join-selectivity-variable-counting`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-selectivity-variable-counting) | Estimates the selectivity by counting the overlap of variables and non-variables in patterns. |\n\n\n## RDF Resolve Quad Pattern\n\n_Package: [`@comunica/bus-rdf-resolve-quad-pattern`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-resolve-quad-pattern)_\n\nTranslates a quad pattern into a stream of quad.\n\nSubscribed actors need to implement [`ActorRdfResolveQuadPattern`](https://comunica.github.io/comunica/classes/bus_rdf_resolve_quad_pattern.actorrdfresolvequadpattern.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Federated | [`@comunica/actor-rdf-resolve-quad-pattern-federated`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-resolve-quad-pattern-federated) | Translates the array of sources in the [query context](/docs/query/advanced/context/) into the union of quad streams by resolving each source separately in the *RDF Resolve Quad Pattern* bus. |\n| Hypermedia | [`@comunica/actor-rdf-resolve-quad-pattern-hypermedia`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-resolve-quad-pattern-hypermedia) | Resolves the quad stream of a resource by interpreting hypermedia links and controls. |\n| RDF/JS Source | [`@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-resolve-quad-pattern-rdfjs-source) | Resolves the quad stream from an [RDF/JS Source](/docs/query/advanced/rdfjs_querying/) |\n\n\n## Dereference\n\n_Package: [`@comunica/bus-dereference`](https://github.com/comunica/comunica/tree/master/packages/bus-dereference)_\n\nDereferences a path or URL into a (generic) stream.\n\nSubscribed actors need to implement [`ActorDereference`](https://comunica.github.io/comunica/classes/bus_dereference.actordereference.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| File | [`@comunica/actor-dereference-file`](https://github.com/comunica/comunica/tree/master/packages/actor-dereference-file) | Dereferences a local file. |\n| HTTP | [`@comunica/actor-dereference-http-parse`](https://github.com/comunica/comunica/tree/master/packages/actor-dereference-http-parse) | Dereferences a remote file. |\n\n\n## Dereference RDF\n\n_Package: [`@comunica/bus-dereference-rdf`](https://github.com/comunica/comunica/tree/master/packages/bus-dereference-rdf)_\n\nDereferences a path or URL into a stream of quads.\n\nSubscribed actors need to implement [`ActorDereferenceRdf`](https://comunica.github.io/comunica/classes/bus_dereference_rdf.actordereferencerdf.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Parse | [`@comunica/actor-dereference-rdf-parse`](https://github.com/comunica/comunica/tree/master/packages/actor-dereference-rdf-parse) | Dereferences RDF using [`@comunica/bus-dereference`](https://github.com/comunica/comunica/tree/master/packages/bus-dereference). Invokes parsing with [`@comunica/bus-rdf-parse`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-parse). |\n\n\n## RDF Parse\n\n_Package: [`@comunica/bus-rdf-parse`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-parse)_\n\nParses quads from a serialization format.\n\nSubscribed actors need to implement [`ActorRdfParse`](https://comunica.github.io/comunica/classes/bus_rdf_parse.actorrdfparse.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| HTML | [`@comunica/actor-rdf-parse-html`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-parse-html) | Parses HTML documents by delegating to [`@comunica/bus-rdf-parse-html`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-parse-html). |\n| JSON-LD | [`@comunica/actor-rdf-parse-jsonld`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-parse-jsonld) | Parses JSON-LD. |\n| N3 | [`@comunica/actor-rdf-parse-n3`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-parse-n3) | Parses Turtle, Trig, N-triples, or N-Quads. |\n| RDF/XML | [`@comunica/actor-rdf-parse-rdfxml`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-parse-rdfxml) | Parses RDF/XML. |\n| XML RDFa | [`@comunica/actor-rdf-parse-xml-rdfa`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-parse-xml-rdfa) | Parses RDFa in XML. |\n\n\n## RDF Parse HTML\n\n_Package: [`@comunica/bus-rdf-parse-html`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-parse-html)_\n\nParses quads from an HTML document.\n\nSubscribed actors need to implement [`ActorRdfParseHtml`](https://comunica.github.io/comunica/classes/bus_rdf_parse_html.actorrdfparsehtml.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| RDFa | [`@comunica/actor-rdf-parse-html-rdfa`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-parse-html-rdfa) | Parses RDFa. |\n| Microdata | [`@comunica/actor-rdf-parse-html-microdata`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-parse-html-microdata) | Parses Microdata to RDF. |\n| Script | [`@comunica/actor-rdf-parse-html-script`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-parse-html-script) | Parses script tags and attempts to parse them by delegating to [`@comunica/bus-rdf-parse`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-parse). |\n\n\n## HTTP\n\n_Package: [`@comunica/bus-http`](https://github.com/comunica/comunica/tree/master/packages/bus-http)_\n\nPerforms HTTP(S) requests.\n\nSubscribed actors need to implement [`ActorHttp`](https://comunica.github.io/comunica/classes/bus_http.actorhttp.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Memento | [`@comunica/actor-http-memento`](https://github.com/comunica/comunica/tree/master/packages/actor-http-memento) | Implements the [Memento protocol](/docs/query/advanced/memento/). |\n| Native | [`@comunica/actor-http-native`](https://github.com/comunica/comunica/tree/master/packages/actor-http-native) | Performs requests using Node's request library. |\n| Fetch | [`@comunica/actor-http-fetch`](https://github.com/comunica/comunica/tree/master/packages/actor-http-fetch) | Performs requests using the fetch API. |\n| Proxy | [`@comunica/actor-http-proxy`](https://github.com/comunica/comunica/tree/master/packages/actor-http-proxy) | Run requests through a proxy. |\n\n\n## HTTP Invalidate\n\n_Package: [`@comunica/bus-http-invalidate`](https://github.com/comunica/comunica/tree/master/packages/bus-http-invalidate)_\n\nA bus for HTTP invalidation events.\n\nSubscribed actors need to implement [`ActorHttpInvalidate`](https://comunica.github.io/comunica/classes/bus_http.actorhttp.html).\n\n\n## RDF Metadata\n\n_Package: [`@comunica/bus-rdf-metadata`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-metadata)_\n\nExtracts the quads relevant for metadata from the stream of data quads.\n\nSubscribed actors need to implement [`ActorRdfMetadata`](https://comunica.github.io/comunica/classes/bus_rdf_metadata.actorrdfmetadata.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| All | [`@comunica/actor-rdf-metadata-all`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-all) | Considers all incoming quads as both data and metadata quads. |\n| Primary topic | [`@comunica/actor-rdf-metadata-primary-topic`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-primary-topic) | Splits off the metadata based on the existence of a `foaf:primaryTopic` link. |\n\n\n## RDF Metadata Extract\n\n_Package: [`@comunica/bus-rdf-metadata-extract`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-metadata-extract)_\n\nCreate an object with metadata for a given metadata quad stream.\n\nSubscribed actors need to implement [`ActorRdfMetadataExtract`](https://comunica.github.io/comunica/classes/bus_rdf_metadata_extract.actorrdfmetadataextract.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Allow HTTP Methods | [`@comunica/actor-rdf-metadata-extract-allow-http-methods`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-extract-allow-http-methods) | Extract the `Allow` HTTP response header. |\n| Hydra Controls | [`@comunica/actor-rdf-metadata-extract-hydra-controls`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-extract-hydra-controls) | Extract controls using the Hydra vocabulary. |\n| Hydra Count | [`@comunica/actor-rdf-metadata-extract-hydra-count`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-extract-hydra-count) | Extract count estimates using the Hydra vocabulary. |\n| Hydra Page size | [`@comunica/actor-rdf-metadata-extract-hydra-pagesize`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-extract-hydra-pagesize) | Extract page sizes using the Hydra vocabulary. |\n| Patch SPARQL Update | [`@comunica/actor-rdf-metadata-extract-patch-sparql-update`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-extract-patch-sparql-update) | Checks for the presence of `application/sparql-update` in the `Accept-Patch` header. |\n| Put Accepted | [`@comunica/actor-rdf-metadata-extract-put-accepted`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-extract-put-accepted) | Extracts the [`Accept-Put`](https://solidproject.org/TR/protocol#accept-put) HTTP response header. |\n| Request Time | [`@comunica/actor-rdf-metadata-extract-request-time`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-extract-request-time) | Extracts the time it took to request the page in milliseconds. |\n| SPARQL Service | [`@comunica/actor-rdf-metadata-extract-sparql-service`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-metadata-extract-sparql-service) | Extract SPARQL service description metadata. |\n\n\n## RDF Resolve Hypermedia Links\n\n_Package: [`@comunica/bus-rdf-resolve-hypermedia-links`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-resolve-hypermedia-links)_\n\nDetermines which links should be followed from the metadata of the current source.\n\nSubscribed actors need to implement [`ActorRdfResolveHypermediaLinks`](https://comunica.github.io/comunica/classes/bus_rdf_resolve_hypermedia_links.actorrdfresolvehypermedialinks.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| Next | [`@comunica/actor-rdf-resolve-hypermedia-links-next`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-resolve-hypermedia-links-next) | Follow next page links. |\n\n## RDF Resolve Hypermedia Links Queue\n\n_Package: [`@comunica/bus-rdf-resolve-hypermedia-links-queue`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-resolve-hypermedia-links-queue)_\n\nCreates [`ILinkQueue`](https://comunica.github.io/comunica/interfaces/bus_rdf_resolve_hypermedia_links_queue.ilinkqueue.html) instances,\nwhich enables different strategies for queueing links.\n\nSubscribed actors need to implement [`ActorRdfResolveHypermediaLinksQueue`](https://comunica.github.io/comunica/classes/bus_rdf_resolve_hypermedia_links_queue.actorrdfresolvehypermedialinksqueue.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| FIFO | [`@comunica/actor-rdf-resolve-hypermedia-links-queue-fifo`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-resolve-hypermedia-links-queue-fifo) | Provides a link queue following the first in, first out strategy |\n\n\n## RDF Resolve Hypermedia\n\n_Package: [`@comunica/bus-rdf-resolve-hypermedia`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-resolve-hypermedia)_\n\nHandle a source based on the extracted metadata.\n\nSubscribed actors need to implement [`ActorRdfResolveHypermedia`](https://comunica.github.io/comunica/classes/bus_rdf_resolve_hypermedia.actorrdfresolvehypermedia.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| None | [`@comunica/actor-rdf-resolve-hypermedia-none`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-resolve-hypermedia-none) | The source is considered a raw RDF file, for which all data quads matching the quad pattern are returned. |\n| QPF | [`@comunica/actor-rdf-resolve-hypermedia-qpf`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-resolve-hypermedia-qpf) | The source is considered a [Triple/Quad Pattern Fragments](https://linkeddatafragments.org/) interface. |\n| SPARQL | [`@comunica/actor-rdf-resolve-hypermedia-sparql`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-resolve-hypermedia-sparql) | The source is considered a SPARQL endpoint if it has a service description, for which we use the SPARQL protocol. |\n\n## RDF Update Quads\n\n_Package: [`@comunica/bus-rdf-update-quads`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-update-quads)_\n\nHandle the insertion and deletion of streams of quads for a given destination type.\n\nSubscribed actors need to implement [`ActorRdfUpdateQuads`](https://comunica.github.io/comunica/classes/bus_rdf_update_quads.actorrdfupdatequads.html)\nor [`ActorRdfUpdateQuadsDestination`](https://comunica.github.io/comunica/classes/bus_rdf_update_quads.actorrdfupdatequadsdestination.html)\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| RDF/JS Store | [`@comunica/actor-rdf-update-quads-rdfjs-store`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-update-quads-rdfjs-store) | The destination is considered an [RDF/JS Store](https://comunica.dev/docs/query/advanced/rdfjs_querying/). |\n| Hypermedia | [`@comunica/actor-rdf-update-quads-hypermedia`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-update-quads-hypermedia) | The destination that handles updates by interpreting hypermedia links and controls. |\n\n\n## RDF Update Hypermedia\n\n_Package: [`@comunica/bus-rdf-update-hypermedia`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-update-hypermedia)_\n\nHandle a destination based on the extracted metadata.\n\nSubscribed actors need to implement [`ActorRdfUpdateHypermedia`](https://comunica.github.io/comunica/classes/bus_rdf_update_hypermedia.actorrdfupdatehypermedia.html).\n\n### Actors\n\n| Name | Package | Description |\n| ---- | ------- | ----------- |\n| SPARQL | [`@comunica/actor-rdf-update-hypermedia-patch-sparql-update`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-update-hypermedia-patch-sparql-update) | The destination is considered an HTTP APIs accepting `PATCH` requests containing SPARQL Update queries (`application/sparql-update`), such as [Solid servers](https://github.com/solid/solid-spec/blob/master/api-rest.md#alternative-using-sparql-1). |\n"},"GZg/":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/[...slug]",function(){return t("91Zj")}])},H7XF:function(e,n,t){"use strict";n.byteLength=function(e){var n=u(e),t=n[0],a=n[1];return 3*(t+a)/4-a},n.toByteArray=function(e){var n,t,a=u(e),r=a[0],s=a[1],c=new i(function(e,n,t){return 3*(n+t)/4-t}(0,r,s)),l=0,d=s>0?r-4:r;for(t=0;t<d;t+=4)n=o[e.charCodeAt(t)]<<18|o[e.charCodeAt(t+1)]<<12|o[e.charCodeAt(t+2)]<<6|o[e.charCodeAt(t+3)],c[l++]=n>>16&255,c[l++]=n>>8&255,c[l++]=255&n;2===s&&(n=o[e.charCodeAt(t)]<<2|o[e.charCodeAt(t+1)]>>4,c[l++]=255&n);1===s&&(n=o[e.charCodeAt(t)]<<10|o[e.charCodeAt(t+1)]<<4|o[e.charCodeAt(t+2)]>>2,c[l++]=n>>8&255,c[l++]=255&n);return c},n.fromByteArray=function(e){for(var n,t=e.length,o=t%3,i=[],r=16383,s=0,c=t-o;s<c;s+=r)i.push(l(e,s,s+r>c?c:s+r));1===o?(n=e[t-1],i.push(a[n>>2]+a[n<<4&63]+"==")):2===o&&(n=(e[t-2]<<8)+e[t-1],i.push(a[n>>10]+a[n>>4&63]+a[n<<2&63]+"="));return i.join("")};for(var a=[],o=[],i="undefined"!==typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,c=r.length;s<c;++s)a[s]=r[s],o[r.charCodeAt(s)]=s;function u(e){var n=e.length;if(n%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var t=e.indexOf("=");return-1===t&&(t=n),[t,t===n?0:4-t%4]}function l(e,n,t){for(var o,i,r=[],s=n;s<t;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),r.push(a[(i=o)>>18&63]+a[i>>12&63]+a[i>>6&63]+a[63&i]);return r.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},HDXh:function(e,n,t){"use strict";(function(e){var a=t("H7XF"),o=t("kVK+"),i=t("49sm");function r(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,n){if(r()<n)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(n)).__proto__=c.prototype:(null===e&&(e=new c(n)),e.length=n),e}function c(e,n,t){if(!c.TYPED_ARRAY_SUPPORT&&!(this instanceof c))return new c(e,n,t);if("number"===typeof e){if("string"===typeof n)throw new Error("If encoding is specified then the first argument must be a string");return d(this,e)}return u(this,e,n,t)}function u(e,n,t,a){if("number"===typeof n)throw new TypeError('"value" argument must not be a number');return"undefined"!==typeof ArrayBuffer&&n instanceof ArrayBuffer?function(e,n,t,a){if(n.byteLength,t<0||n.byteLength<t)throw new RangeError("'offset' is out of bounds");if(n.byteLength<t+(a||0))throw new RangeError("'length' is out of bounds");n=void 0===t&&void 0===a?new Uint8Array(n):void 0===a?new Uint8Array(n,t):new Uint8Array(n,t,a);c.TYPED_ARRAY_SUPPORT?(e=n).__proto__=c.prototype:e=p(e,n);return e}(e,n,t,a):"string"===typeof n?function(e,n,t){"string"===typeof t&&""!==t||(t="utf8");if(!c.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');var a=0|m(n,t),o=(e=s(e,a)).write(n,t);o!==a&&(e=e.slice(0,o));return e}(e,n,t):function(e,n){if(c.isBuffer(n)){var t=0|h(n.length);return 0===(e=s(e,t)).length||n.copy(e,0,0,t),e}if(n){if("undefined"!==typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!==typeof n.length||(a=n.length)!==a?s(e,0):p(e,n);if("Buffer"===n.type&&i(n.data))return p(e,n.data)}var a;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,n)}function l(e){if("number"!==typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function d(e,n){if(l(n),e=s(e,n<0?0:0|h(n)),!c.TYPED_ARRAY_SUPPORT)for(var t=0;t<n;++t)e[t]=0;return e}function p(e,n){var t=n.length<0?0:0|h(n.length);e=s(e,t);for(var a=0;a<t;a+=1)e[a]=255&n[a];return e}function h(e){if(e>=r())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+r().toString(16)+" bytes");return 0|e}function m(e,n){if(c.isBuffer(e))return e.length;if("undefined"!==typeof ArrayBuffer&&"function"===typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!==typeof e&&(e=""+e);var t=e.length;if(0===t)return 0;for(var a=!1;;)switch(n){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":case void 0:return H(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*t;case"hex":return t>>>1;case"base64":return B(e).length;default:if(a)return H(e).length;n=(""+n).toLowerCase(),a=!0}}function f(e,n,t){var a=!1;if((void 0===n||n<0)&&(n=0),n>this.length)return"";if((void 0===t||t>this.length)&&(t=this.length),t<=0)return"";if((t>>>=0)<=(n>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return _(this,n,t);case"utf8":case"utf-8":return j(this,n,t);case"ascii":return T(this,n,t);case"latin1":case"binary":return C(this,n,t);case"base64":return A(this,n,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,n,t);default:if(a)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),a=!0}}function g(e,n,t){var a=e[n];e[n]=e[t],e[t]=a}function y(e,n,t,a,o){if(0===e.length)return-1;if("string"===typeof t?(a=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),t=+t,isNaN(t)&&(t=o?0:e.length-1),t<0&&(t=e.length+t),t>=e.length){if(o)return-1;t=e.length-1}else if(t<0){if(!o)return-1;t=0}if("string"===typeof n&&(n=c.from(n,a)),c.isBuffer(n))return 0===n.length?-1:b(e,n,t,a,o);if("number"===typeof n)return n&=255,c.TYPED_ARRAY_SUPPORT&&"function"===typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,n,t):Uint8Array.prototype.lastIndexOf.call(e,n,t):b(e,[n],t,a,o);throw new TypeError("val must be string, number or Buffer")}function b(e,n,t,a,o){var i,r=1,s=e.length,c=n.length;if(void 0!==a&&("ucs2"===(a=String(a).toLowerCase())||"ucs-2"===a||"utf16le"===a||"utf-16le"===a)){if(e.length<2||n.length<2)return-1;r=2,s/=2,c/=2,t/=2}function u(e,n){return 1===r?e[n]:e.readUInt16BE(n*r)}if(o){var l=-1;for(i=t;i<s;i++)if(u(e,i)===u(n,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===c)return l*r}else-1!==l&&(i-=i-l),l=-1}else for(t+c>s&&(t=s-c),i=t;i>=0;i--){for(var d=!0,p=0;p<c;p++)if(u(e,i+p)!==u(n,p)){d=!1;break}if(d)return i}return-1}function w(e,n,t,a){t=Number(t)||0;var o=e.length-t;a?(a=Number(a))>o&&(a=o):a=o;var i=n.length;if(i%2!==0)throw new TypeError("Invalid hex string");a>i/2&&(a=i/2);for(var r=0;r<a;++r){var s=parseInt(n.substr(2*r,2),16);if(isNaN(s))return r;e[t+r]=s}return r}function v(e,n,t,a){return W(H(n,e.length-t),e,t,a)}function q(e,n,t,a){return W(function(e){for(var n=[],t=0;t<e.length;++t)n.push(255&e.charCodeAt(t));return n}(n),e,t,a)}function x(e,n,t,a){return q(e,n,t,a)}function S(e,n,t,a){return W(B(n),e,t,a)}function k(e,n,t,a){return W(function(e,n){for(var t,a,o,i=[],r=0;r<e.length&&!((n-=2)<0);++r)a=(t=e.charCodeAt(r))>>8,o=t%256,i.push(o),i.push(a);return i}(n,e.length-t),e,t,a)}function A(e,n,t){return 0===n&&t===e.length?a.fromByteArray(e):a.fromByteArray(e.slice(n,t))}function j(e,n,t){t=Math.min(e.length,t);for(var a=[],o=n;o<t;){var i,r,s,c,u=e[o],l=null,d=u>239?4:u>223?3:u>191?2:1;if(o+d<=t)switch(d){case 1:u<128&&(l=u);break;case 2:128===(192&(i=e[o+1]))&&(c=(31&u)<<6|63&i)>127&&(l=c);break;case 3:i=e[o+1],r=e[o+2],128===(192&i)&&128===(192&r)&&(c=(15&u)<<12|(63&i)<<6|63&r)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:i=e[o+1],r=e[o+2],s=e[o+3],128===(192&i)&&128===(192&r)&&128===(192&s)&&(c=(15&u)<<18|(63&i)<<12|(63&r)<<6|63&s)>65535&&c<1114112&&(l=c)}null===l?(l=65533,d=1):l>65535&&(l-=65536,a.push(l>>>10&1023|55296),l=56320|1023&l),a.push(l),o+=d}return function(e){var n=e.length;if(n<=R)return String.fromCharCode.apply(String,e);var t="",a=0;for(;a<n;)t+=String.fromCharCode.apply(String,e.slice(a,a+=R));return t}(a)}n.Buffer=c,n.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},n.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"===typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(n){return!1}}(),n.kMaxLength=r(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,n,t){return u(null,e,n,t)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!==typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,n,t){return function(e,n,t,a){return l(n),n<=0?s(e,n):void 0!==t?"string"===typeof a?s(e,n).fill(t,a):s(e,n).fill(t):s(e,n)}(null,e,n,t)},c.allocUnsafe=function(e){return d(null,e)},c.allocUnsafeSlow=function(e){return d(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,n){if(!c.isBuffer(e)||!c.isBuffer(n))throw new TypeError("Arguments must be Buffers");if(e===n)return 0;for(var t=e.length,a=n.length,o=0,i=Math.min(t,a);o<i;++o)if(e[o]!==n[o]){t=e[o],a=n[o];break}return t<a?-1:a<t?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,n){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var t;if(void 0===n)for(n=0,t=0;t<e.length;++t)n+=e[t].length;var a=c.allocUnsafe(n),o=0;for(t=0;t<e.length;++t){var r=e[t];if(!c.isBuffer(r))throw new TypeError('"list" argument must be an Array of Buffers');r.copy(a,o),o+=r.length}return a},c.byteLength=m,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var n=0;n<e;n+=2)g(this,n,n+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var n=0;n<e;n+=4)g(this,n,n+3),g(this,n+1,n+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var n=0;n<e;n+=8)g(this,n,n+7),g(this,n+1,n+6),g(this,n+2,n+5),g(this,n+3,n+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?j(this,0,e):f.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",t=n.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,n,t,a,o){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===t&&(t=e?e.length:0),void 0===a&&(a=0),void 0===o&&(o=this.length),n<0||t>e.length||a<0||o>this.length)throw new RangeError("out of range index");if(a>=o&&n>=t)return 0;if(a>=o)return-1;if(n>=t)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(a>>>=0),r=(t>>>=0)-(n>>>=0),s=Math.min(i,r),u=this.slice(a,o),l=e.slice(n,t),d=0;d<s;++d)if(u[d]!==l[d]){i=u[d],r=l[d];break}return i<r?-1:r<i?1:0},c.prototype.includes=function(e,n,t){return-1!==this.indexOf(e,n,t)},c.prototype.indexOf=function(e,n,t){return y(this,e,n,t,!0)},c.prototype.lastIndexOf=function(e,n,t){return y(this,e,n,t,!1)},c.prototype.write=function(e,n,t,a){if(void 0===n)a="utf8",t=this.length,n=0;else if(void 0===t&&"string"===typeof n)a=n,t=this.length,n=0;else{if(!isFinite(n))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");n|=0,isFinite(t)?(t|=0,void 0===a&&(a="utf8")):(a=t,t=void 0)}var o=this.length-n;if((void 0===t||t>o)&&(t=o),e.length>0&&(t<0||n<0)||n>this.length)throw new RangeError("Attempt to write outside buffer bounds");a||(a="utf8");for(var i=!1;;)switch(a){case"hex":return w(this,e,n,t);case"utf8":case"utf-8":return v(this,e,n,t);case"ascii":return q(this,e,n,t);case"latin1":case"binary":return x(this,e,n,t);case"base64":return S(this,e,n,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,n,t);default:if(i)throw new TypeError("Unknown encoding: "+a);a=(""+a).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var R=4096;function T(e,n,t){var a="";t=Math.min(e.length,t);for(var o=n;o<t;++o)a+=String.fromCharCode(127&e[o]);return a}function C(e,n,t){var a="";t=Math.min(e.length,t);for(var o=n;o<t;++o)a+=String.fromCharCode(e[o]);return a}function _(e,n,t){var a=e.length;(!n||n<0)&&(n=0),(!t||t<0||t>a)&&(t=a);for(var o="",i=n;i<t;++i)o+=M(e[i]);return o}function E(e,n,t){for(var a=e.slice(n,t),o="",i=0;i<a.length;i+=2)o+=String.fromCharCode(a[i]+256*a[i+1]);return o}function L(e,n,t){if(e%1!==0||e<0)throw new RangeError("offset is not uint");if(e+n>t)throw new RangeError("Trying to access beyond buffer length")}function P(e,n,t,a,o,i){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>o||n<i)throw new RangeError('"value" argument is out of bounds');if(t+a>e.length)throw new RangeError("Index out of range")}function I(e,n,t,a){n<0&&(n=65535+n+1);for(var o=0,i=Math.min(e.length-t,2);o<i;++o)e[t+o]=(n&255<<8*(a?o:1-o))>>>8*(a?o:1-o)}function D(e,n,t,a){n<0&&(n=4294967295+n+1);for(var o=0,i=Math.min(e.length-t,4);o<i;++o)e[t+o]=n>>>8*(a?o:3-o)&255}function F(e,n,t,a,o,i){if(t+a>e.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function Q(e,n,t,a,i){return i||F(e,0,t,4),o.write(e,n,t,a,23,4),t+4}function O(e,n,t,a,i){return i||F(e,0,t,8),o.write(e,n,t,a,52,8),t+8}c.prototype.slice=function(e,n){var t,a=this.length;if((e=~~e)<0?(e+=a)<0&&(e=0):e>a&&(e=a),(n=void 0===n?a:~~n)<0?(n+=a)<0&&(n=0):n>a&&(n=a),n<e&&(n=e),c.TYPED_ARRAY_SUPPORT)(t=this.subarray(e,n)).__proto__=c.prototype;else{var o=n-e;t=new c(o,void 0);for(var i=0;i<o;++i)t[i]=this[i+e]}return t},c.prototype.readUIntLE=function(e,n,t){e|=0,n|=0,t||L(e,n,this.length);for(var a=this[e],o=1,i=0;++i<n&&(o*=256);)a+=this[e+i]*o;return a},c.prototype.readUIntBE=function(e,n,t){e|=0,n|=0,t||L(e,n,this.length);for(var a=this[e+--n],o=1;n>0&&(o*=256);)a+=this[e+--n]*o;return a},c.prototype.readUInt8=function(e,n){return n||L(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,n){return n||L(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,n){return n||L(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,n){return n||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,n){return n||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,n,t){e|=0,n|=0,t||L(e,n,this.length);for(var a=this[e],o=1,i=0;++i<n&&(o*=256);)a+=this[e+i]*o;return a>=(o*=128)&&(a-=Math.pow(2,8*n)),a},c.prototype.readIntBE=function(e,n,t){e|=0,n|=0,t||L(e,n,this.length);for(var a=n,o=1,i=this[e+--a];a>0&&(o*=256);)i+=this[e+--a]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*n)),i},c.prototype.readInt8=function(e,n){return n||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,n){n||L(e,2,this.length);var t=this[e]|this[e+1]<<8;return 32768&t?4294901760|t:t},c.prototype.readInt16BE=function(e,n){n||L(e,2,this.length);var t=this[e+1]|this[e]<<8;return 32768&t?4294901760|t:t},c.prototype.readInt32LE=function(e,n){return n||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,n){return n||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,n){return n||L(e,4,this.length),o.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,n){return n||L(e,4,this.length),o.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,n){return n||L(e,8,this.length),o.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,n){return n||L(e,8,this.length),o.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,n,t,a){(e=+e,n|=0,t|=0,a)||P(this,e,n,t,Math.pow(2,8*t)-1,0);var o=1,i=0;for(this[n]=255&e;++i<t&&(o*=256);)this[n+i]=e/o&255;return n+t},c.prototype.writeUIntBE=function(e,n,t,a){(e=+e,n|=0,t|=0,a)||P(this,e,n,t,Math.pow(2,8*t)-1,0);var o=t-1,i=1;for(this[n+o]=255&e;--o>=0&&(i*=256);)this[n+o]=e/i&255;return n+t},c.prototype.writeUInt8=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[n]=255&e,n+1},c.prototype.writeUInt16LE=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):I(this,e,n,!0),n+2},c.prototype.writeUInt16BE=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):I(this,e,n,!1),n+2},c.prototype.writeUInt32LE=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[n+3]=e>>>24,this[n+2]=e>>>16,this[n+1]=e>>>8,this[n]=255&e):D(this,e,n,!0),n+4},c.prototype.writeUInt32BE=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):D(this,e,n,!1),n+4},c.prototype.writeIntLE=function(e,n,t,a){if(e=+e,n|=0,!a){var o=Math.pow(2,8*t-1);P(this,e,n,t,o-1,-o)}var i=0,r=1,s=0;for(this[n]=255&e;++i<t&&(r*=256);)e<0&&0===s&&0!==this[n+i-1]&&(s=1),this[n+i]=(e/r>>0)-s&255;return n+t},c.prototype.writeIntBE=function(e,n,t,a){if(e=+e,n|=0,!a){var o=Math.pow(2,8*t-1);P(this,e,n,t,o-1,-o)}var i=t-1,r=1,s=0;for(this[n+i]=255&e;--i>=0&&(r*=256);)e<0&&0===s&&0!==this[n+i+1]&&(s=1),this[n+i]=(e/r>>0)-s&255;return n+t},c.prototype.writeInt8=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[n]=255&e,n+1},c.prototype.writeInt16LE=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):I(this,e,n,!0),n+2},c.prototype.writeInt16BE=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):I(this,e,n,!1),n+2},c.prototype.writeInt32LE=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8,this[n+2]=e>>>16,this[n+3]=e>>>24):D(this,e,n,!0),n+4},c.prototype.writeInt32BE=function(e,n,t){return e=+e,n|=0,t||P(this,e,n,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):D(this,e,n,!1),n+4},c.prototype.writeFloatLE=function(e,n,t){return Q(this,e,n,!0,t)},c.prototype.writeFloatBE=function(e,n,t){return Q(this,e,n,!1,t)},c.prototype.writeDoubleLE=function(e,n,t){return O(this,e,n,!0,t)},c.prototype.writeDoubleBE=function(e,n,t){return O(this,e,n,!1,t)},c.prototype.copy=function(e,n,t,a){if(t||(t=0),a||0===a||(a=this.length),n>=e.length&&(n=e.length),n||(n=0),a>0&&a<t&&(a=t),a===t)return 0;if(0===e.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(t<0||t>=this.length)throw new RangeError("sourceStart out of bounds");if(a<0)throw new RangeError("sourceEnd out of bounds");a>this.length&&(a=this.length),e.length-n<a-t&&(a=e.length-n+t);var o,i=a-t;if(this===e&&t<n&&n<a)for(o=i-1;o>=0;--o)e[o+n]=this[o+t];else if(i<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+n]=this[o+t];else Uint8Array.prototype.set.call(e,this.subarray(t,t+i),n);return i},c.prototype.fill=function(e,n,t,a){if("string"===typeof e){if("string"===typeof n?(a=n,n=0,t=this.length):"string"===typeof t&&(a=t,t=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==a&&"string"!==typeof a)throw new TypeError("encoding must be a string");if("string"===typeof a&&!c.isEncoding(a))throw new TypeError("Unknown encoding: "+a)}else"number"===typeof e&&(e&=255);if(n<0||this.length<n||this.length<t)throw new RangeError("Out of range index");if(t<=n)return this;var i;if(n>>>=0,t=void 0===t?this.length:t>>>0,e||(e=0),"number"===typeof e)for(i=n;i<t;++i)this[i]=e;else{var r=c.isBuffer(e)?e:H(new c(e,a).toString()),s=r.length;for(i=0;i<t-n;++i)this[i+n]=r[i%s]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function M(e){return e<16?"0"+e.toString(16):e.toString(16)}function H(e,n){var t;n=n||1/0;for(var a=e.length,o=null,i=[],r=0;r<a;++r){if((t=e.charCodeAt(r))>55295&&t<57344){if(!o){if(t>56319){(n-=3)>-1&&i.push(239,191,189);continue}if(r+1===a){(n-=3)>-1&&i.push(239,191,189);continue}o=t;continue}if(t<56320){(n-=3)>-1&&i.push(239,191,189),o=t;continue}t=65536+(o-55296<<10|t-56320)}else o&&(n-=3)>-1&&i.push(239,191,189);if(o=null,t<128){if((n-=1)<0)break;i.push(t)}else if(t<2048){if((n-=2)<0)break;i.push(t>>6|192,63&t|128)}else if(t<65536){if((n-=3)<0)break;i.push(t>>12|224,t>>6&63|128,63&t|128)}else{if(!(t<1114112))throw new Error("Invalid code point");if((n-=4)<0)break;i.push(t>>18|240,t>>12&63|128,t>>6&63|128,63&t|128)}}return i}function B(e){return a.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(N,"")).length<2)return"";for(;e.length%4!==0;)e+="=";return e}(e))}function W(e,n,t,a){for(var o=0;o<a&&!(o+t>=n.length||o>=e.length);++o)n[o+t]=e[o];return o}}).call(this,t("ntbh"))},HUeH:function(e,n,t){"use strict";var a=t("ClZL"),o=t("XP29");function i(e){return function(){throw new Error("Function "+e+" is deprecated and cannot be used.")}}e.exports.Type=t("hyoZ"),e.exports.Schema=t("3lC6"),e.exports.FAILSAFE_SCHEMA=t("2YgE"),e.exports.JSON_SCHEMA=t("+VNs"),e.exports.CORE_SCHEMA=t("RSjF"),e.exports.DEFAULT_SAFE_SCHEMA=t("Z3Ei"),e.exports.DEFAULT_FULL_SCHEMA=t("VtPO"),e.exports.load=a.load,e.exports.loadAll=a.loadAll,e.exports.safeLoad=a.safeLoad,e.exports.safeLoadAll=a.safeLoadAll,e.exports.dump=o.dump,e.exports.safeDump=o.safeDump,e.exports.YAMLException=t("w+qe"),e.exports.MINIMAL_SCHEMA=t("2YgE"),e.exports.SAFE_SCHEMA=t("Z3Ei"),e.exports.DEFAULT_SCHEMA=t("VtPO"),e.exports.scan=i("scan"),e.exports.parse=i("parse"),e.exports.compose=i("compose"),e.exports.addConstructor=i("addConstructor")},I0sh:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Release 1.20.0: SPARQL Update support'\n---\n\nWith this new 1.20.0 release, we bring support for [SPARQL Update](https://www.w3.org/TR/sparql11-update/) queries to Comunica.\nNext to this, several enhancements were made to improve developer experience,\nminor new features, and important bug fixes.\n\n\x3c!-- excerpt-end --\x3e\n\n## SPARQL Update\n\nUp until now, Comunica only supported performing read-only queries over one or more sources.\nWith this update, it is possible to execute [SPARQL Update queries](https://www.w3.org/TR/sparql11-update/)\nto modify data inside a _source_, or direct changes to a separate _destination_.\n\nThe current implementation is fully compliant to the SPARQL Update specification,\nand it passes all tests of the test suite.\n\nCurrently, Update support is limited to [RDF/JS stores](/docs/query/advanced/rdfjs_updating/).\nSupport for updating other types of destinations is planned,\nsuch as local RDF files, [Linked Data Platform](https://www.w3.org/TR/ldp/),\n[SPARQL endpoints](https://www.w3.org/TR/2013/REC-sparql11-protocol-20130321/),\n[SPARQL Graph Store protocol](https://www.w3.org/TR/2013/REC-sparql11-http-rdf-update-20130321/), ...\n\nNo explicit support for transactions is available at the moment,\nas we assume that RDF/JS stores handle this on their own.\nProper support for this at engine-level is planned.\n\n## SPARQL endpoint worker threads\n\nIf you [use Comunica to expose a SPARQL endpoint](/docs/query/getting_started/setup_endpoint/),\nyou can now set the number of parallel worker threads using the `-w` flag:\n\n```bash\n$ comunica-sparql-http https://fragments.dbpedia.org/2016-04/en -w 4\n```\n\nThis will result in better performance when your endpoint serves many parallel requests.\n\nTogether with this change, the timeout handling has been improved,\nas the old implementation would sometimes not terminate query executions even if the timeout was exceeded.\n\n## Features, fixes and enhancements\n\nNext to the changes above, several other features, fixes and enhancements were applied,\nsuch the new [`@comunica/types`](https://github.com/comunica/comunica/commit/3f46a233883b699df87fcee3215516f97e15e346)\nand [`@comunica/context-entries`](https://github.com/comunica/comunica/commit/12b9ee3e8e5bc2d0fadd662a3d6aeef838b87619) packages,\nenabling [blank node correlation across results](https://github.com/comunica/comunica/commit/d9b93b4608c69e6c8b710b664c37e47a1c0d41c7),\nand a new [link queue bus](https://github.com/comunica/comunica/commit/8de44d1da8e63c9b3a15c26dadcb003c2c00f136).\nCheck out the [full changelog](https://github.com/comunica/comunica/blob/master/CHANGELOG.md#v1200---2021-03-30) to read more about them.\n"},IAsa:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Querying from a Docker container\'\ndescription: \'Execute SPARQL queries within a Docker container.\'\n---\n\n<div class="docs-intro-img">\n  <img src="/img/docker.png" alt="Docker logo" style="width:50%" \\>\n</div>\n\nIf for whatever reason you are unable or unwilling to install Node.js,\nthen you can make use Comunica via [**Docker containers**](https://www.docker.com/) instead.\n\nUsage of the Comunica SPARQL via Docker can be done via the [`comunica/query-sparql` Docker image](https://hub.docker.com/r/comunica/query-sparql):\n```bash\n$ docker run -it --rm comunica/query-sparql \\\n  https://fragments.dbpedia.org/2015-10/en \\\n  "CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100"\n```\n\nThe signature of this command is identical to the [`comunica-sparql` command](/docs/query/getting_started/query_cli/).\n\nBy default, the latest (stable) released version will be pulled and started.\nIf you want to make use of the latest development version,\nwhich is updated upon each new commit in the [Comunica GitHub repository](https://github.com/comunica/comunica),\nthen the `dev` tag can be used:\n```bash\n$ docker run -it --rm comunica/query-sparql:dev \\\n  https://fragments.dbpedia.org/2015-10/en \\\n  "CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100"\n```\n\nA new Docker tag is also created upon each new release,\nso you can select a fixed version of Comunica if needed,\nsuch as version 1.14.0:\n```bash\n$ docker run -it --rm comunica/query-sparql:1.14.0 \\\n  https://fragments.dbpedia.org/2015-10/en \\\n  "CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100"\n```\n\nA list of all available tags can be found on the [Docker hub](https://hub.docker.com/r/comunica/query-sparql/tags).\n'},IeaT:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Query operation result types'\ndescription: 'An overview of the different output types for query operations.'\n---\n\nComunica supports different [SPARQL query types](/docs/query/advanced/sparql_query_types/),\neach of which may require different kinds of output.\nFor example, `SELECT` queries returns a stream of bindings,\n`CONSTRUCT` and `DESCRIBE` returns a stream of quads,\nand `ASK` returns a boolean.\n\nThis document gives an overview of how these different output types are represented internally by Comunica actors.\n\n## Query operation output type\n\nAll relevant types and interfaces are exposed by the\n[Comunica types package](https://github.com/comunica/comunica/tree/master/packages/types).\n\n[`IQueryOperationResult`](https://comunica.github.io/comunica/modules/types.html#iqueryoperationresult)\nis a TypeScript union type over the following interfaces:\n\n* [`IQueryOperationResultBindings`](https://comunica.github.io/comunica/modules/types.html#iqueryoperationresultbindings): Represents a stream of bindings.\n* [`IQueryOperationResultQuads`](https://comunica.github.io/comunica/modules/types.html#iqueryoperationresultquads): Represents a stream of quads.\n* [`IQueryOperationResultBoolean`](https://comunica.github.io/comunica/modules/types.html#iqueryoperationresultboolean): Represents a boolean result.\n* [`IQueryOperationResultVoid`](https://comunica.github.io/comunica/modules/types.html#iqueryoperationresultvoid): Represents a void result.\n\n## Bindings output\n\nAn output of type [`IQueryOperationResultBindings`](https://comunica.github.io/comunica/modules/types.html#iqueryoperationresultbindings)\nlooks as follows:\n\n```typescript\ninterface IQueryOperationResultBindings {\n  type: 'bindings';\n  context: ActionContext;\n  metadata: () => Promise<IMetadata>;\n  bindingsStream: BindingsStream;\n}\n```\n\nThe most important field in here is `bindingsStream`, which is of type [`BindingsStream`](https://comunica.github.io/comunica/modules/types.html#bindingsstream).\nThis is a stream containing bindings.\nLearn more about the usage of these bindings objects in the [bindings guide](/docs/query/advanced/bindings/).\n\n## Quads output\n\nAn output of type [`IQueryOperationResultQuads`](https://comunica.github.io/comunica/modules/types.html#iqueryoperationresultquads)\nlooks as follows:\n\n```typescript\ninterface IQueryOperationResultQuads {\n  type: 'quads';\n  context: ActionContext;\n  metadata: () => Promise<IMetadata>;\n  quadStream: RDF.Stream & AsyncIterator<RDF.Quad>;\n}\n```\n\nThe most important field in here is `quadStream`, which is of type [`RDF.Stream`](/docs/query/advanced/rdfjs/)\ncontaining [RDF/JS quads](/docs/query/advanced/rdfjs/).\n\n## Boolean output\n\nAn output of type [`IQueryOperationResultBoolean`](https://comunica.github.io/comunica/modules/types.html#iqueryoperationresultboolean)\nlooks as follows:\n\n```typescript\ninterface IQueryOperationResultBoolean {\n  type: 'bindings';\n  context: ActionContext;\n  execute: () => Promise<boolean>;\n}\n```\n\nThe most important method in here is `execute`, which returns a promise resolving to a boolean.\n\n## Void output\n\nAn output of type [`IQueryOperationResultVoid`](https://comunica.github.io/comunica/modules/types.html#iqueryoperationresultvoid)\nlooks as follows:\n\n```typescript\ninterface IQueryOperationResultVoid {\n  type: 'void';\n  context: ActionContext;\n  execute: () => Promise<void>;\n}\n```\n\nThe most important method in here is `execute`, which returns a void promise.\n\n## Casting an unknown output type\n\nIf your actor calls a query operation mediator, it will receive an output of type `IActorQueryOperationOutput`.\nIf you want to operate on the results directly,\nand if you are not certain of the output type,\nyou will have to check the `type` field of the output,\nand handle it accordingly.\n\nIf you however know beforehand what the type will be,\nyou can safely cast the output type with the following helper functions:\n\n* `ActorQueryOperation.getSafeBindings`: Returns `IQueryOperationResultBindings`.\n* `ActorQueryOperation.getSafeQuads`: Returns `IQueryOperationResultQuads`.\n* `ActorQueryOperation.getSafeBoolean`: Returns `IQueryOperationResultBoolean`.\n* `ActorQueryOperation.getSafeVoid`: Returns `IQueryOperationResultVoid`.\n\nFor example, the minus query operation actor ([`@comunica/actor-query-operation-minus`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-minus))\ncan only operate on bindings streams.\nAs such, it can safely cast outputs as follows:\n\n```typescript\nconst leftResult: IQueryOperationResultBindings = ActorQueryOperation.getSafeBindings(\n  await this.mediatorQueryOperation.mediate({ operation: pattern.right, context }),\n);\nconst rightResult: IQueryOperationResultBindings = ActorQueryOperation.getSafeBindings(\n  await this.mediatorQueryOperation.mediate({ operation: pattern.left, context }),\n);\n\nleftResult.bindingsStream.filter(...);\n```\n"},IwNq:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Querying in a JavaScript app'\ndescription: 'Execute SPARQL queries from within your application using the JavaScript API.'\n---\n\nThe default Comunica query engine that exposes most standard features is Comunica SPARQL,\nwhich uses the package name `@comunica/query-sparql`.\nIn this guide, we will install it as a dependency in a [Node.js](https://nodejs.org/en/) JavaScript application,\nand show how it can be used to execute queries.\n\n<div class=\"video\">\nWatch part of this guide in action <em>live</em> within this <a href=\"https://youtu.be/ydpdziVNw1k?t=1175\">Webinar recording</a>.\n</div>\n\n## 1. Installation\n\n<div class=\"note\">\nThis assumes you already have an npm package.\nIf you don't have one yet, create one using <code>npm init</code>.\nYou will also need a JavaScript file to write in, such as <code>main.js</code>.\n</div>\n\nIn order to add Comunica SPARQL as a _dependency_ to your [Node.js](https://nodejs.org/en/) application,\nwe can execute the following command:\n```bash\n$ npm install @comunica/query-sparql\n```\n\n## 2. Creating a new query engine\n\nThe easiest way to create an engine is as follows:\n\n```javascript\nconst QueryEngine = require('@comunica/query-sparql').QueryEngine;\n\nconst myEngine = new QueryEngine();\n```\n\nYou can reuse an engine as often as possible.\nThis is especially valuable if you repeatedly query over the same sources,\nas [caching](/docs/query/advanced/caching/) can be performed. \n\n## 3. Executing SPARQL SELECT queries\n\nOnce you engine has been created, you can use it to execute any SPARQL query, such as a `SELECT` query:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n});\n```\n\nThe first argument of `queryBindings()` is a SPARQL query string,\nand the second argument is a [query context](/docs/query/advanced/context/) containing options,\nwhich must at least contain an array of sources to query over. \n\nThe resulting `bindingsStream` is a stream of **bindings**,\nwhere each binding contains values for the selected variables (`?s ?p ?o`).\n\n<div class=\"note\">\nWhile the <code>sources</code> is the only required option in the query context,\n<a href=\"/docs/query/advanced/context/\">additional options can be passed</a>\nto tweak how the engine executed the query.\n</div>\n\n### 3.1 Consuming binding results as a stream\n\nThe most efficient way to make use of the result,\nis by adding a **data-listener** to the `bindingsStream`:\n```javascript\nbindingsStream.on('data', (binding) => {\n    console.log(binding.toString()); // Quick way to print bindings for testing\n\n    console.log(binding.has('s')); // Will be true\n    \n    // Obtaining values\n    console.log(binding.get('s').value);\n    console.log(binding.get('s').termType);\n    console.log(binding.get('p').value);\n    console.log(binding.get('o').value);\n});\n```\n\nThe data-listener will be invoked _for each resulting binding_,\nas soon as the query engine has detected it.\nThis means that the data-listener can be invoked many times during query execution,\neven if not all results are available yet.\n\nEach `binding` is an [RDF/JS `Bindings`](http://rdf.js.org/query-spec/#bindings-interface) object\nthat contains mappings from variables to RDF terms.\nVariable names can either be obtained by string label (without the `?` prefix) or via [RDF/JS](/docs/query/advanced/rdfjs/) variable objects,\nand bound RDF terms are represented as [RDF/JS](/docs/query/advanced/rdfjs/) terms.\nLearn more about the usage of these bindings objects in the [bindings guide](/docs/query/advanced/bindings/).\n\nTo find out when the query execution has **ended**,\nand all results are passed to the data-listener,\nan **end-listener** can be attached as well.\n```javascript\nbindingsStream.on('end', () => {\n    // The data-listener will not be called anymore once we get here.\n});\n```\n\nIt is also considered good practise to add an **error-listener**,\nso you can detect any problems that have occurred during query execution:\n```javascript\nbindingsStream.on('error', (error) => {\n    console.error(error);\n});\n```\n\n### 3.2 Consuming binding results as an array\n\nIf performance is not an issue in your application,\nor you just want the results in a simple array,\nthen you can call the asynchronous `toArray()` method on the `bindingsStream`:\n\n```javascript\nconst bindings = await bindingsStream.toArray();\n\nconsole.log(bindings[0].get('s').value);\nconsole.log(bindings[0].get('s').termType);\n```\n\nThis method will return asychronously (using `await`) as soon as _all_ results have been found.\nIf you have many results, it is recommended to consume results iteratively via a data listener instead.\n\nEach binding in the array is again an [RDF/JS `Bindings`](http://rdf.js.org/query-spec/#bindings-interface) object.\n\nIf you want to limit the number of results in the array, you can optionally pass a limit:\n```javascript\nconst bindings = await bindingsStream.toArray({ limit: 100 });\n```\n\n## 4. Executing queries over multiple sources\n\nQuerying over more than one source is trivial,\nas any number of sources can easily be passed via an array:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: [\n    'http://fragments.dbpedia.org/2015/en',\n    'https://www.rubensworks.net',\n    'https://ruben.verborgh.org/profile/',\n  ],\n});\n```\n\n## 5. Executing SPARQL CONSTRUCT queries\n\nNext to `SELECT` queries, you can also execute a `CONSTRUCT` query to generate RDF quads/triples:\n```javascript\nconst quadStream = await myEngine.queryQuads(`\n  CONSTRUCT WHERE {\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n```\n\n### 5.1 Consuming quad results as a stream\n\nThe most efficient way to make use of the resulting RDF quads,\nis by adding a **data-listener** to the `quadStream`:\n```javascript\nquadStream.on('data', (quad) => {\n    console.log(quad.subject.value);\n    console.log(quad.predicate.value);\n    console.log(quad.object.value);\n    console.log(quad.graph.value);\n});\n```\n\nThe data-listener will be invoked _for each constructed RDF triple/quad_,\nas soon as the query engine has created it.\nThis means that the data-listener can be invoked many times during query execution,\neven if not all results are available yet.\n\nEach `quad` is an [RDF/JS](/docs/query/advanced/rdfjs/) quad,\nwhich contain `subject`, `predicate`, `object` and `graph` terms.\n\nJust like `bindingsStream`, **end-listener** and **error-listener** can also be attached:\n\n```javascript\nquadStream.on('end', () => {\n    // The data-listener will not be called anymore once we get here.\n});\nquadStream.on('error', (error) => {\n    console.error(error);\n});\n```\n\n### 5.2 Consuming quad results as an array\n\nJust like with binding results,\nif performance is not an issue in your application,\nor you just want the results in a simple array,\nthen you can call the asynchronous `toArray()` method on the `bindingsStream`:\n\n```javascript\nconst quads = await quadStream.toArray();\n\nconsole.log(quads[0].subject.value);\nconsole.log(quads[0].predicate.value);\nconsole.log(quads[0].object.value);\nconsole.log(quads[0].graph.value);\n```\n\nThis method will return asychronously (using `await`) as soon as _all_ results have been found.\nIf you have many results, it is recommended to consume results iteratively via a data listener instead.\n\nEach `quad` is again an [RDF/JS](/docs/query/advanced/rdfjs/) quad,\nwhich contain `subject`, `predicate`, `object` and `graph` terms.\n\n## 6. Executing SPARQL ASK queries\n\nOne of the simplest forms SPARQL is the ASK query,\nwhich can be executed in Comunica as follows:\n```javascript\nconst hasMatches = await myEngine.queryBoolean(`\n  ASK {\n    ?s ?p <http://dbpedia.org/resource/Belgium>\n  }`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n})\n```\n\nThe value of `hasMatches` indicates if the query has at least one result. \n\n## 7. Executing a generic query\n\nIf you don't know beforehand if your query is a `SELECT`, `CONSTRUCT`, or `ASK` (e.g. if your app accepts queries via user input),\nthen you can make use of the generic `query` method that supports all query types:\n```javascript\nconst result = await myEngine.query(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n\nif (result.resultType === 'bindings') {\n    const bindingsStream = await result.execute();\n\n    bindingsStream.on('data', (binding) => {\n        console.log(binding.toString());\n    });\n}\n```\n\nThe resulting object represents a _future_ to the query results.\nIf has a field `resultType` that indicates the query and result type, which can be `'bindings'`, `'quads'`, `'boolean'`, or `'void'`.\nThe asynchronous `execute` method effectively executes the query, and returns a result depending on the `resultType`, corresponding to the `queryBindings`, `queryQuads`, ... methods.\nFor example, if the result type is `'bindings'`, then the return type of `execute` will be a bindings stream.\n\nOptionally, you can also obtain metadata about the results via this `query` method for the `'bindings'` and `'quads'` result types:\n```javascript\nconst result = await myEngine.query(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\n\nif (result.resultType === 'bindings') {\n    const metadata = await result.metadata();\n    console.log(metadata.cardinality);\n    console.log(metadata.canContainUndefs);\n}\n```\n\n## 8. Serializing to a specific result format\n\nIf you want your application to output query results in a certain text-based format,\njust like [executing Comunica on the command line](/docs/query/getting_started/query_cli/),\nthen you can make use of the `resultToString()` method.\n\nFor example, serializing to SPARQL JSON can be done as follows:\n```javascript\nconst result = await myEngine.query(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n});\nconst { data } = await myEngine.resultToString(result,\n  'application/sparql-results+json');\ndata.pipe(process.stdout); // Print to standard output\n```\n\nThe `resultToString()` method accepts a query result and a result format media type.\nThe media type is optional, and will default to `application/json` for bindings, `application/trig` for quads, and `simple` for booleans.\n\n<div class=\"note\">\n<a href=\"/docs/query/advanced/result_formats/\">All available result formats</a> can be retrieved programmatically\nby invoking the asynchronous <code>getResultMediaTypes()</code> method.\n</div>\n"},Ji7U:function(e,n,t){"use strict";function a(e,n){return(a=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function o(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&a(e,n)}t.d(n,"a",(function(){return o}))},K1ps:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Release 1.21.0: Hypermedia-based SPARQL Updating'\n---\n\nThe 1.21.0 version is a smaller release,\nthat mainly introduces the necessary wiring to enable hypermedia-driven SPARQL update querying,\nwhich lays the foundations for highly flexible updating of heterogeneous destinations, such as Solid data pods.\n\nIn other words, this provides the necessary \u2728_magic_\u2728 for updating many different types of things.  \n\n\x3c!-- excerpt-end --\x3e\n\n## Hypermedia-based updates\n\nA key feature of Comunica is its ability to [automatically detect the type of source via hypermedia](/docs/modify/advanced/hypermedia/),\nand alter its query process based on the source's capabilities.\nWith this new update, this hypermedia-based logic has also been added to the handling of update queries.\n\nConcretely, if you pass a destination by URL to Comunica,\nthe capabilities of this destination will be detected,\nand an appropriate destination handler will be used.\n\nWith this update, we provide support for [a single hypermedia destination type](/docs/query/advanced/destination_types/):\nthe [SPARQL Update-based PATCH API](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-update-hypermedia-patch-sparql-update).\nSuch a destination is an HTTP APIs accepting PATCH requests containing SPARQL Update queries (`application/sparql-update`),\nsuch as [Solid servers](https://github.com/solid/solid-spec/blob/master/api-rest.md#alternative-using-sparql-1).\n\nIn future updates, we intend to support more types of hypermedia-based destinations as well,\nsuch as [SPARQL endpoints](https://www.w3.org/TR/2013/REC-sparql11-protocol-20130321/),\nand [Linked Data Platform](https://www.w3.org/TR/ldp/).\n\nLearn more about updating from the [command line](/docs/query/getting_started/update_cli/)\nor from a [JavaScript application](/docs/query/getting_started/update_app/) in the documentation. \n\n## Features, fixes and enhancements\n\nNext to the changes above, several minor features, fixes and enhancements were applied,\nsuch as [more expressive configuration of JSON-LD parsing](https://github.com/comunica/comunica/commit/199710d70b01d22ea40fe5e12e16a9d8800f32fc),\nproper [CLI exit codes](https://github.com/comunica/comunica/commit/00aa446cc8d2fd713711787b8a59f45c266947ea),\nand [changing the context in the `optimize-query-operation` bus](https://github.com/comunica/comunica/commit/81373206a17d0fcb8d3af701e5266287113d545c).\nCheck out the [full changelog](https://github.com/comunica/comunica/blob/master/CHANGELOG.md#v1210---2021-04-27) to read more about them.\n"},KaIB:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Modify Comunica'\ndescription: 'Learn how to configure your own Comunica engine, or extend Comunica by implementing new components.'\nindex: true\n---\n\nThe following guides show how to configure your own Comunica engine, or extend Comunica by implementing new components.\nIf you want to see some full examples,\nhave a look at our dedicated [examples repository](https://github.com/comunica/examples).\n"},"L+/e":function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Updating in a JavaScript app\'\ndescription: \'Execute SPARQL Update queries from within your application using the JavaScript API.\'\n---\n\nComunica SPARQL (`@comunica/query-sparql`) allow you to initiate queries to _update_ data in a certain store.\nIn this guide, we will build upon [the guide on querying in a JavaScript app](/docs/query/getting_started/query_app/),\nand show how you can not only read, but also update data.\n\n## 1. Creating a new query engine and store\n\nThe easiest way to create an engine and store is as follows:\n\n```javascript\nconst QueryEngine = require(\'@comunica/query-sparql\').QueryEngine;\nconst N3 = require(\'n3\');\n\nconst myEngine = new QueryEngine();\n\nconst store = new N3.Store();\n```\n\nWe make use of the [`Store` from `N3.js`](https://github.com/rdfjs/N3.js#storing) for these examples.\n\n## 2. Executing INSERT DATA queries\n\nOnce you engine has been created, you can use it to execute any SPARQL Update query, such as a `INSERT DATA` query:\n```javascript\n// Initiate the update\nawait myEngine.queryVoid(`\n  PREFIX dc: <http://purl.org/dc/elements/1.1/>\n  INSERT DATA\n  { \n    <http://example/book1> dc:title "A new book" ;\n                           dc:creator "A.N.Other" .\n  }`, {\n  sources: [ store ],\n});\n\n// Prints \'2\' => the store is updated\nconsole.log(store.size);\n```\n\n## 3. Executing DELETE/INSERT WHERE queries\n\n`DELETE/INSERT WHERE` queries allow you to delete and insert new quads,\nbased on quads that are already available:\n\n```javascript\n// Insert initial data\nawait myEngine.queryVoid(`\n  PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n  INSERT DATA\n  { \n    <http://example/president25> foaf:givenName "Bill" .\n    <http://example/president25> foaf:familyName "McKinley" .\n    <http://example/president27> foaf:givenName "Bill" .\n    <http://example/president27> foaf:familyName "Taft" .\n    <http://example/president42> foaf:givenName "Bill" .\n    <http://example/president42> foaf:familyName "Clinton" .\n  }`, {\n  sources: [ store ],\n});\n\n// Rename all occurrences of "Bill" to "William"\nawait myEngine.queryVoid(`\n  PREFIX foaf:  <http://xmlns.com/foaf/0.1/>\n  DELETE { ?person foaf:givenName \'Bill\' }\n  INSERT { ?person foaf:givenName \'William\' }\n  WHERE\n  {\n    ?person foaf:givenName \'Bill\' \n  }`, {\n  sources: [ store ],\n});\n```\n\n<div class="note">\nFor more information on the types of update queries that are possible, \nplease refer to the <a href="https://www.w3.org/TR/sparql11-update/">SPARQL Update specification</a>.\n</div>\n\n## 4. Configure a custom destination\n\nBy default, update queries will modify data within the given source.\nIn some cases, you may want to direct changes to another place.\nFor example, if you have multiple sources, but you want to direct all changes to a single source.\n\nThis can be done by passing a `destination` into the query context:\n```javascript\n// Insert friends based on common friends from Ruben\'s\nawait myEngine.queryVoid(`\n  PREFIX foaf:  <http://xmlns.com/foaf/0.1/>\n  INSERT\n  {\n    <http://example/person> foaf:knows ?friend\n  }\n  WHERE\n  {\n    <https://www.rubensworks.net/#me> foaf:knows ?friend .\n    <https://ruben.verborgh.org/profile/#me> foaf:knows ?friend . \n  }`, {\n  sources: [\n    \'https://www.rubensworks.net/\',\n    \'https://ruben.verborgh.org/profile/\',\n  ],\n  destination: store,\n});\n```\n\n<div class="note">\nInstead of passing an RDF/JS store as destination,\nyou may also pass <a href="/docs/query/advanced/destination_types/">other types of destinations</a>.  \n</div>\n'},LFvy:function(e,n,t){"use strict";var a=t("hyoZ");e.exports=new a("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return null!==e?e:""}})},Ljib:function(e,n,t){"use strict";var a=t("hyoZ");e.exports=new a("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return null!==e?e:{}}})},MERt:function(e,n,t){"use strict";var a=t("hyoZ");e.exports=new a("tag:yaml.org,2002:js/undefined",{kind:"scalar",resolve:function(){return!0},construct:function(){},predicate:function(e){return"undefined"===typeof e},represent:function(){return""}})},MNrr:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Updating RDF/JS stores\'\ndescription: \'If the built-in destination types are not sufficient, you can pass a custom JavaScript object implementing a specific interface.\'\n---\n\nOne of the [different types of destinations](/docs/query/advanced/destination_types/) that is supported by Comunica\nis the [RDF/JS `Store` interface](http://rdf.js.org/stream-spec/#store-interface).\nThis allows you to pass objects as destination to Comunica as long as they implement this interface.\n\n<div class="note">\nLearn more about RDF/JS in this <a href="/docs/query/advanced/rdfjs/">RDF/JS guide</a>.\n</div>\n\nSeveral implementations of this `Store` interface exist.\nIn the example below, we make use of the [`Store` from `N3.js`](https://github.com/rdfjs/N3.js#storing)\nthat offers one possible implementation when you want to [query over it with Comunica within a JavaScript application](/docs/query/getting_started/query_app/):\n```javascript\nconst store = new N3.Store();\n\nconst query = `\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nINSERT DATA\n{ \n  <http://example/book1> dc:title "A new book" ;\n                         dc:creator "A.N.Other" .\n}\n`;\n\n// Execute the update\nawait myEngine.queryVoid(query, {\n  sources: [store],\n});\n\n// Prints \'2\' => the store is updated\nconsole.log(store.size);\n```\n'},MSYD:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Advanced modification'\ndescription: 'Advanced guides on how to get the most out of Comunica modification.'\nindex: true\n---\n"},NYKf:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Sparqlee'\ndescription: 'The SPARQL expression evaluation engine of Comunica.'\n---\n\nSparqlee is an [open-source](https://github.com/comunica/sparqlee) SPARQL 1.1 expression engine\nthat is used by different Comunica actors for evaluating expressions.\n\nConcretely, the following actors make us of this:\n* [`@comunica/actor-query-operation-extend`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-extend): Implements the extend operator.\n* [`@comunica/actor-query-operation-filter-sparqlee`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-filter-sparqlee): Implements the filter operator.\n* [`@comunica/actor-query-operation-group`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-group): Implements the group operator.\n* [`@comunica/actor-query-operation-leftjoin`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-leftjoin): Implements the left join operator.\n* [`@comunica/actor-query-operation-orderby-sparqlee`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-extend): Implements the order by operator.\n"},NceB:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Getting started with modification'\ndescription: 'Basic guides on how to easily get started with Comunica modification.'\nindex: true\n---\n"},Njqi:function(e,n,t){"use strict";var a;try{a=t("+U4B")}catch(i){"undefined"!==typeof window&&(a=window.esprima)}var o=t("hyoZ");e.exports=new o("tag:yaml.org,2002:js/function",{kind:"scalar",resolve:function(e){if(null===e)return!1;try{var n="("+e+")",t=a.parse(n,{range:!0});return"Program"===t.type&&1===t.body.length&&"ExpressionStatement"===t.body[0].type&&("ArrowFunctionExpression"===t.body[0].expression.type||"FunctionExpression"===t.body[0].expression.type)}catch(o){return!1}},construct:function(e){var n,t="("+e+")",o=a.parse(t,{range:!0}),i=[];if("Program"!==o.type||1!==o.body.length||"ExpressionStatement"!==o.body[0].type||"ArrowFunctionExpression"!==o.body[0].expression.type&&"FunctionExpression"!==o.body[0].expression.type)throw new Error("Failed to resolve function");return o.body[0].expression.params.forEach((function(e){i.push(e.name)})),n=o.body[0].expression.body.range,"BlockStatement"===o.body[0].expression.body.type?new Function(i,t.slice(n[0]+1,n[1]-1)):new Function(i,"return "+t.slice(n[0],n[1]))},predicate:function(e){return"[object Function]"===Object.prototype.toString.call(e)},represent:function(e){return e.toString()}})},OHH1:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'HTTP Proxy'\ndescription: 'All HTTP requests can optionally go through a proxy.'\n---\n\nOptionally, you can configure a proxy to redirect all HTTP(S) traffic.\nThis is for example useful when Comunica is used in a Web browser\nwhere a [proxy enables CORS headers on all responses](https://www.npmjs.com/package/cors-anywhere).\n\n## Proxying on the command line\n\nVia the command line, a proxy can be enabled via the `-p` option as follows:\n```bash\n$ comunica-sparql http://fragments.dbpedia.org/2015-10/en \"SELECT * WHERE { ?s ?p ?o }\" \\\n  -p http://myproxy.org/?uri=\n```\n\n## Proxying in an application\n\nWhen using [Comunica SPARQL in an application](/docs/query/getting_started/query_app/), a proxy can be set using the `httpProxyHandler` [context entry](/docs/query/advanced/context/):\n```javascript\nimport { ProxyHandlerStatic } from \"@comunica/actor-http-proxy\";\n\nconst bindingsStream = await myEngine.queryBindings('SELECT * WHERE { ?s ?p ?o }', {\n  sources: ['http://fragments.dbpedia.org/2015/en'],\n  httpProxyHandler: new ProxyHandlerStatic('http://myproxy.org/?uri='),\n});\n```\n\nIn the example above, a `ProxyHandlerStatic` is passed,\nwhich will simply put the URL `http://myproxy.org/?uri=` in front of all URLs that would be requested.\n\nIf you need a more advanced proxy behaviour,\nthen you can implement your own proxy handler.\nAll proxy handlers must implement the [`IProxyHandler` interface](https://github.com/comunica/comunica/blob/master/packages/actor-http-proxy/lib/IProxyHandler.ts).\n"},Of3P:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Querying FAQ'\ndescription: 'Frequently asked questions about using Comunica.'\n---\n\nFeel free to [ask us](/ask/), or have a look at the\n[example](https://github.com/comunica/examples) repository.\n\n## How can I query over RDF documents on my local file system?\n\nInstead of using Comunica SPARQL, you can use [Comunica SPARQL File](/docs/query/getting_started/query_cli_file/)\nto query over files on your local file system.\n\nComunica SPARQL by default does not allow you to query over local file for security reasons.\n\n## How to query over sources in memory?\n\n[Comunica SPARQL RDF/JS](/docs/query/advanced/rdfjs_querying/) can be used for in-memory querying.\n\n## How are result bindings and quads represented in JavaScript?\n\nSELECT query results will be contained in a `bindingsStream`,\nwhere each data element is a `Binding`.\nEach `binding` is an [RDF/JS `Bindings`](http://rdf.js.org/query-spec/#bindings-interface) object\nthat contains mappings from variables to RDF terms.\nVariable names can either be obtained by string label (without the `?` prefix) or via [RDF/JS](/docs/query/advanced/rdfjs/) variable objects,\nand bound RDF terms are represented as [RDF/JS](/docs/query/advanced/rdfjs/) terms.\nFor example:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT ...`, {...});\nbindingsStream.on('data', (binding) => {\n    console.log(binding.get('s').value);\n    console.log(binding.get('s').termType);\n});\n```\nLearn more about the usage of these bindings objects in the [bindings guide](/docs/query/advanced/bindings/).\n\nCONSTRUCT query results will be contained in a `quadStream`,\nwhere each data element is an [RDF/JS](/docs/query/advanced/rdfjs/) quad.\nFor example:\n```javascript\nconst quadStream = await myEngine.queryQuads(`CONSTRUCT ...`, {...});\nquadStream.on('data', (quad) => {\n    console.log(quad.subject.value);\n    console.log(quad.predicate.value);\n    console.log(quad.object.value);\n    console.log(quad.graph.value);\n});\n```\n\nRead more about this in the [guide om executing SPARQL queries in JavaScript applications](/docs/query/getting_started/query_app/).\n\n## What datastructure is behind `bindingsStream` and `quadStream`?\n\nQuery results can be returned via `bindingsStream` (SELECT queries) and `quadStream` (CONSTRUCT) queries.\n\nThese streams are backed by an [AsyncIterator](https://github.com/RubenVerborgh/AsyncIterator),\nwhich is a lightweight JavaScript implementation of demand-driven object streams.\nAs opposed to Node's `Stream`, you cannot push anything into an `AsyncIterator`;\ninstead, an iterator pulls things from another iterator.\n\nFurthermore, these streams are _lazy_,\nwhich means that the results will only be calculated once you request them,\nand an `'end'` event will only be emitted when all of them have been consumed.\n\n## I need a specific feature, how do I get it into Comunica?\n\nSince Comunica is an open-source project,\nthe best way to get new features in, is by [contributing yourself](/contribute/).\n\nAlternatively, you can delegate implementation work to a third-party via the [Comunica Association](/association/).\n\n## How to measure query performance with Comunica?\n\n### Simple statistics\n\nThe easiest way to get statistics on the performance of a specific query\nis by using the `'stats'` [result format](/docs/query/advanced/result_formats/).\nThis will print the number of results, their delay from query start,\nand the number of HTTP requests that have been executed up until the result was available.\n\nFor example, stats can be printed via the command line as follows:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    -t stats \\\n    'SELECT * WHERE { ?s ?p ?o } LIMIT 10'\nResult,Delay (ms),HTTP requests\n1,265.488428,2\n2,265.7177,2\n3,265.889677,2\n4,266.141152,2\n5,266.332423,2\n6,266.496283,2\n7,266.674167,2\n8,266.861855,2\n9,268.330294,2\n10,268.51177,2\nTOTAL,268.816168,2\n```\n\n### Enabling production-mode\n\nIf you want to do benchmarking with Comunica in Node.js, make sure to run Node.js in production mode as follows:\n\n```\n$ NODE_ENV=production comunica-sparql ...\n```\n\nThe reason for this is that Comunica extensively generates internal Error objects. In non-production mode, these also produce long stacktraces, which may in some cases impact performance.\n\n### More advanced experiments\n\nA more advanced tool for setting up large-scale reproducible Comunica experiments is [Comunica Bencher](https://github.com/comunica/comunica-bencher).\n"},Oq3b:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'2022-09-07: Comunica Association Launch\'\ndescription: \'An online event for the official launch of the Comunica Association\'\n---\n\nOn [Wednesday 7 September 16:00 (Brussels time)](https://www.timeanddate.com/worldclock/converter.html?iso=20220907T160000&p1=48),\nthe official launch of the [Comunica Association](/association/) takes place online as a digital event.\n\nDuring this event, several invited speakers from various companies will talk about their experiences with Comunica, and show off some demo\'s.\n\nThis event will be open for everyone to watch.\nIf you want to be notified about updates (such as when the livestream link becomes available),\n**be sure to [register for free](https://www.eventbrite.com/e/comunica-association-launch-tickets-383969391787)**.\n\nIn the week after this event, we will be physically attending the [Semantics conference](/events/2022-09-13-semantics_conference/),\nwhere we will have a booth and talk at the main conference.\n\n## Watch live\n\nFollow the launch event live on Wednesday 7 September at 16:00 (Brussels time).\nYou can either watch on this page, or on [YouTube](https://www.youtube.com/watch?v=seXvRI-XtiM).\n\n<center>\n<iframe width="560" height="315" src="https://www.youtube.com/embed/seXvRI-XtiM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n</center>\n\n## Schedule\n\nBelow, you can find the preliminary schedule of the launch event.\n\n_Additional speakers will be announced soon._\n\n### Using Comunica for building foundational heritage network services\n\n*By [David de Boer](https://github.com/ddeboer) - [Dutch Digital Heritage Network (NDE)](https://netwerkdigitaalerfgoed.nl/)*\n\n<p>\n<img src="https://avatars.githubusercontent.com/u/89267?v=4" alt="David de Boer" class="events-speaker-img" />\nAt the Dutch Digital Heritage Network we\u2019ve been building services that facilitate the discovery, use and sharing of linked data. Two examples are a realtime federated search engine (Network of Terms) and a dataset index (Dataset Register). Comunica is a great tool that allows us to efficiently query a variety of RDF sources. Plans for the future include a browser-based version and better support for fulltext SPARQL. These require some changes in Comunica, so I\u2019ll take the opportunity to plug our wishlist.\n</p>\n\n### Building a linked data multi-store with Comunica Association components\n\n*By [Wouter Beek](https://github.com/wouterbeek/) - [Triply B.V.](https://triply.cc/)*\n\n<p>\n<img src="https://nightly.triplydb.com/imgs/logos/logo-lg.svg?v=3" alt="Triply B.V." class="events-speaker-img" />\nTriplyDB is a commercial multi-store that offers a wide variety of\nservices over linked data knowledge graphs.\nServices include Comunica Association components like Linked Data\nFragments, Linked Data Event Streams, and the Comunica SPARQL engine.\nIn this talk we show how Comunica Association components can be used\nto strengthen the offering of commercial linked data products.\n</p>\n\n### Using Comunica to query Pods hosted on PodSpaces 2.0\n\n*By [Nicolas Mondada](https://github.com/nicolasmondada/) - Product Manager at [Inrupt](https://inrupt.com/)*\n\n<p>\n<img src="https://inrupt.com/static/footer-logo-770e76798431e454ca96c5bcc33b502f.png" alt="Inrupt" class="events-speaker-img" />\nWe see Comunica as a great example of the growing Linked Data and Solid developer community and that\'s why we actively contribute to it. In particular, we find it to be a great showcase for querying Solid Pods.\nWe recently released an update that allows Comunica to query Pods in PodSpaces 2.0 and we are looking forward to continue our commitment to Comunica and the rest of the Solid community.\nWe are going to demo using Comunica to query Pods hosted on PodSpaces 2.0.\n</p>\n\n### The more you know - easy access to enriched RDF using LDflex + Comunica\n\n*By [Jesse Wright](https://github.com/jeswr/)*\n\n<p>\n<img src="https://avatars.githubusercontent.com/u/63333554?v=4" alt="Jesse Wright" class="events-speaker-img" />\nClient side query and RDF reasoning has the compacity to unlock a plethora of powerful Web applications. In this talk we demonstrate how Comunica can be used to quickly query across multiple decentralised data sources and receive results that have been enriched RDF reasoning in real-time. We will dive into real-world applications and demonstrate the power of Comunica and LDflex in creating rich user apps with minimal code.\n</p>\n\n### A querying SDK from research to practice\n\n*By [Pieter Colpaert](https://pietercolpaert.be/) - [IDLab - Ghent University](https://knows.idlab.ugent.be/)*\n\n<p>\n<img src="https://pietercolpaert.be/img/pc.jpg" alt="Pieter Colpaert" class="events-speaker-img" />\nComunica was conceived within IDLab as a next generation Linked Data Fragments client, that would be able to query over heterogeneous data sources. It has now grown into our flagship product that we certainly don\u2019t want to keep only within academic mids. We believe a Comunica Association is the right step forward to also involve other universities, industry and start-ups, governments and hobbyists into a true quadruple helix collaboration. Today, we use Comunica ourselves to build a governmental data space, and as the querying engine behind Solid applications.\n</p>\n'},P4my:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Official launch of the Comunica Association'\n---\n\nAs previously announced, we will be officially launching the Comunica Association during the fall of this year.\nMore concretely, we are organizing an online launch event on the 7th of September,\nand we will be physically present at the Semantics conference in Vienna the week afterwards.\n\n\x3c!-- excerpt-end --\x3e\n\n## \ud83d\udcd6 How we got here\n\nLast year, [we announced the Comunica Association](/blog/2021-06-21-comunica_association_bounties/),\nto make Comunica sustainable in the long-term,\nand to advance the [long-term roadmap](/roadmap/).\nUp until now, we had soft-launch period during which a bounty program and membership structure was being setup.\nThe association has grown a lot since then,\nwith [multiple developers actively working on bounties](/association/bounties/),\nand [multiple contributors supporting us via Open Collective](https://opencollective.com/comunica-association).\n\nWe thank the following founding members, which have supported the association for this launch:\n\n- [IDLab - Ghent University](https://www.ugent.be/ea/idlab/en)\n- [Australian National University](https://cecs.anu.edu.au)\n- [Dutch Digital Heritage Network (NDE)](https://netwerkdigitaalerfgoed.nl/)\n\n## \ud83d\ude80 Online launch event\n\nWednesday 7 September 16:00 (Brussels time), we will livestream the launch of the Comunica Association.\nDuring this event, several invited speakers from various companies will talk about their experiences with Comunica, and show off some demo's.\nSpeaker profiles during this event range from commercial users of Comunica,\nto academics using Comunica for their research.\n\nIf you want to learn more about this event,\nyou can find more details on the [event page](/events/2022-09-07-association_launch/).\n\n## \ud83e\uddd1\u200d\ud83c\udfeb Semantics conference\n\nIn the week after the online launch event,\nthe [Semantics conference](https://2022-eu.semantics.cc/) takes place in Vienna, Austria from September 13 until September 15.\nWe will be preset at this conference with a booth and give a talk at the main conference.\nIf you plan to attend this conference, be sure to come find us there! \n"},P4uI:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Custom CLI arguments'\ndescription: 'Adding custom arguments to CLI tools'\n---\n\nAs explained within the guide to [expose your custom config as an npm package](/docs/modify/getting_started/custom_init/),\ncustom command line tools can be created as follows:\n\n`bin/query.js`:\n```typescript\n#!/usr/bin/env node\nimport { runArgsInProcessStatic } from '@comunica/runner-cli';\nrunArgsInProcessStatic(require('../engine-default.js'));\n```\n\n`bin/http.js`:\n```typescript\n#!/usr/bin/env node\nimport { HttpServiceSparqlEndpoint } from '@comunica/actor-init-query';\nconst defaultConfigPath = `${__dirname}/../config/config-default.json`;\nHttpServiceSparqlEndpoint.runArgsInProcess(process.argv.slice(2), process.stdout, process.stderr, `${__dirname}/../`, process.env, defaultConfigPath, code => process.exit(code))\n  .catch(error => process.stderr.write(`${error.message}/n`));\n```\n\n`bin/query-dynamic.js`:\n```typescript\n#!/usr/bin/env node\nimport { runArgsInProcess } from '@comunica/runner-cli';\nrunArgsInProcess(`${__dirname}/../`, `${__dirname}/../config/config-default.json`);\n```\n\nThis will cause the built-in CLI arguments from `comunica-sparql` to be inherited.\nIt is however also possible to _extend_ these arguments so that you can add additional ones,\nwhich can be processed in any way.\n\n## Creating CLI Arguments Handlers\n\nThis argument handling can be done using one or more instances of [`ICliArgsHandler`](https://comunica.github.io/comunica/interfaces/actor_init_query.ICliArgsHandler.html),\nwhich may be implemented as follows:\n```typescript\nexport class MyCliArgsHandler implements ICliArgsHandler {\n  public populateYargs(argumentsBuilder: Argv<any>): Argv<any> {\n    return argumentsBuilder\n      .options({\n        myOption: {\n          alias: 'm',\n          type: 'string',\n          describe: 'Just some option',\n          default: 'A default value',\n        },\n      });\n  }\n\n  public async handleArgs(args: Record<string, any>, context: Record<string, any>): Promise<void> {\n    context['this-is-a-context-key'] = args.myOption;\n  }\n}\n```\n\nThe `populateYargs` method allows you to declare options within the `argumentsBuilder` using the [yargs API](https://www.npmjs.com/package/yargs).\nThen, the `handleArgs` is invoked after the CLI tool has been invoked with some options,\nso that you can extract the defined option, and modify the [query context](/docs/query/advanced/context/) if needed (which is still mutable at this stage).\n\n## Passing CLI Arguments Handlers\n\nThen, in order to pass your instances of `ICliArgsHandler` to the CLI tools,\nyou can do this as follows:\n\n`bin/query.js`:\n```typescript\n#!/usr/bin/env node\nimport { runArgsInProcessStatic } from \"@comunica/runner-cli\";\nimport { KeysInitSparql } from '@comunica/context-entries';\nimport { ActionContext } from '@comunica/core';\nrunArgsInProcessStatic(require('../engine-default.js'), {\n  context: ActionContext({\n    [KeysInitSparql.cliArgsHandlers]: [ new MyCliArgsHandler() ],\n  }),\n});\n```\n\n`bin/http.js`:\n```typescript\n#!/usr/bin/env node\nimport {HttpServiceSparqlEndpoint} from \"@comunica/query-sparql\";\nHttpServiceSparqlEndpoint.runArgsInProcess(process.argv.slice(2), process.stdout, process.stderr,\n  __dirname + '/../', process.env, __dirname + '/../config/config-default.json', () => process.exit(1), [ new MyCliArgsHandler() ]);\n```\n\n`bin/query-dynamic.js`:\n```typescript\n#!/usr/bin/env node\nimport { runArgsInProcess } from \"@comunica/runner-cli\";\nimport { KeysInitSparql } from '@comunica/context-entries';\nimport { ActionContext } from '@comunica/core';\nrunArgsInProcess(__dirname + '/../', __dirname + '/../config/config-default.json', {\n  context: ActionContext({\n    [KeysInitSparql.cliArgsHandlers]: [ new MyCliArgsHandler() ],\n  }),\n});\n```\n"},Pav7:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'2019-06-03: Tutorial at ESWC 2019\'\ndescription: \'Comunica tutorial at the ESWC 2019 conference\'\n---\n\n<div class="docs-intro-img">\n  <a href="https://2019.eswc-conferences.org/"><img src="https://2019.eswc-conferences.org/wp-content/uploads/2018/11/ESWC2019-image-e1543238752266.png" alt="ESWC 2019" style="width:50%" /></a>\n</div>\n\nOn June 3rd 2019, a tutorial about Comunica was given at the ESWC 2019 conference, in Portoroz, Slovenia.\n\nAll materials and slides can be found on [the tutorial\'s web page](https://comunica.github.io/Tutorial-ESWC2019-Comunica/).\n'},Pcej:function(e,n,t){"use strict";var a=t("7104"),o=t("z08I");function i(e,n){return e.slice(0,n.length)===n&&e.charAt(n.length+1)!==n.slice(-1)}function r(e){return e}e.exports=function(e,n){"function"===typeof n&&(n={parse:n});var t=function(e){"object"!==a(e)&&(e={content:e});if("string"!==typeof e.content&&!function(e){if(e&&e.constructor&&"function"===typeof e.constructor.isBuffer)return e.constructor.isBuffer(e);return!1}(e.content))throw new TypeError("expected a buffer or string");return e.content=e.content.toString(),e.sections=[],e}(e),s=o({},{section_delimiter:"---",parse:r},n),c=s.section_delimiter,u=t.content.split(/\r?\n/),l=null,d={key:"",data:"",content:""},p=[],h=[];function m(e){t.content=e,l=[],p=[]}function f(e){h.length&&(d.key=function(e,n){return e?e.slice(n.length).trim():""}(h[0],c),d.content=e,s.parse(d,l),l.push(d),d={key:"",data:"",content:""},p=[],h=[])}for(var g=0;g<u.length;g++){var y=u[g],b=h.length,w=y.trim();if(i(w,c)){if(3===w.length&&0!==g){if(0===b||2===b){p.push(y);continue}h.push(w),d.data=p.join("\n"),p=[];continue}null===l&&m(p.join("\n")),2===b&&f(p.join("\n")),h.push(w)}else p.push(y)}return null===l?m(p.join("\n")):f(p.join("\n")),t.sections=l,t}},Pe6h:function(e,n,t){"use strict";var a=t("Y2Yi"),o=t("hyoZ"),i=new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");var r=/^[-+]?[0-9]+e/;e.exports=new o("tag:yaml.org,2002:float",{kind:"scalar",resolve:function(e){return null!==e&&!(!i.test(e)||"_"===e[e.length-1])},construct:function(e){var n,t,a,o;return t="-"===(n=e.replace(/_/g,"").toLowerCase())[0]?-1:1,o=[],"+-".indexOf(n[0])>=0&&(n=n.slice(1)),".inf"===n?1===t?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===n?NaN:n.indexOf(":")>=0?(n.split(":").forEach((function(e){o.unshift(parseFloat(e,10))})),n=0,a=1,o.forEach((function(e){n+=e*a,a*=60})),t*n):t*parseFloat(n,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&(e%1!==0||a.isNegativeZero(e))},represent:function(e,n){var t;if(isNaN(e))switch(n){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(n){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(n){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(a.isNegativeZero(e))return"-0.0";return t=e.toString(10),r.test(t)?t.replace("e",".e"):t},defaultStyle:"lowercase"})},Q9oK:function(e,n,t){"use strict";const a=t("7104"),o=t("8Qj+"),i=t("X+87");e.exports=function(e){return"object"!==a(e)&&(e={content:e}),"object"!==a(e.data)&&(e.data={}),e.contents&&null==e.content&&(e.content=e.contents),i.define(e,"orig",i.toBuffer(e.content)),i.define(e,"language",e.language||""),i.define(e,"matter",e.matter||""),i.define(e,"stringify",(function(n,t){return t&&t.language&&(e.language=t.language),o(e,n,t)})),e.content=i.toString(e.content),e.isEmpty=!1,e.excerpt="",e}},Qnqd:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Bounty Procedures\'\ndescription: \'The process for handling bounties on issues\'\n---\n\nThis page explains how <span class="bounty-company">companies</span> can place bounties on issues,\nhow <span class="bounty-dev">developers</span> can work on them,\nand how the <span class="bounty-assoc">[Comunica Association](/association/)</span> manages such bounties.\n\n## Placing a bounty\n\n<span class="bounty-company">Companies</span> (or other types of organizations) that are interested in placing bounties on issues (features requests, bug reports, ...) must follow this procedure:\n\n1. <span class="bounty-company">Company</span> lets the <span class="bounty-assoc">association</span> know they are interested in placing a bounty on an issue, by <a href="mailto:ruben.taelman@ugent.be?subject=I want to place a bounty">mailing us</a>.\n2. The <span class="bounty-assoc">association</span> finds one or more suitable <span class="bounty-dev">developers</span>, and reports back to the <span class="bounty-company">company</span> on their expected time frame and cost.\n3. All parties (<span class="bounty-assoc">association</span>, <span class="bounty-company">company</span>, <span class="bounty-dev">developer</span>) negotiate the final time frame and cost, after which one <span class="bounty-dev">developer</span> is assigned to the issue (if all parties agree).\n4. The <span class="bounty-company">company</span> pays the full bounty cost to the <span class="bounty-assoc">association</span>, from which the <span class="bounty-assoc">association</span> claims an overhead of 15%.\n5. After completion (or when the reserved time runs out), all parties (<span class="bounty-assoc">association</span>, <span class="bounty-company">company</span>, <span class="bounty-dev">developer</span>) evaluate the work.\n6. The <span class="bounty-assoc">association</span> pays the bounty to the developer (minus 15% overhead).\n\n## Working on a bounty\n\n<span class="bounty-dev">Developers</span> that are interested in working on issue bounties must follow this procedure:\n\n1. Based on the [list of bounties](/association/bounties/), <span class="bounty-dev">developers</span> can click on any issue to notify the association that they are interested in working on this issue.\n2. The <span class="bounty-assoc">association</span> discusses with the developer to learn about previous experiences, and what the expected time frame and at what price the <span class="bounty-dev">developer</span> is willing to work for.\n3. If the <span class="bounty-company">company</span> agrees with the <span class="bounty-dev">developer\'s</span> conditions, they jointly negotiate the final time frame and cost, after which the <span class="bounty-dev">developer</span> is assigned to the issue (if all parties agree), and the <span class="bounty-dev">developer</span> can start the work.\n4. After completion (or when the reserved time runs out), the <span class="bounty-dev">developer</span> presents the work to the <span class="bounty-company">company</span> and the <span class="bounty-assoc">association</span> for evaluation.\n5. The <span class="bounty-assoc">association</span> pays the bounty to the developer (minus 15% overhead).\n\n**The developer should not start working on the issue, before the <span class="bounty-company">company</span> and <span class="bounty-assoc">association</span> have confirmed the assignment.**\n\n## Management of bounties\n\nThe <span class="bounty-assoc">association</span> manages issues as follows:\n\n1. A <span class="bounty-company">company</span> sends a mail to the <span class="bounty-assoc">association</span> to place a bounty on one or more issues.\n2. The <span class="bounty-assoc">association</span> marks the issue with the `comunica-association-bounty` label, and adds a footer to the issue to mark that a bounty has been placed, after which the issue will appear automatically in [the list of bounties](/association/bounties/). Optionally, a budget for the bounty can be added.\n3. If applicable, the <span class="bounty-assoc">association</span> directly contacts potentially interested developers.\n4. The <span class="bounty-assoc">association</span> awaits offers from <span class="bounty-dev">developers</span> with their estimated time frame and cost.\n5. Depending on the urgency of the issue, the <span class="bounty-assoc">association</span> sends all offers from <span class="bounty-dev">developers</span> to the <span class="bounty-company">company</span>, together with any previous experiences the <span class="bounty-assoc">association</span> had with each <span class="bounty-dev">developer</span>.\n6. The <span class="bounty-company">company</span> and <span class="bounty-assoc">association</span> negotiate with at least one <span class="bounty-dev">developer</span> to agree on a fixed time frame and cost (taking into account the 15% overhead).\n7. The <span class="bounty-assoc">association</span> sends an invoice to the <span class="bounty-company">company</span> for the agreed upon price.\n8. After payment of the invoice, the <span class="bounty-dev">developer</span> can start with the work.\n9. The <span class="bounty-assoc">association</span> assigns the issue to the <span class="bounty-dev">developer</span>, which will make the issue marked as *"claimed"* in [the list of bounties](/association/bounties/).\n10. Once the deadline is reached, the <span class="bounty-assoc">association</span> contacts the <span class="bounty-company">company</span> and <span class="bounty-dev">developer</span> to schedule a review meeting.\n11. During the review meeting, all parties discuss the outcome, and potential next steps.\n12. The <span class="bounty-assoc">association</span> pays the bounty to the developer (minus 15% overhead).\n\nDepending on the specific needs of certain issues or use cases, deviations from these procedures may take place.\n\n## Rules\n\nWhile anyone is allowed to take up bounties, if board members want to take up bounties, all other board members have to agree, to avoid conflicts of interest.\n'},R7CN:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Caching'\ndescription: 'When remote sources are requested, caching allows them to be reused in the future.'\n---\n\nWhen remote documents are fetched over HTTP, a Comunica engine can cache documents to optimize future reuse.\nIf [your application](/docs/query/getting_started/query_app/) works over volatile resources, then you may want to invalidate this cache,\nwhich can be done as follows:\n\n```javascript\n// Invalidate the full cache\nmyEngine.invalidateHttpCache();\n\n// Invalidate a single document\nmyEngine.invalidateHttpCache('http://example.org/page.html');\n```\n"},RSjF:function(e,n,t){"use strict";var a=t("3lC6");e.exports=new a({include:[t("+VNs")]})},RX2P:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Hacktoberfest and Release 1.17.0'\n---\n\nIn this post, we give an overview of\ncontribution possibilities during [Hacktoberfest](https://hacktoberfest.digitalocean.com/),\nand the newly released 1.17.0 version. \n\n\x3c!-- excerpt-end --\x3e\n\n## Hacktoberfest\n\n[Hacktoberfest](https://hacktoberfest.digitalocean.com/) is a yearly event during the month of October to celebrate open-source projects,\nwhere everyone is invited to contribute to projects by submitting pull requests.\nOnce a certain number of pull requests has been made, you will receive some goodies.\n\nIf you're interested to participate in this event,\nwe have marked several issues with the label [`hacktoberfest`](https://github.com/comunica/comunica/issues?q=is%3Aissue+is%3Aopen+label%3Ahacktoberfest),\nwhich are well suited for first-time contributors.\n\nHappy hacking! \ud83e\ude93\n\n## Release 1.17.0\n\nAs of today, version 1.17.0 has been released.\nIt mainly contains [a fix for the bug where some queries would never terminate without producing further results](https://github.com/comunica/comunica/commit/3095b269f1d98d706d1056495123a69bffe3b457).\nNext to this, it features some convenience features such as\n[making the logger data argument lazy](https://github.com/comunica/comunica/commit/e6d7cee1f7622e4bcb73188a0060d5d9823958f0),\n[ensuring the internal SPARQL endpoint defaults to application/json when no content type is requested](https://github.com/comunica/comunica/commit/cdde3559b51825eaebb686fffe0a9edf7c8ef238),\nand a fix for [http-based JSON-LD contexts not being retrievable within browsers](https://github.com/comunica/comunica/commit/2d0818c64e5bfbbb334ecbccb7b5a98a69263d1c).\nIt also lays the groundwork for [RDF* support](https://github.com/comunica/comunica/issues/594) in the near future.\n\nCheck out the [full changelog](https://github.com/comunica/comunica/blob/master/CHANGELOG.md#v1170---2020-09-25) to read more about them.\n"},T87h:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Release 1.22.0: Improved update support, extension functions, and improved CLI handling'\n---\n\nThe 1.22.0 version features some major additions, and a bunch of smaller internal fixes and performance improvements \ud83d\ude80!\nThe primary changes that are discussed in this post are\nsupport for more SPARQL update destination types,\nSPARQL extension functions,\nand rewritten CLI handling.\n\n\x3c!-- excerpt-end --\x3e\n\n## Updating Solid, Linked Data Platform, and SPARQL endpoints\n\nIn the previous release of Comunica, [basic support for updating documents in Solid/LDP data pods was already added by enabling PATCH requests](/blog/2021-04-27-release_1_21/).\nIn this release, we improve this support by also adding an actor that can handle PUT requests,\nwhich will allow resources to be created that do not exist yet.\n\nFor example, the following query will work whether or not the destination resource already exists,\nand Comunica will automatically determine if it should send a PUT or PATCH request:\n```bash\n$ comunica-sparql http://mypod.example.org/file.ttl \\\n  -q \"INSERT DATA { <ex:s> <ex:p> <ex:o> }\"\n```\n\nIn the future, it will also become possible to update _private_ resources via Solid authentication.\n\nFurthermore, this release also makes it possible to forward update queries to SPARQL endpoints.\n\nLearn more about updating from the [command line](/docs/query/getting_started/update_cli/)\nor from a [JavaScript application](/docs/query/getting_started/update_app/) in the documentation.\n\n## SPARQL extension functions\n\nSPARQL allows non-standard, [custom extension functions](https://www.w3.org/TR/sparql11-query/#extensionFunctions) to be used within queries.\nSince this release, Comunica allows developers to plug in custom implementations for such functions.\n\nFor example, this allows you to plug in an implementation for the custom `func:reverse` function in the following query:\n```text\nPREFIX func: <http://example.org/functions#>\nSELECT ?caps WHERE {\n  ?s ?p ?o.\n  BIND (func:reverse(?o) AS ?caps)\n}\n```\n\nLearn more about [configuring SPARQL extension functions here](/docs/query/advanced/extension_functions/).\n\n## Improved CLI arguments handling\n\nUp until this release, the internal mechanics of declaring and handling command-line arguments for `comunica-sparql` was hardcoded.\nThis caused some problems for custom init actors such as `comunica-sparql-hdt`,\nwhere custom handling of these arguments was required.\n\nIn order to meet these needs, the internals of CLI handling has been completely rewritten using the [`yargs`](https://www.npmjs.com/package/yargs) library.\nOther init actors can now easily plug in custom argument handlers to modify how the CLI tool behaves.\nFor the end-user, no significant changes are apparent, as the CLI tools remain fully backwards-compatible.\n\nYou can learn more about this in the [custom CLI arguments guide](/docs/modify/advanced/custom_cli_arguments/).\n\n## Features, fixes and enhancements\n\nNext to the changes above, several minor features, fixes and enhancements were applied,\nsuch as [migration to the more flexible Fetch-based HTTP actor](https://github.com/comunica/comunica/commit/a96547be4b112887a4e164496e2c6540737d8391),\n[allowing custom Fetch functions to be provided via the context](https://github.com/comunica/comunica/commit/a89f88fc1bf63c6e5d8ec7d5aee4199cd8b01e58),\n[logging filter errors as warnings in the logger](https://github.com/comunica/comunica/commit/cf12a9af63078917c0577f1d4b7d023506eda9e5),\n[reducing memory usage during query execution](https://github.com/comunica/comunica/commit/b0aeb67743eb187ddfb4e6fe8b42df240f3a9de7),\n[better error reporting for HTTP errors](https://github.com/comunica/comunica/commit/f6c2d5b2fe920808cf9ab98071da769f763c0515),\nand more.\nCheck out the [full changelog](https://github.com/comunica/comunica/blob/master/CHANGELOG.md#v1220---2021-08-30) to read more about them.\n"},Tpt5:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Setting up a SPARQL endpoint\'\ndescription: \'Allow querying over HTTP via the SPARQL protocol\'\n---\n\nThe [SPARQL protocol](https://www.w3.org/TR/sparql11-protocol/) allows clients to send SPARQL queries to Web servers over HTTP,\nand query results to be sent back to the client. \nComunica SPARQL can be used to set up a **SPARQL endpoint** on top of any number of sources you want.\n\n## 1. Installation\n\nSince Comunica runs on Node.js, make sure you have [Node.js installed](https://nodejs.org/en/) on your machine.\n\nNext, we can install Comunica SPARQL on our machine:\n```bash\n$ npm install -g @comunica/query-sparql\n```\n\n## 2. SPARQL endpoint over one source\n\nAfter installing Comunica SPARQL, you will be given access to several commands including `comunica-sparql-http`,\nwhich allows you to start a SPARQL endpoint from the command line.\n\nThis command requires one or more URLs to be provided as **sources** to query over.\n\nFor example, the following command starts a SPARQL endpoint over [DBpedia](https://fragments.dbpedia.org/2016-04/en):\n```bash\n$ comunica-sparql-http https://fragments.dbpedia.org/2016-04/en\n```\n\n<div class="note">\nGiven a URL, Comunica will automatically detect the <a href="/docs/query/advanced/source_types/">type of source</a> and handle it accordingly.\n</div>\n\nBy default, the endpoint will be exposed on port 3000.\nYour endpoint will now be live on `http://localhost:3000/sparql`.\nAny client that understands the SPARQL protocol will now be able to send queries to this URL,\nsuch as [`fetch-sparql-endpoint`](https://github.com/rubensworks/fetch-sparql-endpoint.js/), or even Comunica itself.\n\n<div class="note">\nThe URL <code>http://localhost:3000/</code> will automatically redirect to <code>http://localhost:3000/sparql</code>.\n</div>\n\nYou can easily test query execution over your endpoint using a tool such as `curl`.\nThe SPARQL protocol allows sending queries via HTTP GET by passing a URL-encoded SPARQL query via the `?query=` parameter:\n```bash\n$ curl -v "http://localhost:3000/sparql?query=CONSTRUCT%20WHERE%20%7B%3Fs%20%3Fp%20%3Fo.%7DLIMIT%20100"\n```\n\n## 3. SPARQL endpoint over multiple sources\n\nOne key feature of Comunica is its ability to query over **multiple sources**.\nFor this, you can just supply any number of URLs as arguments.\n\n```bash\n$ comunica-sparql-http https://fragments.dbpedia.org/2016-04/en \\\n    https://www.rubensworks.net/ \\\n    https://ruben.verborgh.org/profile/\n```\n\n## 4. SPARQL endpoint over local files\n\nFirst install Comunica SPARQL for files:\n\n```bash\n$ npm install -g @comunica/query-sparql-file\n```\n\nThen start the SPARQL server:\n\n```bash\n$ comunica-sparql-file-http path/to/my/file.ttl\n```\n\n## 5. Changing the port\n\nUsing the `-p` option, the port can be changed:\n```bash\n$ comunica-sparql-http https://fragments.dbpedia.org/2016-04/en \\\n  -p 3001\n```\n\n## 6. Increasing the number of worker threads\n\nUsing the `-w` option, the number of parallel worker threads can be set:\n```bash\n$ comunica-sparql-http https://fragments.dbpedia.org/2016-04/en \\\n  -w 4\n```\n\nSetting this to the number of available CPU cores tends to give the best performance.\n\n## 7. Learn more\n\nThis guide only discussed the basic functionality of `comunica-sparql-http`.\nYou can learn more options by invoking the _help_ command:\n```text\n$ comunica-sparql-http --help\ncomunica-sparql-http exposes a SPARQL endpoint\n\nRecommended options:\n  -p, --port     HTTP port to run on                                                                                                    [number] [default: 3000]\n  -w, --workers  Number of worker threads                                                                                                  [number] [default: 1]\n  -t, --timeout  Query execution timeout in seconds                                                                                       [number] [default: 60]\n  -u, --update   Enable update queries (otherwise, only read queries are enabled)                                                     [boolean] [default: false]\n\nOptions:\n  -c, --context          Use the given JSON context string or file (e.g., config.json)                                                                  [string]\n      --to               Destination for update queries                                                                                                 [string]\n  -b, --baseIRI          base IRI for the query (e.g., http://example.org/)                                                                             [string]\n  -d, --dateTime         Sets a datetime for querying Memento-enabled archives                                                                          [string]\n  -l, --logLevel         Sets the log level (e.g., debug, info, warn, ...)                                                            [string] [default: "warn"]\n      --lenient          If failing requests and parsing errors should be logged instead of causing a hard crash                                       [boolean]\n  -v, --version          Prints version information                                                                                                    [boolean]\n      --showStackTrace   Prints the full stacktrace when errors are thrown                                                                             [boolean]\n  -i, --invalidateCache  Enable cache invalidation before each query execution                                                        [boolean] [default: false]\n\nExamples:\n  comunica-sparql-http https://fragments.dbpedia.org/2016-04/en\n  comunica-sparql-http https://fragments.dbpedia.org/2016-04/en https://query.wikidata.org/sparql\n  comunica-sparql-http hypermedia@https://fragments.dbpedia.org/2016-04/en sparql@https://query.wikidata.org/sparql\n```\n'},TqtO:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Browser builds\'\ndescription: \'All modules in Comunica can be built for the browser.\'\n---\n\nUsing bundlers such as [Webpack](https://www.npmjs.com/package/webpack)\nand [browserify](http://browserify.org/),\nyou can bundle your custom Comunica engine for the browser.\n\nFor this, you have to go the following. \n\n<div class="note">\nIf you just want to make use of default Comunica engines such as Comunica SPARQL,\nrefer to the guide on <a href="/docs/query/getting_started/query_browser_app/">querying in a JavaScript browser app</a>.\n</div>\n\n<div class="note">\nA full example of a custom Comunica engine that is browser-ready can be found\n<a href="https://github.com/comunica/examples/tree/master/packages/configure-sparql-http-solid">here</a>.\n</div>\n\n## 1. Compile the config to JavaScript\n\nNot all parts of Comunica can be executed in the browser.\nNamely, the dynamic version of Comunica that can read from a config on the local file system.\n\nAs such, if we want to expose our engine in the browser,\nwe have to **compile our config to a JavaScript file**.\nThis can be done using the `comunica-compile-config` from [`@comunica/runner`](https://github.com/comunica/comunica/tree/master/packages/runner).\n\nFor this, add `@comunica/runner` as a dev dependency to your `package.json`,\nand add the following script (assuming your config exists at `config/config-default.json`):\n\n```text\n{\n  ...\n  "scripts": {\n      ...\n      "prepublishOnly": "npm run build:engine",\n      "build:engine": "comunica-compile-config config/config-default.json > engine-default.js"\n  }\n}\n```\n\n## 2. Create a browser-specific entrypoint\n\nNext, create a file called **`lib/index-browser.ts`**, which will become the browser variant of `lib/index.ts`.\n`lib/index-browser.ts` should at least contain the following:\n```typescript\nexport * from \'./QueryEngine\';\n```\n\n## 3. Expose the browser-specific entrypoint\n\nAfter that, we have to **tell the browser bundling tools that they need to look at `index-browser.js`**\ninstead of `index.js` for browser apps.\nFor this, add the following to your `package.json`:\n```text\n{\n  ...\n  "browser": {\n    "./lib/index.js": "./lib/index-browser.js"\n  }\n}\n```\n\n## 4. Building for the browser\n\nNow you\'re ready to compile your application for the browser using tools such as [Webpack](https://www.npmjs.com/package/webpack).\n\n<div class="note">\nAs of Webpack 5, the Node.js polyfills are not shipped anymore by default.\nSince Comunica requires those, they will have to be added manually, which can be done using the <a href="https://www.npmjs.com/package/node-polyfill-webpack-plugin"><code>node-polyfill-webpack-plugin</code></a>.\n</div>\n\nPlease refer to the documentation of [Webpack](https://www.npmjs.com/package/webpack) on how to configure this build process.\n\nBelow you can find an example configuration file for Webpack, which may require some fine-tuning depending on your use case:\n\n```javascript\nconst path = require(\'path\');\nconst ProgressPlugin = require(\'webpack\').ProgressPlugin;\nconst NodePolyfillPlugin = require("node-polyfill-webpack-plugin");\n\nmodule.exports = {\n  entry: [ \'@babel/polyfill\', path.resolve(__dirname, \'my-app.js\') ],\n  output: {\n    filename: \'my-app-browser.js\',\n    path: __dirname, \n    libraryTarget: \'window\',\n  },\n  devtool: \'source-map\',\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        loader: \'babel-loader\',\n        exclude: /node_modules/,\n      },\n    ]\n  },\n  plugins: [\n    new NodePolyfillPlugin(),\n    new ProgressPlugin(),\n  ]\n};\n\n```\n'},UIgr:function(e,n,t){var a={"./about.md":"k+Dg","./ask.md":"cF01","./association.md":"xNmn","./association/board.md":"sXTL","./association/bounty_process.md":"Qnqd","./blog.md":"pwXB","./blog/2020-08-19-intro.md":"g1PO","./blog/2020-08-24-release_1_16.md":"lA3M","./blog/2020-09-25-release_1_17.md":"RX2P","./blog/2020-11-02-release_1_18.md":"AMha","./blog/2021-01-18-release_1_19.md":"iGab","./blog/2021-03-30-release_1_20.md":"I0sh","./blog/2021-04-27-release_1_21.md":"K1ps","./blog/2021-06-21-comunica_association_bounties.md":"Z3Df","./blog/2021-08-30-release_1_22.md":"T87h","./blog/2021-11-08-comunica_association_members.md":"BXjD","./blog/2022-03-03-release_2_0.md":"g3t9","./blog/2022-06-29-release_2_3.md":"3yd8","./blog/2022-07-14-association_launch.md":"P4my","./contribute.md":"i7ji","./docs.md":"g25/","./docs/1_query.md":"DBOs","./docs/1_query/1_getting_started.md":"8cl0","./docs/1_query/1_getting_started/1_query_cli.md":"pp00","./docs/1_query/1_getting_started/1_update_cli.md":"eQII","./docs/1_query/1_getting_started/2_query_cli_file.md":"l9cK","./docs/1_query/1_getting_started/3_query_app.md":"IwNq","./docs/1_query/1_getting_started/3_update_app.md":"L+/e","./docs/1_query/1_getting_started/4_query_browser_app.md":"yojd","./docs/1_query/1_getting_started/5_query_docker.md":"IAsa","./docs/1_query/1_getting_started/6_setup_endpoint.md":"Tpt5","./docs/1_query/1_getting_started/7_setup_web_client.md":"gEVb","./docs/1_query/1_getting_started/8_query_dev_version.md":"q+Th","./docs/1_query/2_usage.md":"r/UL","./docs/1_query/3_faq.md":"Of3P","./docs/1_query/advanced.md":"f+cO","./docs/1_query/advanced/basic_auth.md":"/ijM","./docs/1_query/advanced/bindings.md":"6eLG","./docs/1_query/advanced/caching.md":"R7CN","./docs/1_query/advanced/context.md":"VVau","./docs/1_query/advanced/destination_types.md":"A2Uh","./docs/1_query/advanced/explain.md":"6r/d","./docs/1_query/advanced/extension_functions.md":"jVc1","./docs/1_query/advanced/federation.md":"6sZF","./docs/1_query/advanced/graphql_ld.md":"Yd58","./docs/1_query/advanced/hdt.md":"gAAm","./docs/1_query/advanced/logging.md":"1mAy","./docs/1_query/advanced/memento.md":"C4fY","./docs/1_query/advanced/proxying.md":"OHH1","./docs/1_query/advanced/rdfjs.md":"YQ0G","./docs/1_query/advanced/rdfjs_querying.md":"9qMJ","./docs/1_query/advanced/rdfjs_updating.md":"MNrr","./docs/1_query/advanced/result_formats.md":"EqAk","./docs/1_query/advanced/solid.md":"vS18","./docs/1_query/advanced/source_types.md":"efn3","./docs/1_query/advanced/sparql_query_types.md":"G7oB","./docs/1_query/advanced/specifications.md":"dL9c","./docs/2_modify.md":"KaIB","./docs/2_modify/1_getting_started.md":"NceB","./docs/2_modify/1_getting_started/1_custom_config_cli.md":"6E7Q","./docs/2_modify/1_getting_started/2_custom_config_app.md":"iaXc","./docs/2_modify/1_getting_started/3_custom_init.md":"9Nb6","./docs/2_modify/1_getting_started/4_custom_web_client.md":"pSfN","./docs/2_modify/1_getting_started/5_contribute_actor.md":"3Et8","./docs/2_modify/1_getting_started/6_actor_parameter.md":"fx3J","./docs/2_modify/2_extensions.md":"bRhx","./docs/2_modify/3_faq.md":"jmwt","./docs/2_modify/advanced.md":"MSYD","./docs/2_modify/advanced/algebra.md":"qJO7","./docs/2_modify/advanced/architecture_core.md":"FVUX","./docs/2_modify/advanced/architecture_sparql.md":"CS1f","./docs/2_modify/advanced/browser_builds.md":"TqtO","./docs/2_modify/advanced/buses.md":"GFD4","./docs/2_modify/advanced/componentsjs.md":"yl98","./docs/2_modify/advanced/custom_cli_arguments.md":"P4uI","./docs/2_modify/advanced/hypermedia.md":"jVJ0","./docs/2_modify/advanced/joins.md":"dpqj","./docs/2_modify/advanced/logging.md":"53tM","./docs/2_modify/advanced/mediators.md":"2vG4","./docs/2_modify/advanced/observers.md":"cQFD","./docs/2_modify/advanced/query_operation_result_types.md":"IeaT","./docs/2_modify/advanced/rdf_parsing_serializing.md":"DdL9","./docs/2_modify/advanced/sparqlee.md":"NYKf","./docs/2_modify/advanced/testing.md":"/CLx","./docs/2_modify/benchmarking.md":"3VWD","./events.md":"V4BS","./events/2019-06-03-eswc.md":"Pav7","./events/2019-10-26-iswc.md":"zVPR","./events/2022-09-07-association_launch.md":"Oq3b","./events/2022-09-13-semantics_conference.md":"4eDq","./logos.md":"Bqm/","./research.md":"aL4H","./research/amf.md":"uEUi","./research/link_traversal.md":"nbqJ","./roadmap.md":"eqAM"};function o(e){return Promise.resolve().then((function(){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t(a[e])}))}o.keys=function(){return Object.keys(a)},o.id="UIgr",e.exports=o},UQ3f:function(e,n,t){"use strict";var a=t("hyoZ");e.exports=new a("tag:yaml.org,2002:js/regexp",{kind:"scalar",resolve:function(e){if(null===e)return!1;if(0===e.length)return!1;var n=e,t=/\/([gim]*)$/.exec(e),a="";if("/"===n[0]){if(t&&(a=t[1]),a.length>3)return!1;if("/"!==n[n.length-a.length-1])return!1}return!0},construct:function(e){var n=e,t=/\/([gim]*)$/.exec(e),a="";return"/"===n[0]&&(t&&(a=t[1]),n=n.slice(1,n.length-a.length-1)),new RegExp(n,a)},predicate:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},represent:function(e){var n="/"+e.source+"/";return e.global&&(n+="g"),e.multiline&&(n+="m"),e.ignoreCase&&(n+="i"),n}})},V4BS:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Events'\ndescription: 'Overview of all Comunica-related events.'\nindex: true\nreverse: true\n---\n\nBelow, all events are listed that are related to, or organized by members of the Comunica community.\n"},VQEG:function(e,n,t){"use strict";e.exports=function(e,n){let t=n.engines[e]||n.engines[function(e){switch(e.toLowerCase()){case"js":case"javascript":return"javascript";case"coffee":case"coffeescript":case"cson":return"coffee";case"yaml":case"yml":return"yaml";default:return e}}(e)];if("undefined"===typeof t)throw new Error('gray-matter engine "'+e+'" is not registered');return"function"===typeof t&&(t={parse:t}),t}},VVau:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Passing a context'\ndescription: 'A context can be passed to a query engine to tweak its runtime settings.'\n---\n\nWhen passing a query to a Comunica query engine,\nyou can pass additional information to the engine using a **context** object.\n\n## 1. How to use the context\n\nWhen [querying in a JavaScript application](/docs/query/getting_started/query_app/),\nthe context must be passed as second argument to the `query()` method of a Comunica engine.\n\nFor example, a context that defines the `sources` to query over is passed as follows:\n```javascript\nconst QueryEngine = require('@comunica/query-sparql').QueryEngine;\nconst myEngine = new QueryEngine();\n\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n});\n```\n\nThe `sources` field is the only entry that is required in the context.\nAll other entries that are discussed hereafter are optional.\n\n<div class=\"note\">\nDuring query execution, the context is converted into an <a href=\"https://www.npmjs.com/package/immutable\">immutable</a> object\nto ensure that the original context entries remain unchanged during the whole query execution.\n</div>\n\n## 2. Overview\n\nThe following table gives an overview of all possible context entries that can be passed.\n\n| **Key** | **Description** |\n| ------- | --------------- |\n| `sources` | An array of data sources |\n| `destination` | A data destination for update queries |\n| `lenient` | If HTTP and parsing failures are ignored |\n| `initialBindings` | Variables that have to be pre-bound to values in the query |\n| `queryFormat` | The provided query's format |\n| `baseIRI` | Base IRI for relative IRIs in SPARQL queries |\n| `log` | A custom logger instance |\n| `datetime` | Specify a custom date |\n| `httpProxyHandler` | A proxy for all HTTP requests |\n| `httpIncludeCredentials` | (_browser-only_) If current credentials should be included for HTTP requests |\n| `httpAuth` | HTTP basic authentication value |\n| `httpTimeout` | HTTP timeout in milliseconds |\n| `httpBodyTimeout` | Makes the HTTP timeout apply until the response is fully consumed |\n| `extensionFunctions` or `extensionFunctionCreator` | SPARQL extension functions |\n| `fetch` | A custom [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) function |\n| `readOnly` | If update queries may not be executed |\n| `explain` | The query explain mode |\n| `unionDefaultGraph` | If the default graph should also contain the union of all named graphs |\n\nWhen developing Comunica modules, all context entry keys can be found in [`@comunica/context-entries`](https://comunica.github.io/comunica/modules/context_entries.html). \n\n## 3. Defining sources\n\nUsing the `sources` context entry, data sources can be defined that Comunica should query over.\nThe value of this must be an array, where the array may contain both strings or objects:\n* Array elements that are strings are interpreted as URLs, such as `'https://www.rubensworks.net/'` or `'https://fragments.dbpedia.org/2016-04/en'`.\n* Object array elements can be different things:\n    * A hash containing `type` and `value`, such as `{ type: 'sparql', value: 'https://dbpedia.org/sparql' }`.\n    * An [RDF/JS](/docs/query/advanced/rdfjs/) source object, such as [`new N3Store()`](https://github.com/rdfjs/N3.js#storing).\n\nString-based sources will lead to Comunica trying to determine their source type automatically.\nHash-based sources allows you to enforce a specific source type.\n\n<div class=\"note\">\nLearn more about <a href=\"/docs/query/advanced/source_types/\">all available source type</a>.\n</div>\n\n<div class=\"note\">\nSome SPARQL endpoints may be recognised as a file instead of a SPARQL endpoint due to them not supporting <a href=\"https://www.w3.org/TR/sparql11-service-description/\">SPARQL Service Description</a>,\nwhich may produce incorrect results. For these cases, the <code>sparql</code> type MUST be set.\n</div>\n\nFor example, all of the following source elements are valid:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`...`, {\n  sources: [\n    'https://fragments.dbpedia.org/2015/en',\n    { type: 'hypermedia', value: 'https://fragments.dbpedia.org/2016/en' },\n    { type: 'file', value: 'https://www.rubensworks.net/' },\n    new N3Store(),\n    { type: 'sparql', value: 'https://dbpedia.org/sparql' },\n  ],\n});\n```\n\n## 4. Defining an update destination\n\nIf you are executing an update query over more than one source,\nthen you need to specify the `destination` of the resulting update.\nMore details on this can be found in the guide on [updating in a JavaScript app](/docs/query/getting_started/update_app/).\n\n## 5. Lenient execution\n\nBy default, Comunica will throw an error when it encounters an invalid **RDF document** or **HTTP URL**.\nIt is possible to **ignore these errors** and make Comunica ignore such invalid documents and URLs\nby setting `lenient` to `true`:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  lenient: true,\n});\n```\n\n## 6. Binding variables\n\nUsing the `initialBindings` context entry, it is possible to **bind** certain variables in the given query to terms before the query execution starts.\nThis may be valuable in case your SPARQL query is used as a template with some variables that need to be filled in.\n\nThis can be done by passing an [RDF/JS `Bindings`](http://rdf.js.org/query-spec/#bindings-interface) object as value to the `initialBindings` context entry:\n```javascript\nimport { BindingsFactory } from '@comunica/bindings-factory';\nimport { DataFactory } from 'rdf-data-factory';\n\nconst DF = new DataFactory();\nconst BF = new BindingsFactory();\n\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE {\n  {?s ?p ?template1 } UNION { ?s ?p ?template2 }\n}`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  initialBindings: BF.fromRecord({\n    template1: factory.literal('Value1'),\n    template2: factory.literal('Value2'),\n  }),\n});\n```\n\n`Bindings` can be created using any [RDF/JS `BindingsFactory`](http://rdf.js.org/query-spec/#bindingsfactory-interface),\nsuch as [`@comunica/bindings-factory`](https://www.npmjs.com/package/@comunica/bindings-factory).\nLearn more about the creation of these bindings objects in the [bindings guide](/docs/query/advanced/bindings/).\n\n## 7. Setting the query format\n\nBy default, queries in Comunica are interpreted as SPARQL queries.\nAs such, the `queryFormat` entry defaults to `{ language: 'sparql', version: '1.1' }`.\n\nSince Comunica is not tied to any specific **query format**, it is possible to change this to something else, such as `{ language: 'graphql', version: '1.0' }`.\nMore information on this can be found in the [GraphQL-LD guide](/docs/query/advanced/graphql_ld/).\n\n## 8. Setting a Base IRI\n\nTerms in SPARQL queries can be relative to a certain **Base IRI**.\nTypically, you would use the `BASE` keyword in a SPARQL query to set this Base IRI.\nIf you want to set this Base IRI without modifying the query,\nthen you can define it in the context using `baseIRI`:\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE {\n  ?s </relative> ?o\n}`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  baseIRI: 'http://example.org/',\n});\n```\n\n## 9. Enabling a logger\n\nA logger can be set using `log`.\nMore information on this can be found in the [logging guide](/docs/query/advanced/logging/).\n\n## 10. Setting a custom date\n\nUsing `datetime`, a custom **date** can be set in Comunica.\nThe range of this field must always be a JavaScript `Date` object:\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  date: new Date(),\n});\n```\n\nThis date is primarily used for the SPARQL `NOW()` operator.\nIt is also used when performing time travel querying using the [Memento protocol](/docs/query/advanced/memento/).\n\n## 11. Enabling an HTTP proxy\n\nAll HTTP requests can be run through a proxy using `httpProxyHandler`.\nMore information on this can be found in the [HTTP proxy guide](/docs/query/advanced/proxying/).\n\n## 12. Include credentials in HTTP requests\n\n_Only applicable when running in the browser_\n\nIf this option is enabled, then all cross-site requests will be made using credentials of the current page.\nThis includes cookies, authorization headers or TLS client certificates.\n\nEnabling this option has no effect on same-site requests.\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  httpIncludeCredentials: true,\n});\n```\n\n## 13. Send requests via HTTP basic authentication\n\nVia HTTP Basic Authentication one can include **username and password** credentials in HTTP requests.\nMore information on this can be found in the [HTTP basic authentication guide](/docs/query/advanced/basic_auth/).\n\n## 14. SPARQL extension functions\n\nSPARQL allows non-standard, [custom extension functions](https://www.w3.org/TR/sparql11-query/#extensionFunctions) to be used within queries.\nIn order to provide an implementation to these extension functions,\nComunica allows developers to plug them in via the context.\nMore information on this can be found in the [SPARQL extension functions guide](/docs/query/advanced/extension_functions/).\n\n## 15. Using a custom fetch function\n\nBy default, Comunica will use the built-in [`fetch` function](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to make HTTP requests.\nIt is however possible to pass a custom function that will be used instead for making HTTP requests,\nas long as it follows the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n\nThis can be done as follows:\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  fetch: myfetchFunction,\n});\n```\n\n_If you want to perform authenticated HTTP requests for Solid, you may want to consider using [Comunica Solid](https://comunica.dev/docs/query/advanced/solid/)._\n\n\n## 16. HTTP Timeout\n\nBy default Communica does not apply any timeout on the HTTP requests done to external services. It is possible to add a timeout using the `httpTimeout` option which value is the timeout delay in milliseconds. For example to add an HTTP timeout of 60s:\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  httpTimeout: 60_000,\n});\n```\n\nIt is also possible to make this timeout not only apply until the response starts streaming in but until the response body is fully consumed using the `httpBodyTimeout` boolean option. It is useful to limit cases like very long response streams:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  httpTimeout: 60_000,\n  httpBodyTimeout: true\n});\n```\n\n## 17. Union Default Graph\n\nBy default, Comunica will only query over the [default graph](https://www.w3.org/TR/sparql11-query/#unnamedGraph).\nIf you want to query over triples in other named graphs, you need to specify this via the `GRAPH`, `FROM`, or `FROM NAMED` clauses.\nHowever, by setting the `unionDefaultGraph` context option to `true`, triples patterns will also apply to triples in the non-default graph. \n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  unionDefaultGraph: true,\n});\n```\n"},VtPO:function(e,n,t){"use strict";var a=t("3lC6");e.exports=a.DEFAULT=new a({include:[t("Z3Ei")],explicit:[t("MERt"),t("UQ3f"),t("Njqi")]})},"X+87":function(e,n,t){"use strict";(function(e){const a=t("cKX6"),o=t("7104");n.define=function(e,n,t){Reflect.defineProperty(e,n,{enumerable:!1,configurable:!0,writable:!0,value:t})},n.isBuffer=function(e){return"buffer"===o(e)},n.isObject=function(e){return"object"===o(e)},n.toBuffer=function(n){return"string"===typeof n?e.from(n):n},n.toString=function(e){if(n.isBuffer(e))return a(String(e));if("string"!==typeof e)throw new TypeError("expected input to be a string or buffer");return a(e)},n.arrayify=function(e){return e?Array.isArray(e)?e:[e]:[]},n.startsWith=function(e,n,t){return"number"!==typeof t&&(t=n.length),e.slice(0,t)===n}}).call(this,t("HDXh").Buffer)},XP29:function(e,n,t){"use strict";var a=t("Y2Yi"),o=t("w+qe"),i=t("VtPO"),r=t("Z3Ei"),s=Object.prototype.toString,c=Object.prototype.hasOwnProperty,u={0:"\\0",7:"\\a",8:"\\b",9:"\\t",10:"\\n",11:"\\v",12:"\\f",13:"\\r",27:"\\e",34:'\\"',92:"\\\\",133:"\\N",160:"\\_",8232:"\\L",8233:"\\P"},l=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"];function d(e){var n,t,i;if(n=e.toString(16).toUpperCase(),e<=255)t="x",i=2;else if(e<=65535)t="u",i=4;else{if(!(e<=4294967295))throw new o("code point within a string may not be greater than 0xFFFFFFFF");t="U",i=8}return"\\"+t+a.repeat("0",i-n.length)+n}function p(e){this.schema=e.schema||i,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=a.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=function(e,n){var t,a,o,i,r,s,u;if(null===n)return{};for(t={},o=0,i=(a=Object.keys(n)).length;o<i;o+=1)r=a[o],s=String(n[r]),"!!"===r.slice(0,2)&&(r="tag:yaml.org,2002:"+r.slice(2)),(u=e.compiledTypeMap.fallback[r])&&c.call(u.styleAliases,s)&&(s=u.styleAliases[s]),t[r]=s;return t}(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function h(e,n){for(var t,o=a.repeat(" ",n),i=0,r=-1,s="",c=e.length;i<c;)-1===(r=e.indexOf("\n",i))?(t=e.slice(i),i=c):(t=e.slice(i,r+1),i=r+1),t.length&&"\n"!==t&&(s+=o),s+=t;return s}function m(e,n){return"\n"+a.repeat(" ",e.indent*n)}function f(e){return 32===e||9===e}function g(e){return 32<=e&&e<=126||161<=e&&e<=55295&&8232!==e&&8233!==e||57344<=e&&e<=65533&&65279!==e||65536<=e&&e<=1114111}function y(e,n){return g(e)&&65279!==e&&44!==e&&91!==e&&93!==e&&123!==e&&125!==e&&58!==e&&(35!==e||n&&function(e){return g(e)&&!f(e)&&65279!==e&&13!==e&&10!==e}(n))}function b(e){return/^\n* /.test(e)}function w(e,n,t,a,o){var i,r,s,c,u=!1,l=!1,d=-1!==a,p=-1,h=g(c=e.charCodeAt(0))&&65279!==c&&!f(c)&&45!==c&&63!==c&&58!==c&&44!==c&&91!==c&&93!==c&&123!==c&&125!==c&&35!==c&&38!==c&&42!==c&&33!==c&&124!==c&&61!==c&&62!==c&&39!==c&&34!==c&&37!==c&&64!==c&&96!==c&&!f(e.charCodeAt(e.length-1));if(n)for(i=0;i<e.length;i++){if(!g(r=e.charCodeAt(i)))return 5;s=i>0?e.charCodeAt(i-1):null,h=h&&y(r,s)}else{for(i=0;i<e.length;i++){if(10===(r=e.charCodeAt(i)))u=!0,d&&(l=l||i-p-1>a&&" "!==e[p+1],p=i);else if(!g(r))return 5;s=i>0?e.charCodeAt(i-1):null,h=h&&y(r,s)}l=l||d&&i-p-1>a&&" "!==e[p+1]}return u||l?t>9&&b(e)?5:l?4:3:h&&!o(e)?1:2}function v(e,n,t,a){e.dump=function(){if(0===n.length)return"''";if(!e.noCompatMode&&-1!==l.indexOf(n))return"'"+n+"'";var i=e.indent*Math.max(1,t),r=-1===e.lineWidth?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-i),s=a||e.flowLevel>-1&&t>=e.flowLevel;switch(w(n,s,e.indent,r,(function(n){return function(e,n){var t,a;for(t=0,a=e.implicitTypes.length;t<a;t+=1)if(e.implicitTypes[t].resolve(n))return!0;return!1}(e,n)}))){case 1:return n;case 2:return"'"+n.replace(/'/g,"''")+"'";case 3:return"|"+q(n,e.indent)+x(h(n,i));case 4:return">"+q(n,e.indent)+x(h(function(e,n){var t,a,o=/(\n+)([^\n]*)/g,i=function(){var t=e.indexOf("\n");return t=-1!==t?t:e.length,o.lastIndex=t,S(e.slice(0,t),n)}(),r="\n"===e[0]||" "===e[0];for(;a=o.exec(e);){var s=a[1],c=a[2];t=" "===c[0],i+=s+(r||t||""===c?"":"\n")+S(c,n),r=t}return i}(n,r),i));case 5:return'"'+function(e){for(var n,t,a,o="",i=0;i<e.length;i++)(n=e.charCodeAt(i))>=55296&&n<=56319&&(t=e.charCodeAt(i+1))>=56320&&t<=57343?(o+=d(1024*(n-55296)+t-56320+65536),i++):o+=!(a=u[n])&&g(n)?e[i]:a||d(n);return o}(n)+'"';default:throw new o("impossible error: invalid scalar style")}}()}function q(e,n){var t=b(e)?String(n):"",a="\n"===e[e.length-1];return t+(a&&("\n"===e[e.length-2]||"\n"===e)?"+":a?"":"-")+"\n"}function x(e){return"\n"===e[e.length-1]?e.slice(0,-1):e}function S(e,n){if(""===e||" "===e[0])return e;for(var t,a,o=/ [^ ]/g,i=0,r=0,s=0,c="";t=o.exec(e);)(s=t.index)-i>n&&(a=r>i?r:s,c+="\n"+e.slice(i,a),i=a+1),r=s;return c+="\n",e.length-i>n&&r>i?c+=e.slice(i,r)+"\n"+e.slice(r+1):c+=e.slice(i),c.slice(1)}function k(e,n,t){var a,i,r,u,l,d;for(r=0,u=(i=t?e.explicitTypes:e.implicitTypes).length;r<u;r+=1)if(((l=i[r]).instanceOf||l.predicate)&&(!l.instanceOf||"object"===typeof n&&n instanceof l.instanceOf)&&(!l.predicate||l.predicate(n))){if(e.tag=t?l.tag:"?",l.represent){if(d=e.styleMap[l.tag]||l.defaultStyle,"[object Function]"===s.call(l.represent))a=l.represent(n,d);else{if(!c.call(l.represent,d))throw new o("!<"+l.tag+'> tag resolver accepts not "'+d+'" style');a=l.represent[d](n,d)}e.dump=a}return!0}return!1}function A(e,n,t,a,i,r){e.tag=null,e.dump=t,k(e,t,!1)||k(e,t,!0);var c=s.call(e.dump);a&&(a=e.flowLevel<0||e.flowLevel>n);var u,l,d="[object Object]"===c||"[object Array]"===c;if(d&&(l=-1!==(u=e.duplicates.indexOf(t))),(null!==e.tag&&"?"!==e.tag||l||2!==e.indent&&n>0)&&(i=!1),l&&e.usedDuplicates[u])e.dump="*ref_"+u;else{if(d&&l&&!e.usedDuplicates[u]&&(e.usedDuplicates[u]=!0),"[object Object]"===c)a&&0!==Object.keys(e.dump).length?(!function(e,n,t,a){var i,r,s,c,u,l,d="",p=e.tag,h=Object.keys(t);if(!0===e.sortKeys)h.sort();else if("function"===typeof e.sortKeys)h.sort(e.sortKeys);else if(e.sortKeys)throw new o("sortKeys must be a boolean or a function");for(i=0,r=h.length;i<r;i+=1)l="",a&&0===i||(l+=m(e,n)),c=t[s=h[i]],A(e,n+1,s,!0,!0,!0)&&((u=null!==e.tag&&"?"!==e.tag||e.dump&&e.dump.length>1024)&&(e.dump&&10===e.dump.charCodeAt(0)?l+="?":l+="? "),l+=e.dump,u&&(l+=m(e,n)),A(e,n+1,c,!0,u)&&(e.dump&&10===e.dump.charCodeAt(0)?l+=":":l+=": ",d+=l+=e.dump));e.tag=p,e.dump=d||"{}"}(e,n,e.dump,i),l&&(e.dump="&ref_"+u+e.dump)):(!function(e,n,t){var a,o,i,r,s,c="",u=e.tag,l=Object.keys(t);for(a=0,o=l.length;a<o;a+=1)s="",0!==a&&(s+=", "),e.condenseFlow&&(s+='"'),r=t[i=l[a]],A(e,n,i,!1,!1)&&(e.dump.length>1024&&(s+="? "),s+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),A(e,n,r,!1,!1)&&(c+=s+=e.dump));e.tag=u,e.dump="{"+c+"}"}(e,n,e.dump),l&&(e.dump="&ref_"+u+" "+e.dump));else if("[object Array]"===c){var p=e.noArrayIndent&&n>0?n-1:n;a&&0!==e.dump.length?(!function(e,n,t,a){var o,i,r="",s=e.tag;for(o=0,i=t.length;o<i;o+=1)A(e,n+1,t[o],!0,!0)&&(a&&0===o||(r+=m(e,n)),e.dump&&10===e.dump.charCodeAt(0)?r+="-":r+="- ",r+=e.dump);e.tag=s,e.dump=r||"[]"}(e,p,e.dump,i),l&&(e.dump="&ref_"+u+e.dump)):(!function(e,n,t){var a,o,i="",r=e.tag;for(a=0,o=t.length;a<o;a+=1)A(e,n,t[a],!1,!1)&&(0!==a&&(i+=","+(e.condenseFlow?"":" ")),i+=e.dump);e.tag=r,e.dump="["+i+"]"}(e,p,e.dump),l&&(e.dump="&ref_"+u+" "+e.dump))}else{if("[object String]"!==c){if(e.skipInvalid)return!1;throw new o("unacceptable kind of an object to dump "+c)}"?"!==e.tag&&v(e,e.dump,n,r)}null!==e.tag&&"?"!==e.tag&&(e.dump="!<"+e.tag+"> "+e.dump)}return!0}function j(e,n){var t,a,o=[],i=[];for(R(e,o,i),t=0,a=i.length;t<a;t+=1)n.duplicates.push(o[i[t]]);n.usedDuplicates=new Array(a)}function R(e,n,t){var a,o,i;if(null!==e&&"object"===typeof e)if(-1!==(o=n.indexOf(e)))-1===t.indexOf(o)&&t.push(o);else if(n.push(e),Array.isArray(e))for(o=0,i=e.length;o<i;o+=1)R(e[o],n,t);else for(o=0,i=(a=Object.keys(e)).length;o<i;o+=1)R(e[a[o]],n,t)}function T(e,n){var t=new p(n=n||{});return t.noRefs||j(e,t),A(t,0,e,!0,!0)?t.dump+"\n":""}e.exports.dump=T,e.exports.safeDump=function(e,n){return T(e,a.extend({schema:r},n))}},Y2Yi:function(e,n,t){"use strict";function a(e){return"undefined"===typeof e||null===e}e.exports.isNothing=a,e.exports.isObject=function(e){return"object"===typeof e&&null!==e},e.exports.toArray=function(e){return Array.isArray(e)?e:a(e)?[]:[e]},e.exports.repeat=function(e,n){var t,a="";for(t=0;t<n;t+=1)a+=e;return a},e.exports.isNegativeZero=function(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e},e.exports.extend=function(e,n){var t,a,o,i;if(n)for(t=0,a=(i=Object.keys(n)).length;t<a;t+=1)e[o=i[t]]=n[o];return e}},YQ0G:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'RDF/JS'\ndescription: 'To achieve maximum interoperability between different JavaScript libraries, Comunica builds on top of the RDF/JS specifications.'\n---\n\n<div class=\"docs-intro-img\">\n  <a href=\"http://rdf.js.org/\"><img src=\"/img/rdfjs.png\" alt=\"RDF/JS logo\" style=\"width:10%\" \\></a>\n</div>\n\nRDF/JS offers a set of RDF specifications for JavaScript libraries\nthat are defined by the [RDF JavaScript Libraries W3C community group](https://www.w3.org/community/rdfjs/).\nMost of the popular JavaScript libraries adhere to these specifications, which makes it possible to use them interchangeably, and in any combination.\nThis allows you to for example use an RDF parser from one developer, and pipe its output into an RDF store from another developer.\n\nFor most of these specifications, corresponding [TypeScript typings exist](https://www.npmjs.com/package/@types/rdf-js),\nand many libraries ship with their own typings as well,\nwhich makes RDF/JS especially useful if you want to develop more strongly-typed JavaScript applications.\n\nComunica is conformant to the following RDF/JS specifications. \n\n## Data model specification\n\nThe foundational part of RDF/JS is its [low-level **data model** specification](http://rdf.js.org/data-model-spec/),\nin which JavaScript interfaces are described for representing **RDF terms** and **RDF quads**.\nFive types of terms exist:\n\n* [Named Node](http://rdf.js.org/data-model-spec/#namednode-interface): Represents a thing by IRI, such as `https://www.rubensworks.net/#me`.\n* [Blank Node](http://rdf.js.org/data-model-spec/#blanknode-interface): Represents a thing without an explicit name.\n* [Literal](http://rdf.js.org/data-model-spec/#literal-interface): Represents a raw value of a certain datatype, such as `\"Ruben\"` or `1992`.\n* [Variable](http://rdf.js.org/data-model-spec/#variable-interface): Represents a variable, which can be used for matching values within queries.\n* [Default Graph](http://rdf.js.org/data-model-spec/#defaultgraph-interface): Represents the default graph in RDF. Other graphs can be represented with named or blank nodes.\n\n[RDF quads](http://rdf.js.org/data-model-spec/#quad-interface) are defined as an object with RDF terms for **subject**, **predicate**, **object** and **graph**.\nAn RDF triple is an alias of a quad,\nwhere the graph is set to the default graph.\nFor the remainder of this document, I will just refer to RDF quads.\n\nFinally, a [Data Factory](http://rdf.js.org/data-model-spec/#datafactory-interface) interface is defined,\nwhich allows you to easily create terms and quads that conform to this interface.\nDifferent Data Factory implementations exist, such as [`rdf-data-factory`](https://www.npmjs.com/package/rdf-data-factory)\nand the factory from [`N3.js`](https://github.com/rdfjs/N3.js#interface-specifications).\nFor example, creating a quad for representing someone's name with a data factory can be done like this:\n\n```javascript\nimport { DataFactory } from 'rdf-data-factory';\n\nconst factory = new DataFactory();\n\nconst quad = factory.quad(\n  factory.namedNode('https://www.rubensworks.net/#me'), // subject\n  factory.namedNode('http://schema.org/name'),          // predicate\n  factory.literal('Ruben')                              // object\n);\n```\n\nReading raw values from the quad can be done as follows:\n\n```javascript\nquad.subject.value === 'https://www.rubensworks.net/#me';\nquad.predicate.value === 'http://schema.org/name';\nquad.object.value === 'Ruben';\n```\n\nFor checking whether or not quads and terms are equal to each other, the `equals` method can be used:\n\n```javascript\nfactory.literal('Ruben').equals(factory.literal('Ruben'));  // true\nfactory.literal('Ruben').equals(factory.literal('Ruben2')); // false\nquad.equals(quad); // true\n```\n\n## Stream interfaces\n\nComunica handles most parts of query execution in a **streaming** manner,\nwhich means that some query results may already be returned\neven though other results are still being processed.\n\nNext to the RDF/JS data model, a dedicated specification exist for handling [RDF streams](http://rdf.js.org/stream-spec/),\nwhich is of high important to Comunica.\n\nOne interface of high importance is the [RDF/JS `Source` interface](http://rdf.js.org/stream-spec/#source-interface).\nYou can [pass a custom `Source` to Comunica to execute queries over it](/docs/query/advanced/rdfjs_querying/).\n\nThe [RDF/JS `Store` interface](http://rdf.js.org/stream-spec/#store-interface) is an extension of `Source`\nthat also allows quads to be added and removed.\nYou can [pass a custom `Store` to Comunica to execute update queries over it](/docs/query/advanced/rdfjs_updating/).\n\n## Query interfaces\n\nThe [RDF/JS query spec](http://rdf.js.org/query-spec/) is a specification that provides\nhigh-level and low-level interfaces that are common to query engines.\nFor example, query engines implementing these high-level interfaces are mostly interchangeable when used within applications.\n\nThe most important high-level interfaces that are implemented by Comunica\nare the [Queryable](https://rdf.js.org/query-spec/#queryable-interfaces)\nand [SparqlQueryable](https://rdf.js.org/query-spec/#sparql-queryable-interfaces) interfaces.\nCompared to these standard interfaces, the only additional requirement that Comunica places is the usage\nof a [source-based context](https://rdf.js.org/query-spec/#querysourcecontext-interface) as second argument to the query methods.\n\nNext to that, Comunica also implements the [`BindingsFactory`](http://rdf.js.org/query-spec/#bindingsfactory-interface)\nand  [`Bindings`](http://rdf.js.org/query-spec/#bindings-interface) interfaces via the\n[`@comunica/bindings-factory`](https://github.com/comunica/comunica/tree/master/packages/bindings-factory) package.\nLearn more about the usage of these bindings [here](/docs/query/advanced/bindings/).\n"},Yd58:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'GraphQL-LD\'\ndescription: \'Using the power of JSON-LD contexts, GraphQL queries can be executed by Comunica\'\n---\n\nInstead of SPARQL queries, you can also provide [**GraphQL-LD**](https://github.com/rubensworks/graphql-ld.js) queries,\nwhich are [GraphQL](https://graphql.org/) queries\nenhanced with a [JSON-LD](https://json-ld.org/) context.\nGraphQL-LD is a developer-friendly alternative to SPARQL that allows querying Linked Data and using the results in a straightforward way.\n\n## What is GraphQL-LD?\n\nAssuming the following SPARQL query:\n\n```sparql\nSELECT ?id ?starring WHERE {\n  OPTIONAL {\n    ?id <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>;\n      <http://dbpedia.org/ontology/starring> ?starring.\n    ?starring <http://www.w3.org/2000/01/rdf-schema#label> "Brad Pitt"@en.\n  }\n}\n```\n\nThis could be written in a more compact way in GraphQL:\n\n```graphql\n{\n  id\n  ... on Film {\n    starring(label: "Brad Pitt")\n  }\n}\n```\n\nAnd this can be based on the following JSON-LD context:\n\n```json\n{\n  "@context": {\n    "Film": "http://dbpedia.org/ontology/Film",\n    "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },\n    "starring": "http://dbpedia.org/ontology/starring"\n  }\n}\n```\n\nLearn more about the **features** of GraphQL-LD on [GitHub](https://github.com/rubensworks/GraphQL-LD.js),\nor read [an article about GraphQL-LD](https://comunica.github.io/Article-ISWC2018-Demo-GraphQlLD/).\n\n## Using GraphQL-LD on the command line\n\nTo run GraphQL queries with [Comunica SPARQL from the command line](/docs/query/getting_started/query_cli/),\nset the `-i` flag to `graphql` and refer to your config file with the JSON-LD context (`@context`) through the `-c` flag.\nTo output your results as a GraphQL tree, set the MIME type of the output with `-t` to `tree`.\n\nFor example, the first 100 labels in DBpedia can be retrieved as follows:\n```bash\n$ comunica-sparql http://fragments.dbpedia.org/2015-10/en \\\n  -q "{ label(first: 100) @single }" \\\n  -c "{ \\"@context\\": { \\"label\\" : \\"http://www.w3.org/2000/01/rdf-schema#label\\" } }" \\\n  -i graphql \\\n  -t tree\n```\n\nSince the queries and contexts can be inconvenient to pass on the command line, they can also be supplied as files:\n```bash\n$ comunica-sparql http://fragments.dbpedia.org/2015-10/en \\\n  -f query.graphql \\\n  -c config-with-context.json \\\n  -i graphql \\\n  -t tree\n```\n\n## Using GraphQL-LD in an application\n\nIf you want to execute GraphQL-LD queries in [your application](/docs/query/getting_started/query_app/),\nyou can do this as follows:\n```javascript\nconst QueryEngine = require(\'@comunica/query-sparql\').QueryEngine;\nconst bindingsStreamToGraphQl = require(\'@comunica/actor-query-result-serialize-tree\').bindingsStreamToGraphQl;\n\nconst myEngine = new QueryEngine();\nconst result = await myEngine.query(`\n{\n  label @single\n  writer(label_en: \\"Michael Jackson\\") @single\n  artist @single {\n    label @single\n  }\n}\n`, {\n  sources: [\'http://fragments.dbpedia.org/2016-04/en\'],\n  queryFormat: {\n    language: \'graphql\',\n    version: \'1.0\'\n  },\n  "@context": {\n    "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label" },\n    "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },\n    "writer": { "@id": "http://dbpedia.org/ontology/writer" },\n    "artist": { "@id": "http://dbpedia.org/ontology/musicalArtist" }\n  }\n});\n// Converts raw Comunica results to GraphQL objects\nconst data = await bindingsStreamToGraphQl(await result.execute(), result.context);\n```\n'},Z3Df:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Announcing the Comunica Association, and a Bounty Program\'\n---\n\nIn this post, we announce the creation of the [Comunica Association](/association/),\nand the introduction of a new bounty system using which **organizations** and companies\ncan **fund development** of new features and the fixing of bugs,\nand through which **developers** can take up these bounties and **get paid**.\n\n\x3c!-- excerpt-end --\x3e\n\n## The need for an association\n\nComunica started out as a small software project to drive query-related research.\nBy now, it has grown into a project that is being widely used not only within research,\nbut also within companies and organizations as stable software.\n\nThe original research-driven development approach is running into its limits,\nsince features and bugs are reported regularly that do not fit into a strict research agenda.\nTherefore, there is a need to broaden the development scope of Comunica,\nwhich is the purpose of the **Comunica Association**.\n\n## Short-term goals\n\nAs of now, the Comunica Association is a **non-profit organization** (activity within [Open Knowledge Belgium](https://openknowledge.be/))\nthat as a first step will act as an intermediary between people in need of development,\nand people that want to offer development at a price.\nFor instance, a certain company may be in need of a specific feature in Comunica,\nbut may not have the required expertise to implement it.\nVia the Comunica Association, this company may place a bounty on this issue,\nso that other companies or freelance developers (that do have this expertise)\nmay take up this effort for the bounty price.\n\n<div class="docs-intro-img">\n  <img src="/img/association_overview.svg" alt="Comunica Association Overview" style="width:50%" \\>\n</div>\n\nVia this bounty program, we intend to grow a network of organizations and individuals that\ncan offer services to each other around the topic of Web-scale querying of Knowledge Graphs.\n\n**Several bounties have already been placed on issues!**\nSo if you\'re a developer willing to take up such work, have a look at [the list of bounties](/association/bounties/).\nIf you\'re an organization interested in placing new bounties, have a look at [the bounty procedures](/association/bounty_process/).\n\n## Long-term goals\n\nThis bounty program is a first step in the creation of the Comunica Association.\nAs a next step, we intend to bring this network of interested organizations and individuals\neven closer by allowing everyone to collaboratively determine the future roadmap of Comunica through memberships.\n\nThe Association will be as open and transparent as possible.\nThis will mean that important decisions will be shared on this website,\nand that all finances will visible for everyone via the [Open Collective platform](https://opencollective.com/).\n\nEven though the Comunica Association is a non-profit organization.\nIt will raise funds through the bounty program and memberships\nin order to secure funding for hiring dedicated developers.\nSuch developers can then become dedicated maintainers of Comunica,\nin order to make the open-source development of Comunica and related RDF/JS libraries more sustainable in the long-term.\n\n[Click here to learn more about the Comunica Association.](/association/) \n'},Z3Ei:function(e,n,t){"use strict";var a=t("3lC6");e.exports=new a({include:[t("RSjF")],implicit:[t("4M5b"),t("spQ0")],explicit:[t("jO2K"),t("8+mo"),t("DfW2"),t("pzZA")]})},ZR4k:function(e,n,t){"use strict";var a=t("HUeH");e.exports=a},aL4H:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Research'\ndescription: 'An overview of these research surrounding Comunica.'\n---\n\n## Working with us\n\nThe Comunica project has been initiated by [IDLab](https://www.ugent.be/ea/idlab/en) at Ghent University \u2013 imec\nas a framework for researching query execution over decentralized knowledge graphs on the Web.\nSince Comunica is open-source, anyone is free to use it to perform any research they want.\n\nIf you are interested in **collaborating**, or working on Comunica as a **Bachelor/Master/PhD student**,\nfeel free to [contact us](/ask/#email).\nWe always have interesting projects to offer on both applied development and fundamental research.\n\n## Cite\n\nIf you are using or extending Comunica as part of a scientific publication,\nwe would appreciate a citation of our [article](https://comunica.github.io/Article-ISWC2018-Resource/).\n\n```bibtex\n@inproceedings{taelman_iswc_resources_comunica_2018,\n  author    = {Taelman, Ruben and Van Herwegen, Joachim and Vander Sande, Miel and Verborgh, Ruben},\n  title     = {Comunica: a Modular SPARQL Query Engine for the Web},\n  booktitle = {Proceedings of the 17th International Semantic Web Conference},\n  year      = {2018},\n  month     = oct,\n  url       = {https://comunica.github.io/Article-ISWC2018-Resource/}\n}\n```\n\n## Experiments\n\nThe following experiments have been done with Comunica:\n\n* [Link Traversal](/research/link_traversal/)\n* [Approximate Membership Functions](/research/amf/)\n\n## Publications\n\nThe following publications make significant use of Comunica:\n\n* [**Optimizing Approximate Membership Metadata in Triple Pattern Fragments for Clients and Servers**. Taelman, R., Van Herwegen, J., Vander Sande, M., & Verborgh, R. (2020)](https://comunica.github.io/Article-SSWS2020-AMF/) ([Learn more](/research/amf/))\n* [**Discovering Data Sources in a Distributed Networkof Heritage Information**.  M., de Valk, S., Meijers, E., Taelman, R., Van De Sompel, H., & Verborgh, R. (2019)](https://biblio.ugent.be/publication/8629105/file/8629106.pdf)\n* [**Computational integrity for outsourced execution of SPARQL queries**. Morel, S (2019)](https://www.scriptiebank.be/sites/default/files/thesis/2019-10/main_0.pdf)\n* [**Querying heterogeneous linked building datasets with context-expanded GraphQL queries**. Werbrouck, J., Senthilvel, M., Beetz, J., & Pauwels, P. (2019)](https://biblio.ugent.be/publication/8623179/file/8623180)\n* [**Using an Existing Website as a Queryable Low-Cost LOD Publishing Interface**. Van de Vyvere, B., Taelman, R., Colpaert, P., & Verborgh, R. (2019, June).](https://link.springer.com/chapter/10.1007/978-3-030-32327-1_35)\n* [**SAD Generator: eating our own dog food to generate KGs and websites for academic events**. Heyvaert, P., Chaves-Fraga, D., Priyatna, F., Sequeda, J., & Dimou, A. (2019, June).](https://link.springer.com/chapter/10.1007/978-3-030-32327-1_19)\n* [**Versioned Querying with OSTRICH and Comunica in MOCHA 2018**. Taelman, R., Vander Sande, M., & Verborgh, R. (2018, June)](https://biblio.ugent.be/publication/8566999/file/8567001.pdf)\n\nAlso using Comunica in our work? [Let us know](/ask/#email) so we can add a reference to this list.\n\n## Tutorials\n\nThe following conference tutorials make use of Comunica:\n\n* [**Building Decentralized Applications with Solid and Comunica**](https://comunica.github.io/Tutorial-ISWC2019-Solid-Comunica/). Ruben Taelman, Joachim Van Herwegen, Ruben Verborgh. Full-day tutorial at the [18th International Semantic Web Conference (ISWC 2019)](https://iswc2019.semanticweb.org), Auckland, New Zealand, 2019.\n* [**Querying Linked Data with Comunica**](https://comunica.github.io/Tutorial-ESWC2019-Comunica/). Ruben Taelman, Joachim Van Herwegen. Half-day tutorial at the [16th Extended Semantic Web Conference (ESWC2019)](https://2019.eswc-conferences.org/), Portoroz, Slovenia, 2019.\n* [**Knowledge Representation as Linked Data: Tutorial**](https://www.cikm2018.units.it/tutorial2.html). Van Herwegen, J., Heyvaert, P., Taelman, R., De Meester, B. and Dimou, A. Tutorial at the [27th ACM International Conference on Information and Knowledge Management](https://www.cikm2018.units.it/). \n"},bRhx:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Extensions'\ndescription: 'Existing extensions of Comunica.'\n---\n\nDifferent default configurations of Comunica are provided,\nsuch as [Comunica SPARQL](https://github.com/comunica/comunica/tree/master/engines/query-sparql#readme),\n[Comunica SPARQL File](https://github.com/comunica/comunica/tree/master/engines/query-sparql-file#readme),\nand [Comunica SPARQL RDF/JS](https://github.com/comunica/comunica/tree/master/engines/query-sparql-rdfjs#readme).\nNext to those, several extensions and modified versions exist of Comunica that offer specific functionality.\n\nFeel free to [contact us](/ask/) if you want your extension of Comunica added to this list.\n\n## Examples\n\nThe [Comunica Examples](https://github.com/comunica/examples) repository\ncontains a number of example packages that explain and illustrate how to create customized Comunica packages.\n\n## Solid\n\n[`@comunica/query-sparql-solid`](https://github.com/comunica/comunica-feature-solid)\nis Comunica SPARQL query engine that allows queries to be executed using your [Solid account](https://solidproject.org/).\n\nRead more about this in [our guide on Solid](/docs/query/advanced/solid/).\n\n## Link Traversal\n\n[`@comunica/query-sparql-link-traversal`](https://github.com/comunica/comunica-feature-link-traversal) and\n[`@comunica/query-sparql-link-traversal-solid`](https://github.com/comunica/comunica-feature-link-traversal-solid)\nare Comunica SPARQL query engine that follow links between documents during query execution.\n\nRead more about this in [our guide on Link Traversal](/research/link_traversal/).\n\n## AMF\n\n[Comunica AMF](https://github.com/comunica/comunica-feature-amf)\nprovides a set of experimental actors that handle _approximate membership functions_, such as Bloom filters.\nRead more about this in [this article](https://comunica.github.io/Article-SSWS2020-AMF/).\n\n## HDT\n\n[`@comunica/comunica-actor-rdf-resolve-quad-pattern-hdt`](https://github.com/comunica/comunica-actor-rdf-resolve-quad-pattern-hdt)\nis a package that enables [resolving a quad pattern](/docs/modify/advanced/buses/#rdf-resolve-quad-pattern) over HDT files.\nThe [Comunica SPARQL HDT package](https://github.com/comunica/comunica-query-sparql-hdt#readme)\nprovides a default configuration that adds full SPARQL query support using other actors from Comunica SPARQL.\n\nRead more about this in [our guide on querying over HDT](/docs/query/advanced/hdt/).\n\n## OSTRICH\n\n[OSTRICH](https://github.com/rdfostrich) is a versioned RDF triple store.\n\n[`@comunica/actor-rdf-resolve-quad-pattern-ostrich`](https://github.com/rdfostrich/comunica-actor-rdf-resolve-quad-pattern-ostrich)\nis a package that enables [resolving a quad pattern](/docs/modify/advanced/buses/#rdf-resolve-quad-pattern) over OSTRICH files.\nIt determines the version to query over from the context.\n\n[`@comunica/actor-query-operation-contextify-version`](https://github.com/rdfostrich/comunica-actor-query-operation-contextify-version)\nis a package that detects graph-based version [operations](/docs/modify/advanced/buses/#query-operation)\nand rewrites them to operations with a version context.\n\nThe [Comunica SPARQL OSTRICH package](https://github.com/rdfostrich/comunica-query-sparql-ostrich#readme)\nprovides a default configuration that adds full SPARQL query support using other actors from Comunica SPARQL.\n"},cF01:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Ask'\ndescription: 'Ask questions about Comunica.'\n---\n\nShould you not find the right information on this website,\nwe would be happy to help you out via any of the methods below.\n\nRelated pages:\n* [Roadmap](/roadmap/)\n* [Contribute](/contribute/)\n\n## Questions\n\nThe easiest way to get an answer to small questions is via our [Gitter channel](https://gitter.im/comunica/Lobby).\nThere, we have an active community of Comunica developers, contributors and enthusiasts.\n\nAlternatively, if you want a place to talk about your question (or discussion topic),\nyou can make use of the [discussions tab on GitHub](https://github.com/comunica/comunica/discussions).\n\nIn case you have a more general question related to SPARQL or RDF in JavaScript,\nthe [RDF/JS Gitter channel](https://gitter.im/rdfjs/public) should be of help.\n\n## GitHub issues\n\nIf you experience bugs with Comunica, or if you have suggestions for new features,\nfeel free to report them in our [issue tracker on GitHub](https://github.com/comunica/comunica/issues).\n\nPlease take into account that this is an open-source effort,\nso we may not be able to solve all issues, but we do our best!\nShould you be interested in helping our with fixing or implementing any of these issues,\nyou are very welcome to [contribute](/contribute/).\n\n## Twitter\n\nTo keep updated with the latest news on Comunica, find us on [Twitter](https://twitter.com/comunicajs).\n\n## Email\n\nFor any other matters, such as research collaborations or commercial support, you can send an email to [Ruben Taelman](mailto:ruben.taelman@ugent.be).\n"},cKX6:function(e,n,t){"use strict";e.exports=function(e){return"string"===typeof e&&"\ufeff"===e.charAt(0)?e.slice(1):e}},cQFD:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Observers'\ndescription: 'Passively observe actions executed by actors on a given bus.'\n---\n\nObservers are an optional element in [Comunica's core architecture](/docs/modify/advanced/architecture_core/).\nThey allow you to **listen to all actions on a bus**, without modifying the action's input or output.\n\nObservers ([`ActionObserver`](https://comunica.github.io/comunica/classes/core.actionobserver.html)) require a `bus` parameter, which should be supplied in the config file.\nYour observer implementation must override the following `onRun` method:\n```typescript\ninterface ActionObserver {\n  onRun(\n    actor: Actor<IAction, IActorTest, IActorOutput>,\n    action: IAction,\n    output: Promise<IActorOutput>,\n  ): void;\n}\n```\nThis method allows you to see the handling actor, the executed action, and a promise to the action output.\n\n[Click here to find an example of a full observer implementation and configuration.](https://github.com/comunica/examples/tree/master/packages/actor-observe-rdf-dereference)\n"},dL9c:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Supported specifications\'\ndescription: \'Comunica supports several RDF-related specifications\'\n---\n\nThis page summarizes the specifications Comunica implements.\n\n## Query standards\n\nThe following standard query specifications are supported:\n\n| **Description** |\n| ------- |\n| [SPARQL 1.1 Query Language](https://www.w3.org/TR/sparql11-query/) |\n| [SPARQL 1.1 Update](https://www.w3.org/TR/sparql11-update/) |\n| [SPARQL 1.1 Service Description](https://www.w3.org/TR/sparql11-service-description/) |\n| [SPARQL 1.1 Federated Query](https://www.w3.org/TR/sparql11-federated-query/) |\n| [SPARQL 1.1 Query Results JSON Format](https://www.w3.org/TR/sparql11-results-json/) |\n| [SPARQL Query Results XML Format (Second Edition)](https://www.w3.org/TR/rdf-sparql-XMLres/) |\n| [SPARQL 1.1 Query Results CSV and TSV Formats](https://www.w3.org/TR/sparql11-results-csv-tsv/) |\n| [SPARQL 1.1 Protocol](https://www.w3.org/TR/sparql11-protocol/) |\n\nThe following notable specifications are not supported _yet_:\n\n| **Description** |\n| ------- |\n| [SPARQL 1.1 Entailment Regimes](https://www.w3.org/TR/sparql11-entailment/) |\n| [SPARQL 1.1 Graph Store HTTP Protocol](https://www.w3.org/TR/sparql11-http-rdf-update/) |\n\n## Serializing SPARQL results\n\nSPARQL query results can be serialized in [different formats](/docs/query/advanced/result_formats/).\nFor all of these supported formats, the following are standards:\n\n| **Media type** | **Description** |\n| ------- | --------------- |\n| [`application/sparql-results+json`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-sparql-json) | The [SPARQL/JSON](https://www.w3.org/TR/sparql11-results-json/) results format. |\n| [`application/sparql-results+xml`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-sparql-xml) | The [SPARQL/XML](https://www.w3.org/TR/rdf-sparql-XMLres/) results format. |\n| [`text/csv`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-sparql-csv) | The [SPARQL/CSV](https://www.w3.org/TR/sparql11-results-csv-tsv/) results format. |\n| [`text/tab-separated-values`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-sparql-tsv) | The [SPARQL/TSV](https://www.w3.org/TR/sparql11-results-csv-tsv/) results format. |\n\n<div class="note">\nAll serializers work in a <i>streaming</i> manner.\n</div>\n\nNext to these, RDF serializations are supported, as shown below.\n\n## Serializing RDF\n\nRDF triples/quads can be serialized via the following RDF serializations:\n\n| **Media type** | **Description** |\n| ------- | --------------- |\n| [`application/trig`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [TriG](https://www.w3.org/TR/trig/) RDF serialization. |\n| [`application/n-quads`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [N-Quads](https://www.w3.org/TR/n-quads/) RDF serialization. |\n| [`text/turtle`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [Turtle](https://www.w3.org/TR/turtle/) RDF serialization. |\n| [`application/n-triples`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [N-Triples](https://www.w3.org/TR/n-triples/) RDF serialization. |\n| [`text/n3`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [Notation3](https://www.w3.org/TeamSubmission/n3/) serialization. |\n| [`application/ld+json`](https://github.com/comunica/comunica/tree/master/packages/actor-sparql-serialize-rdf) | The [JSON-LD](https://json-ld.org/) RDF serialization. |\n\n<div class="note">\nAll serializers work in a <i>streaming</i> manner.\n</div>\n\n## Parsing RDF\n\nRDF triples/quads can be provided as input via the following RDF serializations:\n\n| **Name** | **Media type** | **Extensions** |\n| -------- | ---------------- | ------------- |\n| [TriG](https://www.w3.org/TR/trig/) | `application/trig` | `.trig` |\n| [N-Quads](https://www.w3.org/TR/n-quads/) | `application/n-quads` | `.nq`, `.nquads` |\n| [Turtle](https://www.w3.org/TR/turtle/) | `text/turtle` | `.ttl`, `.turtle` |\n| [N-Triples](https://www.w3.org/TR/n-triples/) | `application/n-triples` | `.nt`, `.ntriples` |\n| [Notation3](https://www.w3.org/TeamSubmission/n3/) | `text/n3` | `.n3` |\n| [JSON-LD](https://json-ld.org/) | `application/ld+json`, `application/json` | `.json`, `.jsonld` |\n| [RDF/XML](https://www.w3.org/TR/rdf-syntax-grammar/) | `application/rdf+xml` | `.rdf`, `.rdfxml`, `.owl` |\n| [RDFa](https://www.w3.org/TR/rdfa-in-html/) and script RDF data tags [HTML](https://html.spec.whatwg.org/multipage/)/[XHTML](https://www.w3.org/TR/xhtml-rdfa/) | `text/html`, `application/xhtml+xml` | `.html`, `.htm`, `.xhtml`, `.xht` |\n| [RDFa](https://www.w3.org/TR/2008/REC-SVGTiny12-20081222/metadata.html#MetadataAttributes) in [SVG](https://www.w3.org/TR/SVGTiny12/)/[XML](https://html.spec.whatwg.org/multipage/) | `image/svg+xml`,`application/xml` | `.xml`, `.svg`, `.svgz` |\n| [Microdata](https://w3c.github.io/microdata-rdf/) | `text/html`, `application/xhtml+xml` | `.html`, `.htm`, `.xhtml`, `.xht` |\n\n<div class="note">\nAll parsers work in a <i>streaming</i> manner.\n</div>\n\n## RDF/JS\n\nAlignment with other JavaScript libraries is achieved via the following RDF/JS specifications:\n\n| **Description** |\n| ------- |\n| [RDF/JS Query specification](https://rdf.js.org/query-spec/) |\n| [RDF/JS Stream interfaces specification](https://rdf.js.org/stream-spec/) |\n| [RDF/JS Data model specification](https://rdf.js.org/data-model-spec/) |\n'},dpqj:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Joins\'\ndescription: \'Overview of how join operations are handled during query planning\'\n---\n\nJoin operations form a critical part most query engines.\nThe _order_ in which operations are joined, and the _algorithms_ that are used to execute those joins,\ndetermine in large part the overall efficiency of query executions.\nThe acts of determining this order and the selection of the join algorithms are parts of _query planning_.\n\n## Adaptive query planning\n\nWhile most query engines perform query planning _before_ query execution,\nComunica does (part of) its query planning _during_ query execution,\nwhich makes it an _adaptive_ query engine.\nThis is because Comunica aims to query over remote data sources,\nwhich makes it difficult to determine the optimal query plan ahead of query execution.\nInstead, the choices for query planning are taken as soon as they are required\nand the relevant information about the sources is available.\n\n## What is a join\n\nSPARQL queries typically consist of many joins.\nFor example, the following SPARQL query requires two triple patterns to be joined:\n\n```text\nSELECT * WHERE {\n  ?s <ex:p1> ?link.\n  ?link <ex:p2> ?o.\n}\n```\n\nA query engine can represent this as two join entries that each can produce bindings:\n\n- Join entry 1 with bindings for variables `?s` and `?link`\n- Join entry 2 with bindings for variables `?link` and `?o`\n\nThe join of these two entries will result in a new intermediary operation that produces bindings for the variables `?s`, `?link`, and `?o`.\nThe bindings in this intermediary operation will contain all existing combinations of these variables based on the two underlying join entries. \n\nFor example, we assume the following bindings for the two join entries:\n\n```text\njoin entry 1:\n  { s: "ex:s1"; link: "ex:link1" }\n  { s: "ex:s2"; link: "ex:link2" }\n  { s: "ex:s3"; link: "ex:link3" }\n\njoin entry 2:\n  { link: "ex:link1", o: "ex:o1" }\n  { link: "ex:link1", o: "ex:o2" }\n  { link: "ex:link3", o: "ex:o3" }\n```\n\nIf we determine the possible combinations of these join entries following the _inner join_ semantics,\nthen we will obtain the following bindings:\n\n```text\njoined bindings:\n  { s: "ex:s1"; link: "ex:link1"; o: "ex:o1" }\n  { s: "ex:s1"; link: "ex:link1"; o: "ex:o2" }\n  { s: "ex:s3"; link: "ex:link3"; o: "ex:o3" }\n```\n\nNote that the second binding of the first join entry does not appear in the final results,\nbecause the value for `?link` (`"ex:link2"`) does not exist in the second join entry\'s bindings.\n\n## Logical and physical joins\n\nA _logical join_ type indicates the semantics of a join operation,\nand are under control of the query writer.\nThe example above explains how the so-called **inner join** works,\nwhich is the most common logical join within SPARQL queries.\n\nThere are however also two other logical join types that can occur within SPARQL queries:\n\n- **Optional join** (or _left join_): a join with two entries where all bindings from the left entry are matched with the bindings from the right entry. If no matching bindings are found in the right entry, undefined values are used for those.\n- **Minus join** (or _anti join_): a join with two entries where all bindings from the left entry are returned that have no corresponding bindings in the right entry.\n\nEach logical join can be implemented via different _physical join_ algorithms.\nThe selection of these algorithms is usually done internally within query engines during query planning,\nand is therefore not under control of the query writer.\n\nFor example, two popular algorithms for the inner join are the nested-loop-join and hash-join algorithms,\nwhere the former is based on a nested for-loop, and the latter makes use of a hash-dictionary to achieve a lower computational complexity.\n\n## Join actors\n\nThe [`@comunica/bus-rdf-join`](https://github.com/comunica/comunica/tree/master/packages/bus-rdf-join) bus in Comunica accepts join actions,\nwhere each action determine the entries that require joining, and the logical join that is to be used.\nFor example, this bus will be invoked for the inner-join type when more than one operation (e.g. triple pattern) occurs in the query.\n\nCurrently, the following join actors are available in Comunica:\n\n- **Inner join**\n  - [`@comunica/actor-rdf-join-inner-hash`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-hash): Hash join of two entries.\n  - [`@comunica/actor-rdf-join-inner-nestedloop`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-nestedloop): Nested loop join of two entries.\n  - [`@comunica/actor-rdf-join-inner-none`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-none): Join between zero entries, and returns a single binding.\n  - [`@comunica/actor-rdf-join-inner-single`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-single): Join of a single entry, and returns the entry itself.\n  - [`@comunica/actor-rdf-join-inner-symmetrichash`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-symmetrichash): Symmetric hash join of two entries.\n  - [`@comunica/actor-rdf-join-inner-multi-empty`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-multi-empty): Multi-join that accepts any number of inner-join entries of which at least one is empty and returns an empty stream.\n  - [`@comunica/actor-rdf-join-inner-multi-bind`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-multi-bind): Multi-join that inner-joins 2 or more streams by picking the one with the lowest cardinality, binding each item with the remaining operations, and recursively resolving those operations by delegating to [`@comunica/bus-query-operation`](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation).\n  - [`@comunica/actor-rdf-join-inner-multi-sequential`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-multi-sequential): Multi-join by just picking the two of them hierarchically.\n  - [`@comunica/actor-rdf-join-inner-multi-smallest`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-inner-multi-smallest): Multi-join by always picking the first two streams with smallest estimate cardinality.\n- **Optional join**\n  - [`@comunica/actor-rdf-join-optional-bind`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-optional-bind): Join 2 streams using the bind join algorithm. It binds each item of the first stream with the second operation, and recursively resolving that operation by delegating to [`@comunica/bus-query-operation`](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation).\n  - [`@comunica/actor-rdf-join-optional-nestedloop`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-optional-nestedloop): Join 2 streams using the nested loop join algorithm.\n- **Minus join**\n  - [`@comunica/actor-rdf-join-minus-hash`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-minus-hash): Join 2 streams using the hash join algorithm. This actor does _not_ support streams that can have undefined values.\n  - [`@comunica/actor-rdf-join-minus-hash-undef`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-join-minus-hash-undef): Join 2 streams using the hash join algorithm. This actor supports streams that can have undefined values.\n\n## Selecting physical joins\n\n<div class="note">\nActor selection in Comunica is done using mediators.\nLearn more about mediators in the <a href="/docs/modify/advanced/architecture_core/">core architecture</a>.\n</div>\n\nThe [Join Coefficients Mediator](https://github.com/comunica/comunica/tree/master/packages/mediator-join-coefficients-fixed) is a mediator that will select the "optimal" join actor based on their join coefficients (cost estimates).\nEach join actor can calculate their join coefficients based on metadata that is provided by data sources.\n\nThe available join coefficients that are calculated by each join actor are:\n\n- `iterations`: An estimation of how many iterations over items are executed. This is used to determine the CPU cost.\n- `persistedItems`: An estimation of how many items are stored in memory. This is used to determine the memory cost.\n- `blockingItems`: An estimation of how many items block the stream. This is used to determine the time the stream is not progressing anymore.\n- `requestTime`: An estimation of the time to request items from sources. This is used to determine the I/O cost.\n\nThe Join Coefficients Mediator\ncan be configured with weights to calculate an overall cost based on these join coefficients,\nafter which the actor with the lowest overall cost will be allowed to execute the action.\n\n<div class="note">\nIf you want to inspect or debug the chosen physical joins,\nyou can use the <a href="/docs/query/advanced/explain/">explain functionality</a>,\nor make use of the <a href="/docs/query/advanced/logging/">logger</a>.\n</div>\n\n### Physical join selection example\n\nWe assume two join entries with the following cardinalities (a.k.a., estimated number of bindings):\n\n- Join entry 1: 10\n- Join entry 2: 1.000\n\nAssuming the availability of the nested-loop-join and hash-join actors,\nthese will calculate the join coefficients as follows:\n\n- Nested-loop-join\n  - `iterations = 10 * 1.000 = 10.000`\n  - `persistedItems = 0`\n  - `blockingItems = 0`\n- Hash-join\n  - `iterations = 10 + 1.000 = 1.010`\n  - `persistedItems = 10`\n  - `blockingItems = 10`\n\n_The `requestTime` join coefficient is omitted out for simplicity._\n\nIf the Join Coefficients Mediator gives equal weights to all join coefficients,\nthen it can come up with the following overall costs, which would make hash-join the selected physical actor:\n\n- Nested-loop-join: `10.000 + 0 + 0 = 10.000`\n- Hash-join: `1.010 + 10 + 10 = 1.030`\n\nHowever, if the Join Coefficients Mediator would be configured to give a much higher weight (`10.000`)\nto the number of blocking items (e.g. when early results are prioritized),\nthen the overall costs would become, which would make nested-loop join the selected physical actor:\n\n- Nested-loop-join: `10.000 + 0 * 1.000 + 0 = 10.000`\n- Hash-join: `1.010 + 10 * 10.000 + 10 = 11.020`\n'},eQII:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Updating from the command line\'\ndescription: \'Execute SPARQL Update queries directly from the command line.\'\n---\n\nComunica SPARQL (`@comunica/query-sparql`) allow you to initiate queries to _update_ data in a certain store.\nIn this guide, we will build upon [the guide on querying from the command line](/docs/query/getting_started/query_cli/),\nand show how you can not only read, but also update data.\n\n<div class="note">\nAt the time of writing, not all possible <a href="/docs/query/advanced/destination_types/">destination types</a> may be supported yet.\n</div>\n\n## 1. Updating one source\n\nUsing the `comunica-sparql` command line tool,\nyou can invoke not only read queries, but also update queries.\n\nAssuming you pass just one source,\nthis source will also be assumed to be the destination for update queries.\n\nFor example, the following query appends a single triple to `https://example.org/myfile.ttl`:\n```bash\n$ comunica-sparql https://example.org/myfile.ttl \\\n    "INSERT DATA { <ex:s> <ex:p> <ex:o> }"\n```\n\n<div class="note">\nGiven a URL, Comunica will automatically detect the <a href="/docs/query/advanced/destination_types/">type of destinations</a> and handle it accordingly.\n</div>\n\nAs output, `ok` will be printed if the update was successful:\n```\nok\n``` \n\n## 2. Updating a different destination\n\nWhile Comunica supports querying over **multiple sources**,\nit only supports updating **a single destination**.\n\nTherefore, if you are querying over multiple sources,\nbut you want to pass the results to a single destination,\nthen you must explicitly define this destination using the `--to` option.\n\nFor example, the following query takes the first 100 triples from 3 sources,\nand inserts them into `https://example.org/myfile.ttl`:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    https://www.rubensworks.net/ \\\n    https://ruben.verborgh.org/profile/ \\\n    --to https://example.org/myfile.ttl \\\n    "INSERT { ?s ?p ?o. } WHERE { SELECT * WHERE { ?s ?p ?o } LIMIT 100 }"\n```\n\n<div class="note">\nThe type of destination is here also <a href="/docs/query/advanced/destination_types/">automatically detected</a>,\nand can also be overridden.\n</div>\n'},efn3:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Source types\'\ndescription: \'Comunica detects and handles different types of sources.\'\n---\n\nComunica SPARQL enables query execution over one or more sources\non both the [command line](/docs/query/getting_started/query_cli/)\nand when [calling Comunica from a JavaScript application](/docs/query/getting_started/query_app/).\n\nUsually, sources are passed as URLs that point to Web resources.\nBased on what is returned when _dereferencing_ this URL,\nComunica can apply different query algorithms.\n\nInstead of relying on Comunica\'s detection algorithms,\nyou can **enforce** the use of a certain type.\n\n<div class="note">\nSome SPARQL endpoints may be recognised as a file instead of a SPARQL endpoint due to them not supporting <a href="https://www.w3.org/TR/sparql11-service-description/">SPARQL Service Description</a>,\nwhich may produce incorrect results. For these cases, the <code>sparql</code> type MUST be set.\n</div>\n\n<div class="note">\nWhen enabling the <a href="/docs/modify/advanced/logging/"><code>info</code> logger</a>,\nyou can derive what type Comunica has determined for each source.\n</div>\n\n## Setting source type on the command line\n\nOn the [command line](/docs/query/getting_started/query_cli/), source types can optionally be enforced by prefixing the URL with `<typeName>@`, such as:\n```bash\n$ comunica-sparql sparql@https://dbpedia.org/sparql \\\n    "CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100"\n```\n\n## Setting source type in an application\n\nVia a [JavaScript application](/docs/query/getting_started/query_app/),\nthe source type can be set by using a hash containing `type` and `value`:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`...`, {\n  sources: [\n    { type: \'sparql\', value: \'https://dbpedia.org/sparql\' },\n  ],\n});\n```\n\n## Supported source types\n\nThe table below summarizes the different source types that Comunica supports by default:\n\n| **Type name** | **Description** |\n| ------- | --------------- |\n| `file` | plain RDF file in any RDF serialization, such as [Turtle](https://www.w3.org/TR/turtle/), [TriG](https://www.w3.org/TR/trig/), [JSON-LD](https://json-ld.org/), [RDFa](https://www.w3.org/TR/rdfa-primer/), ... |\n| `sparql` | [SPARQL endpoint](https://www.w3.org/TR/sparql11-protocol/) |\n| `hypermedia` | Sources that expose query capabilities via hypermedia metadata, such as [Triple Pattern Fragments](https://linkeddatafragments.org/specification/triple-pattern-fragments/) and [Quad Pattern Fragments](https://linkeddatafragments.org/specification/quad-pattern-fragments/) |\n| `rdfjsSource` | JavaScript objects implementing the [RDF/JS `source` interface](/docs/query/advanced/rdfjs_querying/) |\n| `hdtFile` | [HDT files](/docs/query/advanced/hdt/) |\n| `ostrichFile` | Versioned [OSTRICH archives](https://github.com/rdfostrich/comunica-query-sparql-ostrich) |\n\nThe default source type is `auto`,\nwhich will automatically detect the proper source type.\nFor example, if a [SPARQL Service Description](https://www.w3.org/TR/sparql11-service-description/)\nis detected, the `sparql` type is used.\n\n## RDF serializations\n\nComunica will interpret the `Content-Type` header of HTTP responses to determine used RDF serialization.\nIf the server did not provide such a header, Comunica will attempt to derive the serialization based on the extension.\n\nThe following RDF serializations are supported:\n\n| **Name** | **Content type** | **Extensions** |\n| -------- | ---------------- | ------------- |\n| [TriG](https://www.w3.org/TR/trig/) | `application/trig` | `.trig` |\n| [N-Quads](https://www.w3.org/TR/n-quads/) | `application/n-quads` | `.nq`, `.nquads` |\n| [Turtle](https://www.w3.org/TR/turtle/) | `text/turtle` | `.ttl`, `.turtle` |\n| [N-Triples](https://www.w3.org/TR/n-triples/) | `application/n-triples` | `.nt`, `.ntriples` |\n| [Notation3](https://www.w3.org/TeamSubmission/n3/) | `text/n3` | `.n3` |\n| [JSON-LD](https://json-ld.org/) | `application/ld+json`, `application/json` | `.json`, `.jsonld` |\n| [RDF/XML](https://www.w3.org/TR/rdf-syntax-grammar/) | `application/rdf+xml` | `.rdf`, `.rdfxml`, `.owl` |\n| [RDFa](https://www.w3.org/TR/rdfa-in-html/) and script RDF data tags [HTML](https://html.spec.whatwg.org/multipage/)/[XHTML](https://www.w3.org/TR/xhtml-rdfa/) | `text/html`, `application/xhtml+xml` | `.html`, `.htm`, `.xhtml`, `.xht` |\n| [RDFa](https://www.w3.org/TR/2008/REC-SVGTiny12-20081222/metadata.html#MetadataAttributes) in [SVG](https://www.w3.org/TR/SVGTiny12/)/[XML](https://html.spec.whatwg.org/multipage/) | `image/svg+xml`,`application/xml` | `.xml`, `.svg`, `.svgz` |\n'},eqAM:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Roadmap'\ndescription: 'The long-term goals of Comunica'\n---\n\nThis page gives an overview of the long-term goals of Comunica,\nwhich is determined by the [Comunica Association](/association/).\n\n[Interested in helping out? Find out more on how to contribute](/contribute/).\n\n## Future-oriented development\n\n_[All future-oriented issues](https://github.com/comunica/comunica/labels/future-oriented)_\n\nIn addition to specification compliance, Comunica is being built with possible future specifications in mind.\nComunica should become a testbed for easily testing out new query features and techniques.\nFor instance, for efforts such as [RDF\\*/SPARQL\\*](https://blog.liu.se/olafhartig/2019/01/10/position-statement-rdf-star-and-sparql-star/)\nand [SPARQL 1.2](https://github.com/w3c/sparql-12/).\nThis also includes making Comunica ready for new technologies such as [ESM](https://nodejs.org/api/esm.html) and [WebAssembly](https://webassembly.org/).\n\nWhile the architecture of Comunica has been built with this flexibility in mind,\nsome specific changes will need to be made before this is possible.\nFor instance, testing new SPARQL 1.2 query features will require the development of a new SPARQL query parser,\nsince our current parser ([SPARQL.js](https://github.com/RubenVerborgh/SPARQL.js/)) is [not flexible enough in that respect](https://github.com/comunica/comunica/issues/403).\n\n## Improving overall performance\n\n_[All performance-related issues](https://github.com/comunica/comunica/labels/performance%20%F0%9F%90%8C)_\n\nComunica has been designed with modularity and flexibility as primary requirement,\nwhile performance was a lower priority.\nNevertheless, [experiments](https://comunica.github.io/Article-ISWC2018-Resource/#comparison-tpf-client)\nshow that the performance Comunica of is still very similar to equivalent engines.\n\nAs Comunica is being used increasingly in more use cases,\nfor larger datasets and more complex queries,\nspecific [performance issues](https://github.com/comunica/comunica/issues?q=is%3Aissue+is%3Aopen+label%3A%22performance+%F0%9F%90%8C%22) are being identified.\nIn order to [resolve these](https://github.com/comunica/comunica/issues/846), new algorithms may need to be implemented,\nupstream packages may need to be evaluated,\nor even some architectural changes may be required in some cases.\nNext to that, issues related to lowering the browser bundle size are also of interest.\n\n## Developer experience\n\n_[All devex-related issues](https://github.com/comunica/comunica/labels/devx%20%F0%9F%8E%A8)_\n\nCode-specific improvements are possible\nto make it easier for developers to work with and in Comunica.\nFor example, errors can sometimes be too cryptic, which hinders development.\n\nA list of all open developer experience issues can be found\n[here](https://github.com/comunica/comunica/issues?q=is%3Aissue+is%3Aopen+label%3A%22devx+%F0%9F%8E%A8%22).\n\n## Outreach\n\n_[All outreach-related issues](https://github.com/comunica/comunica/labels/outreach)_\n\nWe intend to connect with different communities that may have overlapping interests,\nwhich we can do by lowering the barrier to entry for developers from other communities.\nThis can for example be achieved by providing pre-packaged versions of Comunica that work out-of-the-box in other environments,\nsuch as for example [rollup.js](https://rollupjs.org/guide/en/).\n\n## Tangents\n\nBelow, you can find several topics that parts of the community are working on, but are not part of the general roadmap.\n\n### Different forms of query execution\n\n_Point of contact: [Ruben Taelman](https://www.rubensworks.net/contact/)_\n\nComunica's current query execution model relies on defining a set of _data sources_ to query over.\nWhile this traditional form of query execution works well in many cases,\nit can be too constrained in cases where _data is spread over many sources across the Web_, which are interlinked.\n\nOne alternative form of query execution is [Link-Traversal-based Query Execution](https://arxiv.org/abs/1108.6328),\nwhere _links are followed_ on the Web to find data.\n\nA future goal of Comunica is the integration of such alternative forms of query execution.\n\n### Alternative query languages\n\n_Point of contact: [Ruben Taelman](https://www.rubensworks.net/contact/)_\n\nSPARQL is currently the (only) recommended way of querying knowdlege graphs that are represented in RDF.\nHowever, there is a wide range of new graph query languages emerging, such as GraphQL, Cypher and GQL, each having their own advantages.\nAs such, being able to express queries over knowledge graphs in different languages may be valuable for different use cases.\n\nFor instance, [GraphQL-LD](/docs/query/advanced/graphql_ld/) already offers one alternative language in which queries can be expressed.\nCompared to SPARQL, GraphQL-LD is less complex, but also less expressive.\n\nGeoSPARQL is another language that may be investigated in the future.\n\n\n"},"f+cO":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Advanced querying'\ndescription: 'Advanced guides on how to get the most out of Comunica.'\nindex: true\n---\n\nThe following guides explore some of the more advanced concepts when querying using Comunica.\n"},foSv:function(e,n,t){"use strict";function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}t.d(n,"a",(function(){return a}))},fx3J:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Adding a config parameter to an actor\'\ndescription: \'For an existing actor, add a parameter that can be customized in the config file.\'\n---\n\nIn this guide, we will add a parameter to an existing actor,\nand show how to set values for this parameter via the config file.\n\nWe will start from the actor we have created in the [guide on contributing a new actor](/docs/modify/getting_started/contribute_actor/).\n\n## 1. Modifying the constructor\n\nWe want to add a parameter that is set at configuration/startup time.\nFor this, we need to make sure that our actor accepts this parameter via the constructor.\n\nFor this, first create a **new interface** that is used as single argument in the constructor:\n```typescript\nexport interface IActorQueryOperationReducedMyArgs extends IActorQueryOperationTypedMediatedArgs {\n  myParam: number;\n}\n```\nHere, `IActorQueryOperationTypedMediatedArgs` is the default constructor argument\nfor query operation actors that contains common parameters that will automatically be set behind the scenes.\n\nNext, **replace our constructor** with the following:\n```typescript\npublic constructor(args: IActorQueryOperationReducedMyArgs) {\n  super(args, \'reduced\');\n}\n```\n\nIn order to use the passed parameter values,\nadd the following field in your class:\n\n```typescript\nprivate readonly myParam: number;\n```\n\nIn order to temporarily check the passed parameter value,\nwe can add a `console.log` statement in the `runOperation` method.\n\nMake sure to run `yarn run build` in the repo root to make sure that your modifications\nto the TypeScript files have been compiled to JavaScript.\n\n## 2. Set values in our config file\n\nEverything has now been setup to define values for our parameter via the config file.\n\nAs such, we can **modify our declaration of our actor in `engines/config-query-sparql/config/query-operation/actors/query/reduced.json`** by adding a value for `"myParam"`:\n```text\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^2.0.0/components/context.jsonld",\n\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-reduced-my/^2.0.0/components/context.jsonld"\n  ],\n  "@id": "urn:comunica:default:Runner",\n  "@type": "Runner",\n  "actors": [\n    {\n      "@id": "urn:comunica:default:query-operation/actors#reduced",\n      "@type": "ActorQueryOperationReducedMy",\n      "mediatorQueryOperation": { "@id": "urn:comunica:default:query-operation/mediators#main" }\n      "myParam": 123\n    }\n  ]\n}\n```\n\nAs a test, you can now attempt a [query execution with our config](/docs/modify/getting_started/contribute_actor/#7--testing-with-comunica-sparql).\nIf you placed a `console.log` statement in your actor,\nyou should now see the value `123` on stdout.\n\n<div class="note">\nIn this guide, we showed how to define an integer parameter.\nYou can instead also define other parameter types,\nwhere parameters can even accept other components (such as mediators).\n</div>\n\n<div class="note">\nWhen running <code>yarn run build</code>, a JSON-LD representation of your TypeScript files\nwill be created in the <code>components/</code> directory of your package.\nThe <code>components/context.jsonld</code> will list all discovered parameters that you can pass within the config file. \n</div>\n'},g1PO:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'A New Website for Comunica'\n---\n\nWe're happy to present a brand new website for Comunica! \ud83c\udf89\n_Don't know that Comunica is? [Read about it here](/about/)._\n\nThis new version contains all **basic information** around Comunica.\nAdditionally, it contains **guides** on how to [query with Comunica](/docs/query/),\nand how to [modify or extend it](/docs/modify/). \n\n\x3c!-- excerpt-end --\x3e\n\nWhile this website is still very much a **work in progress** at the time of writing,\na whole lot of pages have been added already.\nFor instance, the section on [querying with Comunica](/docs/query/) contains some extensive guides.\nIn the near future, more advanced guides on [modifying Comunica](/docs/modify/) will be added.\nIf you're interested in **helping out** with this effort, be sure to have a look at the [contribution guide](/contribute/).\n\nIn the future, this blog will be used for **announcing news** around Comunica,\nwhich can include significant new releases,\nand other things.\nSo be sure to keep your \ud83d\udc40 on this!\nIf you want to be notified of new blog posts, you can [follow Comunica on **Twitter**](https://twitter.com/comunicajs).\n"},"g25/":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Documentation'\ndescription: 'Overview of all Comunica documentation.'\nindex: true\n---\n\nEither you can use Comunica for executing queries, or you can modify it to suit your specific goals.\n\nLooking for the [code documentation](https://comunica.github.io/comunica/) instead?\n\n<div class=\"video\">\nWatch some of these guides in action <em>live</em> within this <a href=\"https://youtu.be/ydpdziVNw1k\">Webinar recording</a>.\n</div>\n"},g3t9:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Release 2.0.0: A new major release with radical simplifications and performance improvements\'\n---\n\nSince its initial release a couple of years ago, Comunica has grown a lot,\nbut it has always remained fully backwards-compatible with every update.\nHowever, as with every software project, there is sometimes a need to make breaking changes\nso that old mechanisms can be replaced with better, newer ones.\nWith this update, we have aggregated several breaking changes into one large update,\nall of which should improve the lives of users one way or another.\nBelow, the primary changes are listed.\n\n\x3c!-- excerpt-end --\x3e\n\n## New query API\n\nFor most people, the biggest change will be in the way you use Comunica for query execution,\nas the package names of the default query engines have been renamed,\nand the JavaScript API has been improved.\n\n### New package names\n\nUp until now, you may have been using `@comunica/actor-init-sparql` (or a variant) as your main entry point for query execution.\n**This main entrypoint has been moved to `@comunica/query-sparql`** (or `@comunica/query-sparql-file` and `@comunica/query-sparql-rdfjs`).\nThis means that your imports and the dependencies in your `package.json` file will require updates.\n\nThe first reason for this renaming is the fact that the new names are shorter and easier to remember.\nThe second reason is mainly for people that want to configure their own Comunica engines,\nwhere the Query Init actor has been decoupled from the query engine entrypoints to simplify the creation of new engines.\n\n### Improved JavaScript query API\n\nAnother major change is related to the way you create and use a Comunica query engine in JavaScript.\nMainly, the following changes have been made:\n\n- `newEngine` has been replaced with the class `QueryEngine` that can be instantiated with the `new` keyword.\n- New result-dependent query methods have been added for simpler result consumption:\n  - `queryBindings` for SELECT queries\n  - `queryQuads` for CONSTRUCT and DESCRIBE queries.\n  - `queryBoolean` for ASK queries\n  - `queryVoid` for update queries\n- The general `query` method still exists, but has been changed.\n- The methods on a Bindings object have been changed and improved, and obtaining values for variables does not require the `?` prefix anymore.\n- If you are using TypeScript, make sure to bump `@rdfjs/types` to at least `1.1.0`.\n\nLearn more about the new API in the [guide on querying in a JavaScript app](/docs/query/getting_started/query_app/).\n\nBelow, you can see an example of a simple SPARQL SELECT query execution in the old and new versions of Comunica.\n\n**Before (Comunica 1.x):**\n```typescript\nconst newEngine = require(\'@comunica/actor-init-sparql\').newEngine;\nconst myEngine = newEngine();\n\nconst result = await myEngine.query(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: [\'https://fragments.dbpedia.org/2015/en\'],\n});\n\nresult.bindingsStream.on(\'data\', (binding) => {\n  console.log(binding.get(\'?s\').value);\n});\nbindingsStream.on(\'end\', () => {});\nbindingsStream.on(\'error\', (error) => console.error(error));\n```\n\n**After (Comunica 2.x):**\n```typescript\nconst QueryEngine = require(\'@comunica/query-sparql\').QueryEngine;\nconst myEngine = new QueryEngine();\n\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: [\'https://fragments.dbpedia.org/2015/en\'],\n});\n\nbindingsStream.on(\'data\', (binding) => {\n  console.log(binding.toString()); // New: quick way to print bindings\n  console.log(binding.get(\'s\').value);\n});\nbindingsStream.on(\'end\', () => {});\nbindingsStream.on(\'error\', (error) => console.error(error));\n```\n\nThis new query API is largely aligned with the recently created [RDF/JS query specification](https://rdf.js.org/query-spec/),\nwhich makes Comunica better interactable and interchangeable within the RDF JavaScript ecosystem.\n\n## Easier engine modifications\n\nBased on the feedback we received from developers that configure their own Comunica engines or implement their own Comunica packages,\nwe have refactored the internals of Comunica in several places to simplify these processes.\n\n### Automatic generation of components files\n\nComunica makes use of the dependency injection framework [Components.js](/docs/modify/advanced/componentsjs/)\nto load its configuration files.\nA requirement for this framework is that each package should expose a semantic description of its classes, i.e., the _components files_.\nThese components files are located within the `components/` directory of each package.\nWhile these files had to be manually created before,\nthese files can now be automatically generated from the TypeScript sources\nusing [Components-Generator.js](https://github.com/LinkedSoftwareDependencies/Components-Generator.js/).\nThis significantly reduces the effort when creating new Comunica packages.\nLearn more about this in the [getting started with modification guides](/docs/modify/getting_started/).\n\n### Config restructuring\n\nUp until now, all configuration files were split up in smaller fragments, but using an arbitrary fragmentation strategy.\nWith this update, all configuration files now use a consistent fragmentation strategy,\nwhere a separate sub-directory exists for each Comunica bus, in which one or more files can exist per actor.\nFurthermore, all configuration files have been moved to a new dedicated (zero-dependency) package\n[`@comunica/config-query-sparql`](https://github.com/comunica/comunica/tree/master/engines/config-query-sparql/),\nwhich simplifies reuse and extension of these config fragments.\nLearn more about this new config structure in the [README of `@comunica/config-query-sparql`](https://github.com/comunica/comunica/blob/master/engines/config-query-sparql/config/README.md).\n\n## Internal changes for better performance\n\nOne primary aspect of [our roadmap](/roadmap/) is to [improve overall performance](https://github.com/comunica/comunica/issues/846).\nIn this update, we refactored the way in which [join operations](/docs/modify/advanced/joins/) are handled,\nbecause these were not flexible enough before, which hindered optimizations.\n\nConcretely, Comunica used to handle most join operations within the Basic Graph Pattern actor,\nwhich made it impossible to use these join operators for joins with other types of operations,\nsuch as property paths, which thereby made these operations very slow.\nWith this refactoring, the join operator implementations have been fully decoupled from the Basic Graph Pattern actor,\nwhich for example makes joins between triple patterns and property paths much more efficient.\n\nWhile performance will be much better in many cases,\nthere are still a lot of [opportunities open for further optimization](https://github.com/comunica/comunica/issues/846).\nWe welcome [contributions](/contribute/) for making these optimizations a reality.\n\nLearn more about [joins in Comunica](/docs/modify/advanced/joins/).\n\n## Explaining query plans\n\nMost large-scale query engines offer some way of inspecting _how_ exactly a query engine will execute a given query,\nwhich is something Comunica has been lacking so far.\n\nWith this update, you can inspect in detail the exact query plan and actors that were used for executing a given query.\nThis functionality exists both on the command-line (via `--explain`), as in the JavaScript API.\nFor example, the command below shows an example of a physical plan that is printed for a given query:\n\n\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n  -q \'SELECT * { ?s ?p ?o. ?s a ?o } LIMIT 100\' --explain physical\n\n{\n  "logical": "slice",\n  "children": [\n    {\n      "logical": "project",\n      "variables": [\n        "s",\n        "p",\n        "o"\n      ],\n      "children": [\n        {\n          "logical": "join",\n          "children": [\n            {\n              "logical": "pattern",\n              "pattern": "?s ?p ?o"\n            },\n            {\n              "logical": "pattern",\n              "pattern": "?s http://www.w3.org/1999/02/22-rdf-syntax-ns#type ?o"\n            },\n            {\n              "logical": "join-inner",\n              "physical": "bind",\n              "bindIndex": 1,\n              "bindOrder": "depth-first",\n              "cardinalities": [\n                {\n                  "type": "estimate",\n                  "value": 1040358853\n                },\n                {\n                  "type": "estimate",\n                  "value": 100022186\n                }\n              ],\n              "joinCoefficients": {\n                "iterations": 6404592831613.728,\n                "persistedItems": 0,\n                "blockingItems": 0,\n                "requestTime": 556926378.1422498\n              },\n...\n```\n\nLearn more about [explaining query plans in Comunica](/docs/query/advanced/explain/).\n\n## Webinar\n\nDue to all of these changes and simplifications,\nwe are planning a public webinar in which the basic usage of Comunica will be explained.\nThis will be useful for new developers that want to get started with Comunica,\nand developers that have used Comunica before, but want to learn about the new ways of using it.\nThis is also a perfect time for new contributors to become part of the community,\nor possibly even the [Comunica Association](/association/).\nMore news on this webinar will follow later.\n\n## Full changelog\n\nWhile this blog post explained the primary changes in Comunica 2.x,\nthere are actually many more smaller changes internally that will make your lives easier.\nIf you want to learn more about these changes, check out the [full changelog](https://github.com/comunica/comunica/blob/master/CHANGELOG.md#v201---2022-03-02).\n'},gAAm:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'HDT\'\ndescription: \'HDT offers highly compressed immutable RDF storage.\'\n---\n\n[HDT](http://www.rdfhdt.org/) is a highly compressed RDF dataset format that enables efficient triple pattern querying.\nComunica enables executing SPARQL queries over HDT files,\nas it is one of the supported [source types](/docs/query/advanced/source_types/).\n\nQuerying over HDT requires [Comunica SPARQL HDT package (`@comunica/actor-init-sparql-hdt`)](https://github.com/comunica/comunica-actor-init-sparql-hdt).\n\n<div class="note">\nComunica SPARQL HDT has not been updated to Comunica v2.x yet,\nwhich may result in incompatibilities when combining this with other Comunica modules. \n</div>\n\n## 1. Installation\n\nSince Comunica runs on Node.js, make sure you have [Node.js installed](https://nodejs.org/en/) on your machine.\nHDT requires GCC 4.9 or higher to be available.\n\nNext, we can install Comunica SPARQL on our machine:\n```bash\n$ npm install -g @comunica/actor-init-sparql-hdt\n```\n\n## 2. SPARQL querying over one HDT file\n\nAfter installing Comunica SPARQL HDT, you will be given access to several commands including `comunica-sparql-hdt`,\nwhich allows you to execute SPARQL queries from the command line.\n\nJust like `comunica-sparql`,\nthis command requires one or more URLs to be provided as **sources** to query over.\nAs last argument, as **SPARQL query string** can be provided.\n\nFor example, the following query retrieves the first 100 triples a local HDT file:\n```bash\n$ comunica-sparql-hdt hdtFile@path/to/myfile.hdt \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100"\n```\n\n## 3. SPARQL querying over multiple HDT files\n\nJust like `comunica-sparql`, querying over multiple sources simply requires you to pass them after each other:\n```bash\n$ comunica-sparql-hdt hdtFile@path/to/myfile1.hdt \\\n    hdtFile@path/to/myfile2.hdt \\\n    hdtFile@path/to/myfile3.hdt \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100"\n```\n\n## 4. Learn more\n\nThis guide only discussed the basic functionality of `comunica-sparql-hdt`.\nYou can learn more options by invoking the _help_ command, or by [reading the Comunica SPARQL documentation](/docs/query/getting_started/query_cli/):\n```text\n$ comunica-sparql-hdt --help\n```\n\nThe API for [querying over HDT files in JavaScript apps is identical to Comunica SPARQL](/docs/query/getting_started/query_app/),\nand just requires importing `@comunica/actor-init-sparql-hdt` instead of `@comunica/query-sparql`.\n\nIn order to [set up a SPARQL endpoint, `comunica-sparql-hdt-http` can be used, just like Comunica SPARQL](/docs/query/getting_started/setup_endpoint/).\n'},gEVb:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Setting up a Web client'\ndescription: 'Set up a user-friendly static Web page where SPARQL queries can be executed client-side'\n---\n\nIf you want to easily **demonstrate** a couple of SPARQL queries on a **Web page**,\nor if you want to show off your custom built Comunica engine,\nthen you can do this using the [Comunica jQuery widget](https://github.com/comunica/jQuery-Widget.js/).\n\nAs an example, a public instance of this widget is available at http://query.linkeddatafragments.org/.\n\n## 1. Install from npm\n\n### 1.1. Installation\n\nSince Comunica runs on Node.js, make sure you have [Node.js installed](https://nodejs.org/en/) on your machine.\n\nNext, we can install [`@comunica/web-client-generator`](https://github.com/comunica/jQuery-Widget.js/):\n```bash\n$ npm install -g @comunica/web-client-generator\n```\n\n### 1.2. Building a static Website for production\n\nAfter installing, you can build a production-ready version of [Comunica SPARQL](https://github.com/comunica/comunica/tree/master/engines/query-sparql):\n```bash\n$ comunica-web-client-generator\n```\n\nThe resulting `build` directory can be deployed on a Web server\nusing something like [NGINX](https://www.nginx.com/) or [GitHub pages](https://pages.github.com/).\n\n### 1.3. Build a custom config\n\nIn order to override the [default config](https://github.com/comunica/jQuery-Widget.js/blob/master/config/config-default.json), you can pass one as argument.\n\n```bash\n$ comunica-web-client-generator config/config-default.json\n```\n\nThis assumes that your engine's dependencies are available in your working directory.\nIf this is not the case, provide a path to your engine's directory via the `-c` option:\n\n```bash\n$ comunica-web-client-generator path/to/engine/config/config-default.json -c path/to/engine/\n```\n\n### 1.4. Change settings and queries\n\nThe default datasources and queries can be changed as follows:\n\n```bash\n$ comunica-web-client-generator -s settings.json -q queries\n```\n\nExamples for the [`settings.json`](https://github.com/comunica/jQuery-Widget.js/blob/master/settings.json) file\nand the [`queries`](https://github.com/comunica/jQuery-Widget.js/tree/master/queries) directory.\n\n### 1.5. Show all available options\n\nAll available options for this command are:\n\n```bash\n$ comunica-web-client-generator -h\ncomunica-web-client-generator generates Comunica Web clients\n  Usage:\n    comunica-web-client-generator config/config-default.json\n    comunica-web-client-generator config/config-default.json -d my-build/ -s my-settings.json\n    comunica-web-client-generator config/config-default.json -q my-queries/\n    comunica-web-client-generator config/config-default.json -w my-webpack.config.js\n\n  Options:\n    -d            Destination of the built output (defaults to build)\n    -m            The compilation mode (defaults to production, can also be development)\n    -c            Path to the main Comunica module (defaults to cwd)\n    -q            Path to custom queries directory\n    -s            Path to custom settings file\n    -w            Path to custom Webpack config\n    --help        Print this help message\n```\n\n## 2. Install from GitHub\n\n### 2.1. Installation\n\nSince Comunica runs on Node.js, make sure you have [Node.js installed](https://nodejs.org/en/) on your machine.\n\nNext, we can [clone the Comunica jQuery widget repo](https://github.com/comunica/jQuery-Widget.js/), and install it:\n```bash\n$ git clone https://github.com/comunica/jQuery-Widget.js.git\n$ cd jQuery-Widget.js\n$ npm install\n```\n\n### 2.2. Starting the built-in Web server\n\nThe widget comes with its own (optional) Web server,\nwhich can be started as follows:\n```bash\n$ npm run dev\n```\n\nNow, you page will be live at `http://localhost:8080`.\n\n<div class=\"note\">\nThis port can be changed to something else by adding the <code>--port</code> option\nwithin the <code>dev</code> script in <code>package.json</code>.\n</div>\n\n### 2.3. Building a static Website for production\n\nThe built-in Web server should primarily be used for testing.\nIf you want to deploy this page on a Web server,\nsomething like [NGINX](https://www.nginx.com/) or [GitHub pages](https://pages.github.com/) is recommended.\n\nYou can build a production-ready version of this page as follows:\n```bash\n$ npm run build\n```\n\nThe contents of the `build` folder can now be deployed on to any Web server.\n\n### 2.4. Changing the default queries and datasets\n\nYou'll notice that the page contains some example queries and datasets by default.\nYou can change these by modifying the contents of the `queries/` folder and the `settings.json` file.\n\n<div class=\"note\">\nWhen running the built-in dev server, the process will have to be restarted after every change to the queries or settings.\n</div>\n"},hb5E:function(e,n,t){"use strict";const a=t(0),o=t("Pcej"),i=t("tfEw"),r=t("8Qj+"),s=t("mpv1"),c=t("n0UO"),u=t("Q9oK"),l=t("mx6s"),d=t("X+87");function p(e,n){if(""===e)return{data:{},content:e,excerpt:"",orig:e};let t=u(e);const a=p.cache[t.content];if(!n){if(a)return t=Object.assign({},a),t.orig=a.orig,t;p.cache[t.content]=t}return function(e,n){const t=i(n),a=t.delimiters[0],r="\n"+t.delimiters[1];let c=e.content;t.language&&(e.language=t.language);const u=a.length;if(!d.startsWith(c,a,u))return s(e,t),e;if(c.charAt(u)===a.slice(-1))return e;c=c.slice(u);const h=c.length,m=p.language(c,t);m.name&&(e.language=m.name,c=c.slice(m.raw.length));let f=c.indexOf(r);-1===f&&(f=h);e.matter=c.slice(0,f);""===e.matter.replace(/^\s*#[^\n]+/gm,"").trim()?(e.isEmpty=!0,e.empty=e.content,e.data={}):e.data=l(e.language,e.matter,t);f===h?e.content="":(e.content=c.slice(f+r.length),"\r"===e.content[0]&&(e.content=e.content.slice(1)),"\n"===e.content[0]&&(e.content=e.content.slice(1)));s(e,t),(!0===t.sections||"function"===typeof t.section)&&o(e,t.section);return e}(t,n)}p.engines=c,p.stringify=function(e,n,t){return"string"===typeof e&&(e=p(e,t)),r(e,n,t)},p.read=function(e,n){const t=p(a.readFileSync(e,"utf8"),n);return t.path=e,t},p.test=function(e,n){return d.startsWith(e,i(n).delimiters[0])},p.language=function(e,n){const t=i(n).delimiters[0];p.test(e)&&(e=e.slice(t.length));const a=e.slice(0,e.search(/\r?\n/));return{raw:a,name:a?a.trim():""}},p.cache={},p.clearCache=function(){p.cache={}},e.exports=p},hyoZ:function(e,n,t){"use strict";var a=t("w+qe"),o=["kind","resolve","construct","instanceOf","predicate","represent","defaultStyle","styleAliases"],i=["scalar","sequence","mapping"];e.exports=function(e,n){if(n=n||{},Object.keys(n).forEach((function(n){if(-1===o.indexOf(n))throw new a('Unknown option "'+n+'" is met in definition of "'+e+'" YAML type.')})),this.tag=e,this.kind=n.kind||null,this.resolve=n.resolve||function(){return!0},this.construct=n.construct||function(e){return e},this.instanceOf=n.instanceOf||null,this.predicate=n.predicate||null,this.represent=n.represent||null,this.defaultStyle=n.defaultStyle||null,this.styleAliases=function(e){var n={};return null!==e&&Object.keys(e).forEach((function(t){e[t].forEach((function(e){n[String(e)]=t}))})),n}(n.styleAliases||null),-1===i.indexOf(this.kind))throw new a('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}},i7ji:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Contribute'\ndescription: 'Contribute to the development of Comunica.'\n---\n\n## Report bugs or request features\n\nThe easiest way to contribute to Comunica is by **reporting the bugs** your encounter,\nand **requesting new features** or enchancements.\n\nBoth of these should be done via [**GitHub issues**](https://github.com/comunica/comunica/issues).\nMake sure to be as descriptive as possible, and completely fill in the requested template.\n\n## Fix bugs or implement new features\n\nIf there is a certain bug that annoys you,\nor if you see the opportunity for a new feature that would make your life easier,\nyou are welcome to contribute by submitting a **pull request**.\nBefore you open a pull request, it is considered a good practise to first\n[open an issue](https://github.com/comunica/comunica/issues) or [discuss it with the community](/ask/).\n\nDon't know on what to get started? Have a look at issues tagged with the [`good-first-issue`](https://github.com/comunica/comunica/issues?q=is%3Aissue+is%3Aopen+label%3Agood-first-issue) label\nor the [`dev-ready`](https://github.com/comunica/comunica/issues?q=is%3Aissue+is%3Aopen+label%3Adev-ready) label.\nIssues tagged with [`good-first-issue`](https://github.com/comunica/comunica/issues?q=is%3Aissue+is%3Aopen+label%3Agood-first-issue) are issues that should be implementable by new contributors.\nIssues tagged with [`dev-ready`](https://github.com/comunica/comunica/issues?q=is%3Aissue+is%3Aopen+label%3Adev-ready) are potentially harder issues, but they are directly implementable without research.\n\nWhen contributing, make sure to keep in mind the following:\n* Read how to [set up a development environment](https://github.com/comunica/comunica#development-setup).\n* Read the guide on [contributing an actor](/docs/modify/getting_started/contribute_actor/).\n* [Use descriptive, imperative commit message](https://chris.beams.io/posts/git-commit/)\n* Pull requests should pass all checks\n    * Unit tests with 100% branching coverage (`yarn test`)\n    * Clean code with passing linter (`yarn run lint`)\n    * Code documentation\n    * [Pass all spec and integration tests](/docs/modify/advanced/testing/)\n    * Signing the [Contributor License Agreement](https://cla-assistant.io/comunica/comunica)\n* Only add the files that are needed, so don't blindly do a `git -a`. (avoid adding editor-specific files)\n* A good editor can make your life a lot easier. For example, [WebStorm](https://www.jetbrains.com/community/education/#students) can be used for free with an academic license.\n* All JSdoc can be found on https://comunica.github.io/comunica/\n\nTips and tricks:\n* Only do `yarn install` in the repo root, and *never* in one of the sub-packages, as this can break your repo.\n* `yarn run build` will (re)build all TypeScript to JavaScript. This can also be executed on package-level.\n* `yarn run build-watch` will continuously build the TypeScript to JavaScript. This is useful during development.\n* `yarn test` and `yarn run lint` execute the tests and linter checks locally. Before a PR is opened, these must always pass, and testing coverage must be 100%.\n* When editing configuration files in packages like `actor-init-sparql`, `yarn run prepare` can be executed to compile the JSON files to JavaScript before they can be executed. (not needed when executing dynamically)\n* When modifying a dependency package such as [sparqlee](https://github.com/comunica/sparqlee), [Yarn's link functionality](https://classic.yarnpkg.com/en/docs/cli/link/) can be used to force your local version of that dependency to be used in Comunica.\n\n## Write documentation\n\nThis website aims to provide detailed documentation on how to use and modify Comunica.\nIf you see an opportunity for improving this documentation, fixing mistakes, or adding new guides,\nyou are welcome to contribute via [GitHub](https://github.com/comunica/website).\n\n## Create example code\n\nThe [Comunica examples repository](https://github.com/comunica/examples) contains several example packages that modify Comunica,\nwith details on how they are created and how they work.\nAnyone is more than welcome to contribute new example packages to this repository.\nFor inspiration, you can have a look at the [example requests](https://github.com/comunica/examples/issues?q=is%3Aissue+is%3Aopen+label%3Aexample-request).\n\n## Guidelines for core developers\n\nThe following guidelines only apply to people with push access to the Comunica repositories.\n\n### Branching Strategy\n\nThe `master` branch is the main development branch.\n\nReleases are `tags` on the `master` branch.\n\nAll changes (features and bugfixes) must be done in a separate branch, and PR'd to `master`.\n\nRecursive features must be PR'd to their parent feature branches, as a feature can consist of multiple smaller features.\n\nThe naming strategy of branches is as follows:\n* Features: `feature/short-name-of-feature`\n* Bugfixes: `fix/short-name-of-fix`\n\n### Issue Strategy\n\nIssues should be assigned to people when possible, and must be progressed using the applicable GitHub project boards:\n\n* [Maintenance](https://github.com/orgs/comunica/projects/2)\n* [Development](https://github.com/orgs/comunica/projects/3)\n* [Documentation](https://github.com/orgs/comunica/projects/4)\n\nGeneral issues progress:\n\n1. To Do: When the issue is accepted and assigned, but not in progress yet.\n2. In Progress: When the issue is being worked on by the assignee.\n3. To Review: When the issue is resolved, but must be reviewed. This can be attached to a PR.\n4. Done: When the issue is resolved and reviewed. If attached to a PR, this can be merged, or closed otherwise.\n\n### Making a new release\n\nMaking a new release only requires invoking `yarn run publish-release` from the repository root, which does the following using [lerna](https://github.com/lerna/lerna):\n\n* Prompts your for providing the new version (major, minor, patch).\n* Bump the versions from all changed packages.\n* [Generate a changelog](https://github.com/rubensworks/manual-git-changelog.js) from all commits since the last release. The process will halt until you modify (and save) the changelog where needed (remove unneeded commits, and categorize them), and confirm by pressing any key in the console. \n* Release all changed packages to npm.\n* Push the tag to GitHub.\n* Push to master.\n\n<div class=\"note\">\nIf publication fails due to a random NPM server error,\nyou can invoke the [`retry-republish.sh`](https://github.com/comunica/comunica/blob/master/.github/retry-publish.sh) scripts to retry the publication.\nThis script can be safely called multiple times.\nYou may have to stash your repo first.\n</div>\n\n### Making a new pre-release\n\nMaking a new release only requires invoking `yarn run publish-canary` from the repository root, which does the following using [lerna](https://github.com/lerna/lerna):\n\n* Temporarily do a patch release increment on all packages in the form of `<version>-alpha.<git-head-sha>.0`.\n* Release all packages to npm with the `next` tag.\n* Undo temporary changes\n\nPre-releases do not trigger changelog changes, git commits, and pushes.\n\n"},iGab:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Release 1.19.0: Simplifications for extensions\'\n---\n\nThe 1.19.0 release focuses on simplications for developing Comunica extension.\nIt contains no significant fixes or changes for end-users.\n\n\x3c!-- excerpt-end --\x3e\n\n## Components.js 4\n\nComunica\'s modules are wired together using the [Components.js](/docs/modify/advanced/componentsjs/) dependency injection framework.\nAs of recently, Components.js [has been updated](https://github.com/LinkedSoftwareDependencies/Components.js)\nto major release version 4, which features several simplifications for developers.\n\nWhile this release is backwards-compatible,\nwe do recommend developers of Comunica modifications to make the following tweaks.\n\n### Reduce clutter in `package.json`\n\nAll Comunica modules would typically contain the following entries in their `package.json` files:\n\n```json\n{\n  ...\n  "lsd:module": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-abstract-bindings-hash",\n  "lsd:components": "components/components.jsonld",\n  "lsd:contexts": {\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-abstract-bindings-hash/^1.0.0/components/context.jsonld": "components/context.jsonld"\n  },\n  "lsd:importPaths": {\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-abstract-bindings-hash/^1.0.0/components/": "components/"\n  },\n  ...\n}\n```\n\nThis can now be simpified to:\n\n```json\n{\n  ...\n  "lsd:module": true\n  ...\n}\n```\n\n### Update Components.js context version\n\nIf you define your own JSON-LD contexts,\nit is recommended to update to the latest version of the Components.js version\n\n```text\n-   "https://linkedsoftwaredependencies.org/bundles/npm/componentsjs/^3.0.0/components/context.jsonld",\n+   "https://linkedsoftwaredependencies.org/bundles/npm/componentsjs/^4.0.0/components/context.jsonld",\n```\n\nWhile this change is optional, you will see a startup warning mentioning the use of a deprecated context URL.\n\n## Next steps\n\nIn the future, we plan further simplifications to Comunica modifications.\nConcretely, we intend to enable to automatic generation of module and component files based on TypeScript source code.\n'},iYKO:function(e,n,t){var a={"./about.md":"k+Dg","./ask.md":"cF01","./association.md":"xNmn","./association/board.md":"sXTL","./association/bounty_process.md":"Qnqd","./blog.md":"pwXB","./blog/2020-08-19-intro.md":"g1PO","./blog/2020-08-24-release_1_16.md":"lA3M","./blog/2020-09-25-release_1_17.md":"RX2P","./blog/2020-11-02-release_1_18.md":"AMha","./blog/2021-01-18-release_1_19.md":"iGab","./blog/2021-03-30-release_1_20.md":"I0sh","./blog/2021-04-27-release_1_21.md":"K1ps","./blog/2021-06-21-comunica_association_bounties.md":"Z3Df","./blog/2021-08-30-release_1_22.md":"T87h","./blog/2021-11-08-comunica_association_members.md":"BXjD","./blog/2022-03-03-release_2_0.md":"g3t9","./blog/2022-06-29-release_2_3.md":"3yd8","./blog/2022-07-14-association_launch.md":"P4my","./contribute.md":"i7ji","./docs.md":"g25/","./docs/1_query.md":"DBOs","./docs/1_query/1_getting_started.md":"8cl0","./docs/1_query/1_getting_started/1_query_cli.md":"pp00","./docs/1_query/1_getting_started/1_update_cli.md":"eQII","./docs/1_query/1_getting_started/2_query_cli_file.md":"l9cK","./docs/1_query/1_getting_started/3_query_app.md":"IwNq","./docs/1_query/1_getting_started/3_update_app.md":"L+/e","./docs/1_query/1_getting_started/4_query_browser_app.md":"yojd","./docs/1_query/1_getting_started/5_query_docker.md":"IAsa","./docs/1_query/1_getting_started/6_setup_endpoint.md":"Tpt5","./docs/1_query/1_getting_started/7_setup_web_client.md":"gEVb","./docs/1_query/1_getting_started/8_query_dev_version.md":"q+Th","./docs/1_query/2_usage.md":"r/UL","./docs/1_query/3_faq.md":"Of3P","./docs/1_query/advanced.md":"f+cO","./docs/1_query/advanced/basic_auth.md":"/ijM","./docs/1_query/advanced/bindings.md":"6eLG","./docs/1_query/advanced/caching.md":"R7CN","./docs/1_query/advanced/context.md":"VVau","./docs/1_query/advanced/destination_types.md":"A2Uh","./docs/1_query/advanced/explain.md":"6r/d","./docs/1_query/advanced/extension_functions.md":"jVc1","./docs/1_query/advanced/federation.md":"6sZF","./docs/1_query/advanced/graphql_ld.md":"Yd58","./docs/1_query/advanced/hdt.md":"gAAm","./docs/1_query/advanced/logging.md":"1mAy","./docs/1_query/advanced/memento.md":"C4fY","./docs/1_query/advanced/proxying.md":"OHH1","./docs/1_query/advanced/rdfjs.md":"YQ0G","./docs/1_query/advanced/rdfjs_querying.md":"9qMJ","./docs/1_query/advanced/rdfjs_updating.md":"MNrr","./docs/1_query/advanced/result_formats.md":"EqAk","./docs/1_query/advanced/solid.md":"vS18","./docs/1_query/advanced/source_types.md":"efn3","./docs/1_query/advanced/sparql_query_types.md":"G7oB","./docs/1_query/advanced/specifications.md":"dL9c","./docs/2_modify.md":"KaIB","./docs/2_modify/1_getting_started.md":"NceB","./docs/2_modify/1_getting_started/1_custom_config_cli.md":"6E7Q","./docs/2_modify/1_getting_started/2_custom_config_app.md":"iaXc","./docs/2_modify/1_getting_started/3_custom_init.md":"9Nb6","./docs/2_modify/1_getting_started/4_custom_web_client.md":"pSfN","./docs/2_modify/1_getting_started/5_contribute_actor.md":"3Et8","./docs/2_modify/1_getting_started/6_actor_parameter.md":"fx3J","./docs/2_modify/2_extensions.md":"bRhx","./docs/2_modify/3_faq.md":"jmwt","./docs/2_modify/advanced.md":"MSYD","./docs/2_modify/advanced/algebra.md":"qJO7","./docs/2_modify/advanced/architecture_core.md":"FVUX","./docs/2_modify/advanced/architecture_sparql.md":"CS1f","./docs/2_modify/advanced/browser_builds.md":"TqtO","./docs/2_modify/advanced/buses.md":"GFD4","./docs/2_modify/advanced/componentsjs.md":"yl98","./docs/2_modify/advanced/custom_cli_arguments.md":"P4uI","./docs/2_modify/advanced/hypermedia.md":"jVJ0","./docs/2_modify/advanced/joins.md":"dpqj","./docs/2_modify/advanced/logging.md":"53tM","./docs/2_modify/advanced/mediators.md":"2vG4","./docs/2_modify/advanced/observers.md":"cQFD","./docs/2_modify/advanced/query_operation_result_types.md":"IeaT","./docs/2_modify/advanced/rdf_parsing_serializing.md":"DdL9","./docs/2_modify/advanced/sparqlee.md":"NYKf","./docs/2_modify/advanced/testing.md":"/CLx","./docs/2_modify/benchmarking.md":"3VWD","./events.md":"V4BS","./events/2019-06-03-eswc.md":"Pav7","./events/2019-10-26-iswc.md":"zVPR","./events/2022-09-07-association_launch.md":"Oq3b","./events/2022-09-13-semantics_conference.md":"4eDq","./logos.md":"Bqm/","./research.md":"aL4H","./research/amf.md":"uEUi","./research/link_traversal.md":"nbqJ","./roadmap.md":"eqAM"};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id="iYKO"},iaXc:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Querying with a custom configuration in a JavaScript app\'\ndescription: \'Create a custom configuration of Comunica modules with changed features, and query with it from within your application using the JavaScript API.\'\n---\n\nIn the previous guide, we looked into\n[querying with a custom config from the command line](/docs/modify/getting_started/custom_config_cli/).\nIn this guide, we\'ll do the same from within a JavaScript application,\nbut we will **split up our config across different files** for convenience.\n\n<div class="note">\nThis guide assumes basic knowledge on querying with Comunica.\nIf you haven\'t looked into this yet, it is recommended to follow\n<a href="/docs/query/getting_started/query_app/">the getting started guide on querying within a JavaScript app</a>.\n</div>\n\n## 1. Installation\n\n<div class="note">\nThis assumes you already have an npm package.\nIf you don\'t have one yet, create one using <code>npm init</code>.\nYou will also need a JavaScript file to write in, such as <code>main.js</code>.\n</div>\n\nIn order to add Comunica SPARQL as a _dependency_ to your [Node.js](https://nodejs.org/en/) application,\nwe can execute the following command:\n```bash\n$ npm install @comunica/query-sparql\n```\n\n## 2. Creating a new query engine\n\nWhile [`QueryEngine` is used to import Comunica SPARQL\'s default config](/docs/query/getting_started/query_app/),\nwe can load a custom config by creating our engine via `newEngineDynamic()`:\n```javascript\nconst QueryEngineFactory = require(\'@comunica/query-sparql\').QueryEngineFactory;\n\nconst myEngine = await new QueryEngineFactory().create({\n    configPath: \'config.json\', // Relative or absolute path \n});\n```\n\n`configPath` refers to a config file, which we will create in the next step.\n\n## 3. Start from an existing config file\n\nThe easiest way to create a custom config, is to start from an existing one, and add/remove things to fit your needs.\n\nLet\'s create a file called `config.json` in your package.\n\nIn this guide, we will start from\nthe [Comunica SPARQL default config file](https://github.com/comunica/comunica/blob/master/engines/config-query-sparql/config/config-default.json).\nLet\'s **copy it\'s contents entirely into our `config.json`**:\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/config-query-sparql/^2.0.0/components/context.jsonld"\n  ],\n  "import": [\n    "ccqs:config/context-preprocess/actors.json",\n    "ccqs:config/context-preprocess/mediators.json",\n    "ccqs:config/hash-bindings/actors.json",\n    "ccqs:config/hash-bindings/mediators.json",\n    "ccqs:config/http/actors.json",\n    "ccqs:config/http/mediators.json",\n    "ccqs:config/http-invalidate/actors.json",\n    "ccqs:config/http-invalidate/mediators.json",\n    "ccqs:config/init/actors.json",\n    "ccqs:config/optimize-query-operation/actors.json",\n    "ccqs:config/optimize-query-operation/mediators.json",\n    "ccqs:config/query-operation/actors.json",\n    "ccqs:config/query-operation/mediators.json",\n    "ccqs:config/query-parse/actors.json",\n    "ccqs:config/query-parse/mediators.json",\n    "ccqs:config/query-result-serialize/actors.json",\n    "ccqs:config/query-result-serialize/mediators.json",\n    "ccqs:config/dereference/actors.json",\n    "ccqs:config/dereference/mediators.json",\n    "ccqs:config/dereference-rdf/actors.json",\n    "ccqs:config/dereference-rdf/mediators.json",\n    "ccqs:config/rdf-join/actors.json",\n    "ccqs:config/rdf-join/mediators.json",\n    "ccqs:config/rdf-join-entries-sort/actors.json",\n    "ccqs:config/rdf-join-entries-sort/mediators.json",\n    "ccqs:config/rdf-join-selectivity/actors.json",\n    "ccqs:config/rdf-join-selectivity/mediators.json",\n    "ccqs:config/rdf-metadata/actors.json",\n    "ccqs:config/rdf-metadata/mediators.json",\n    "ccqs:config/rdf-metadata-extract/actors.json",\n    "ccqs:config/rdf-metadata-extract/mediators.json",\n    "ccqs:config/rdf-parse/actors.json",\n    "ccqs:config/rdf-parse/mediators.json",\n    "ccqs:config/rdf-parse-html/actors.json",\n    "ccqs:config/rdf-resolve-hypermedia/actors.json",\n    "ccqs:config/rdf-resolve-hypermedia/mediators.json",\n    "ccqs:config/rdf-resolve-hypermedia-links/actors.json",\n    "ccqs:config/rdf-resolve-hypermedia-links/mediators.json",\n    "ccqs:config/rdf-resolve-hypermedia-links-queue/actors.json",\n    "ccqs:config/rdf-resolve-hypermedia-links-queue/mediators.json",\n    "ccqs:config/rdf-resolve-quad-pattern/actors.json",\n    "ccqs:config/rdf-resolve-quad-pattern/mediators.json",\n    "ccqs:config/rdf-serialize/actors.json",\n    "ccqs:config/rdf-serialize/mediators.json",\n    "ccqs:config/rdf-update-hypermedia/actors.json",\n    "ccqs:config/rdf-update-hypermedia/mediators.json",\n    "ccqs:config/rdf-update-quads/actors.json",\n    "ccqs:config/rdf-update-quads/mediators.json"\n  ]\n}\n```\n\n## 4. Executing SPARQL SELECT queries\n\nOnce your engine has been created based on your custom config,\nyou can use it to execute any SPARQL query, such as a `SELECT` query:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: [\'http://fragments.dbpedia.org/2015/en\'],\n});\n\nbindingsStream.on(\'data\', (binding) => {\n    console.log(binding.get(\'s\').value);\n    console.log(binding.get(\'p\').value);\n    console.log(binding.get(\'o\').value);\n});\n```\n\nIf you wrote this in a file called `main.js`, you can invoke it by executing `node main.js`.\n\n<div class="note">\nIf you run into config loading problems,\nmake sure your app has a <code>package.json</code> file,\notherwise config loading will fail.\n</div>\n\n## 5. Only allowing `SELECT` queries\n\nOur goal in this step is to build a query engine that can **_only_ execute `SELECT`** queries,\nand we don\'t want to be able to execute `CONSTRUCT` and `DESCRIBE` queries.\nThis will require us to remove some more actors.\n\nWhile the actors for `CONSTRUCT` and `DESCRIBE` are defined in `ccqs:config/query-operation/actors.json`,\nwe can not just simply remove that file from our imports,\nbecause it also contains actors for other SPARQL query operators which we don\'t want to remove, such as `SELECT`.\n\nIn the [guide on querying with a custom config from the command line](/docs/modify/getting_started/custom_config_cli/),\nwe achieved this by inlining `ccqs:config/query-operation/actors.json` into our main config file.\nIn this guide, we\'ll do this in a cleaner way by **redefining** the contents of `ccqs:config/query-operation/actors.json`\nin a **separate local file**, and applying our changes there.\n\n### 5.1. Declare config options in `package.json`\n\nBefore we can refer to other files within our config file,\nwe have to add some entries to our `package.json` file\nso that the config files can be found during engine initialization.\n\nConcretely, we need to **add the following entry to `package.json`**:\n```text\n{\n  ...\n  "lsd:module": true\n  ...\n}\n```\n\n<div class="note">\nIf you want to learn more about what this entry means,\nread our guide on <a href="/docs/modify/advanced/componentsjs/">Components.js</a>,\na dependency injection framework that Comunica uses.\n</div>\n\n### 5.2. Create a context\n\nIn order to allow our config file to import other files,\nwe need to create a JSON-LD context file.\n\nCreate the file **`components/context.jsonld`** with the following contents:\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/componentsjs/^5.0.0/components/context.jsonld",\n    {\n      "npmd": "https://linkedsoftwaredependencies.org/bundles/npm/",\n      "my": "npmd:my-package/^1.0.0/"\n    }\n  ]\n}\n```\n\nAgain, make sure to replace `my-package` with your package `name`.\n\n<div class="note">\nTo avoid collisions with other packages, it is recommended to use another prefix than <code>"my"</code> in your context.\n</div>\n\n### 5.3. Copying `config/query-operation/actors.json`\n\nNext, we will create a local copy of `ccqs:config/query-operation/actors.json`.\n\nFor this, create a file **`config/query-operation/actors.json`**,\nand paste in the contents of [`ccqs:config/query-operation/actors.json`](https://raw.githubusercontent.com/comunica/comunica/master/engines/config-query-sparql/config/query-operation/actors.json) ([GitHub](https://github.com/comunica/comunica/blob/master/engines/config-query-sparql/config/query-operation/actors.json)).\n\n### 5.4. Make config refer to local `config/query-operation/actors.json`\n\nNow that we have declared config options in our `package.json`,\ncreated a context,\nand created a local copy of `config/query-operation/actors.json`,\neverything is ready to **modify our `config.json` to refer to our local `config/query-operation/actors.json`**.\n\nFor this, remove the following line from `config.json`:\n```diff\n-  "ccqs:config/query-operation/actors.json",\n```\nAnd replace it with the following line:\n```diff\n+  "my:config/query-operation/actors.json",\n```\n\nAlso add the newly created config to the contexts of the config file (again replacing `my-package` with your package `name`):\n```diff\n    "@context": [\n+     "https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/components/context.jsonld",\n      "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/config-query-sparql/^2.0.0/components/context.jsonld"\n    ],\n```\n\nThis change means that Comunica will load its query operators from our local `config/query-operation/actors.json` file,\ninstead of the default `ccqs:config/query-operation/actors.json` file.\n\nIf you run your app again, things should still function like before at this point.\n\n### 5.5. Remove actors\n\nNext, we will remove the actors we don\'t need.\nConcretely, we will remove the following imports to actors:\n\n* `ccqs:config/query-operation/actors/query/construct.json`: Handles `CONSTRUCT` queries.\n* `ccqs:config/query-operation/actors/query/describe.json`: Handles `DESCRIBE` queries.\n\nFor this, remove the following lines:\n```diff\n-    "ccqs:config/query-operation/actors/query/construct.json",\n-    "ccqs:config/query-operation/actors/query/describe.json",\n```\n\n### 5.6. Test changes\n\nAfter this change, you should now be unable to execute `CONSTRUCT` or `DESCRIBE` queries.\nTry this out by executing the following:\n```bash\nconst quadStream = await myEngine.queryQuads(`\n  CONSTRUCT WHERE {\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: [\'http://fragments.dbpedia.org/2015/en\'],\n});\n\nquadStream.on(\'data\', (quad) => {\n    console.log(quad.subject.value);\n    console.log(quad.predicate.value);\n    console.log(quad.object.value);\n    console.log(quad.graph.value);\n});\n```\n\nExecuting a `SELECT` query will still work:\n```bash\nconst bindingsStream = await myEngine.queryBindings(`\n  SELECT ?s ?p ?o WHERE {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100`, {\n  sources: [\'http://fragments.dbpedia.org/2015/en\'],\n});\n\nbindingsStream.on(\'data\', (binding) => {\n    console.log(binding.get(\'s\').value);\n    console.log(binding.get(\'p\').value);\n    console.log(binding.get(\'o\').value);\n});\n```\n\nYou have now successfully built your own custom Comunica engine that is a bit more lightweight than the default one.\nJust like the `CONSTRUCT` and `DESCRIBE` actors,\nyou can remove any other actors you don\'t want to make it even more lightweight.\n\nIf you want, you can create additional config file parts in `config/`\nand refer to them from our main `config.json` with the `my:` prefix.\n\n<div class="note">\nIf you want to <em>add</em> an actor that is not present in the default Comunica SPARQL config,\nhave a look at \n<a href="https://github.com/comunica/examples/tree/master/packages/configure-sparql-http-solid">this example on replacing the HTTP actor with a Solid HTTP actor</a>.\n</div>\n'},jO2K:function(e,n,t){"use strict";var a;try{a=t("HDXh").Buffer}catch(r){}var o=t("hyoZ"),i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";e.exports=new o("tag:yaml.org,2002:binary",{kind:"scalar",resolve:function(e){if(null===e)return!1;var n,t,a=0,o=e.length,r=i;for(t=0;t<o;t++)if(!((n=r.indexOf(e.charAt(t)))>64)){if(n<0)return!1;a+=6}return a%8===0},construct:function(e){var n,t,o=e.replace(/[\r\n=]/g,""),r=o.length,s=i,c=0,u=[];for(n=0;n<r;n++)n%4===0&&n&&(u.push(c>>16&255),u.push(c>>8&255),u.push(255&c)),c=c<<6|s.indexOf(o.charAt(n));return 0===(t=r%4*6)?(u.push(c>>16&255),u.push(c>>8&255),u.push(255&c)):18===t?(u.push(c>>10&255),u.push(c>>2&255)):12===t&&u.push(c>>4&255),a?a.from?a.from(u):new a(u):u},predicate:function(e){return a&&a.isBuffer(e)},represent:function(e){var n,t,a="",o=0,r=e.length,s=i;for(n=0;n<r;n++)n%3===0&&n&&(a+=s[o>>18&63],a+=s[o>>12&63],a+=s[o>>6&63],a+=s[63&o]),o=(o<<8)+e[n];return 0===(t=r%3)?(a+=s[o>>18&63],a+=s[o>>12&63],a+=s[o>>6&63],a+=s[63&o]):2===t?(a+=s[o>>10&63],a+=s[o>>4&63],a+=s[o<<2&63],a+=s[64]):1===t&&(a+=s[o>>2&63],a+=s[o<<4&63],a+=s[64],a+=s[64]),a}})},jVJ0:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Hypermedia\'\ndescription: \'Discovery of data source capabilities during query execution.\'\n---\n\nComunica enables **[hypermedia](https://en.wikipedia.org/wiki/HATEOAS)-driven query execution**.\nThis allows users to provide data sources by URL,\nand Comunica will automatically detect the querying capabilities for this source\nto determine an efficient query execution plan. \n\nThis strategy makes it so that when providing a link to a SPARQL endpoint (e.g. https://dbpedia.org/sparql),\ncommunication will be done using SPARQL queries.\nWhile when providing a link to a plain RDF file (e.g. http://ruben.verborgh.org/profile/),\nthe whole file will be downloaded and queried in-memory.\n\n<div class="note">\nThis page only describes the handling of hypermedia for read queries.\nThe handling of hypermedia for update queries happens in a very similar manner,\nwith the main difference that the [RDF Resolve Hypermedia bus](/docs/modify/advanced/buses/#rdf-resolve-hypermedia)\nis replaced by the [RDF Update Hypermedia bus](/docs/modify/advanced/buses/#rdf-update-hypermedia).\n</div>\n\n## Hypermedia actor\n\nThe actor in Comunica that drives hypermedia handling is\n[`@comunica/actor-rdf-resolve-quad-pattern-hypermedia`](https://github.com/comunica/comunica/tree/master/packages/actor-rdf-resolve-quad-pattern-hypermedia).\nThis actor is registered to the [RDF Resolve Quad Pattern bus](/docs/modify/advanced/buses/#rdf-resolve-quad-pattern).\nThis means that this actor will be invoked for every triple/quad pattern in the query.\n\n<div class="note">\nThe <a href="/docs/modify/advanced/architecture_sparql/">SPARQL architecture</a>\nshows how this hypermedia actor relates to all other actors and buses.\n</div>\n\n## Steps for handling hypermedia\n\nFor each URL-based data source,\nthe hypermedia actor will always go through the following steps:\n\n1. Dereference RDF ([Dereference RDF bus](/docs/modify/advanced/buses/#dereference-rdf))\n2. Split data and metadata streams ([RDF Metadata bus](/docs/modify/advanced/buses/#rdf-metadata))\n3. Extract metadata as object ([RDF Metadata Extract bus](/docs/modify/advanced/buses/#rdf-metadata-extract))\n4. Determine links to other sources ([RDF Resolve Hypermedia Links bus](/docs/modify/advanced/buses/#rdf-resolve-hypermedia-links))\n5. Create a queue for managing links ([RDF Resolve Hypermedia Links Queue bus](/docs/modify/advanced/buses/#rdf-resolve-hypermedia-links-queue))\n6. Handle source based on metadata ([RDF Resolve Hypermedia bus](/docs/modify/advanced/buses/#rdf-resolve-hypermedia))\n\nHereafter, we go over these three steps using three example sources:\n\n1. https://dbpedia.org/sparql\n2. http://fragments.dbpedia.org/2016-04/en\n3. https://ruben.verborgh.org/profile/\n\n## 1. Dereference RDF\n\nAn HTTP(S) request is done to retrieve the RDF data at the given location\nvia [content negotiation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation).\nDifferent ways of doing this may exist in the [Dereference RDF bus](/docs/modify/advanced/buses/#dereference-rdf).\nConcretely, the input is an URL, and the output is a stream of parsed RDF triples/quads.\n\nFor example:\n\n1. https://dbpedia.org/sparql\n```turtle\nns1:sparql\trdf:type\tsd:Service ;\n\t        sd:endpoint\tns1:sparql ;\n\t        sd:feature\tsd:UnionDefaultGraph ,\n\t\t    sd:DereferencesURIs .\n@prefix ns3:\t<http://www.w3.org/ns/formats/> .\nns1:sparql\tsd:resultFormat\tns3:SPARQL_Results_JSON ,\n\t\t    ns3:SPARQL_Results_XML ,\n\t\t    ns3:Turtle ,\n\t\t    ns3:N-Triples ,\n\t\t    ns3:N3 ,\n\t\t    ns3:RDF_XML ,\n\t\t    ns3:SPARQL_Results_CSV ,\n\t\t    ns3:RDFa ;\n\t        sd:supportedLanguage\tsd:SPARQL10Query ;\n\t        sd:url\tns1:sparql .\n```\n2. http://fragments.dbpedia.org/2016-04/en\n```turtle\n<https://fragments.dbpedia.org/#dataset> hydra:member <https://fragments.dbpedia.org/2016-04/en#dataset>.\n<https://fragments.dbpedia.org/2016-04/en#dataset> a void:Dataset, hydra:Collection;\n    void:subset <https://fragments.dbpedia.org/2016-04/en>;\n    hydra:search _:triplePattern.\n_:triplePattern hydra:template "https://fragments.dbpedia.org/2016-04/en{?subject,predicate,object}";\n    hydra:variableRepresentation hydra:ExplicitRepresentation;\n    hydra:mapping _:subject, _:predicate, _:object.\n_:subject hydra:variable "subject";\n    hydra:property rdf:subject.\n_:predicate hydra:variable "predicate";\n    hydra:property rdf:predicate.\n_:object hydra:variable "object";\n    hydra:property rdf:object.\n<https://fragments.dbpedia.org/2016-04/en> void:subset <https://fragments.dbpedia.org/2016-04/en>;\n    a hydra:PartialCollectionView;\n    dcterms:title "Linked Data Fragment of DBpedia 2016-04"@en;\n    dcterms:description "Triple Pattern Fragment of the \'DBpedia 2016-04\' dataset containing triples matching the pattern { ?s ?p ?o }."@en;\n    dcterms:source <https://fragments.dbpedia.org/2016-04/en#dataset>;\n    hydra:totalItems "1040358853"^^xsd:integer;\n    void:triples "1040358853"^^xsd:integer;\n    hydra:itemsPerPage "100"^^xsd:integer;\n    hydra:first <https://fragments.dbpedia.org/2016-04/en?page=1>;\n    hydra:next <https://fragments.dbpedia.org/2016-04/en?page=2>.\n<http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2> dbpprop:date "1899-05-06"^^xsd:date;\n    dbpprop:isCitedBy <http://dbpedia.org/resource/Tierce_(unit)>;\n    dbpprop:newspaper "Biloxi Daily Herald";\n    dbpprop:page "6";\n    dbpprop:title "A New System of Weights and Measures";\n    dbpprop:url <http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2>.\n...\n```\n3. https://ruben.verborgh.org/profile/\n```turtle\n<https://ruben.verborgh.org/profile/>\n    a foaf:Document, foaf:PersonalProfileDocument;\n    rdfs:label "Ruben Verborgh\u2019s FOAF profile"@en;\n    foaf:maker :me;\n    foaf:primaryTopic :me.\n:me a foaf:Person;\n    foaf:name  "Ruben Verborgh"@en, "Ruben Verborgh"@nl;\n    rdfs:label "Ruben Verborgh"@en, "Ruben Verborgh"@nl;\n    vcard:fn   "Ruben Verborgh"@en, "Ruben Verborgh"@nl;\n    con:preferredURI "https://ruben.verborgh.org/profile/#me";\n    foaf:givenName "Ruben"@en, "Ruben"@nl;\n    foaf:familyName "Verborgh"@en, "Verborgh"@nl;\n...\n```\n\n## 2. Split data and metadata streams\n\nSome RDF sources may include metadata inside the document,\nsuch as [Triple Pattern Fragments](https://linkeddatafragments.org/specification/triple-pattern-fragments/).\nAs such, there needs to be a way to distinguish between data and metadata triples,\nfor which different strategies exist in the [RDF Metadata bus](/docs/modify/advanced/buses/#rdf-metadata).\n\nFor example:\n\n1. https://dbpedia.org/sparql\n\n**Data:** _empty_\n\n**Metadata:**\n```turtle\nns1:sparql\trdf:type\tsd:Service ;\n\t        sd:endpoint\tns1:sparql ;\n\t        sd:feature\tsd:UnionDefaultGraph ,\n\t\t    sd:DereferencesURIs .\n@prefix ns3:\t<http://www.w3.org/ns/formats/> .\nns1:sparql\tsd:resultFormat\tns3:SPARQL_Results_JSON ,\n\t\t    ns3:SPARQL_Results_XML ,\n\t\t    ns3:Turtle ,\n\t\t    ns3:N-Triples ,\n\t\t    ns3:N3 ,\n\t\t    ns3:RDF_XML ,\n\t\t    ns3:SPARQL_Results_CSV ,\n\t\t    ns3:RDFa ;\n\t        sd:supportedLanguage\tsd:SPARQL10Query ;\n\t        sd:url\tns1:sparql .\n```\n2. http://fragments.dbpedia.org/2016-04/en\n\n**Data:**\n```turtle\n<http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2> dbpprop:date "1899-05-06"^^xsd:date;\n    dbpprop:isCitedBy <http://dbpedia.org/resource/Tierce_(unit)>;\n    dbpprop:newspaper "Biloxi Daily Herald";\n    dbpprop:page "6";\n    dbpprop:title "A New System of Weights and Measures";\n    dbpprop:url <http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2>.\n...\n```\n**Metadata:**\n```turtle\n<https://fragments.dbpedia.org/#dataset> hydra:member <https://fragments.dbpedia.org/2016-04/en#dataset>.\n<https://fragments.dbpedia.org/2016-04/en#dataset> a void:Dataset, hydra:Collection;\n    void:subset <https://fragments.dbpedia.org/2016-04/en>;\n    hydra:search _:triplePattern.\n_:triplePattern hydra:template "https://fragments.dbpedia.org/2016-04/en{?subject,predicate,object}";\n    hydra:variableRepresentation hydra:ExplicitRepresentation;\n    hydra:mapping _:subject, _:predicate, _:object.\n_:subject hydra:variable "subject";\n    hydra:property rdf:subject.\n_:predicate hydra:variable "predicate";\n    hydra:property rdf:predicate.\n_:object hydra:variable "object";\n    hydra:property rdf:object.\n<https://fragments.dbpedia.org/2016-04/en> void:subset <https://fragments.dbpedia.org/2016-04/en>;\n    a hydra:PartialCollectionView;\n    dcterms:title "Linked Data Fragment of DBpedia 2016-04"@en;\n    dcterms:description "Triple Pattern Fragment of the \'DBpedia 2016-04\' dataset containing triples matching the pattern { ?s ?p ?o }."@en;\n    dcterms:source <https://fragments.dbpedia.org/2016-04/en#dataset>;\n    hydra:totalItems "1040358853"^^xsd:integer;\n    void:triples "1040358853"^^xsd:integer;\n    hydra:itemsPerPage "100"^^xsd:integer;\n    hydra:first <https://fragments.dbpedia.org/2016-04/en?page=1>;\n    hydra:next <https://fragments.dbpedia.org/2016-04/en?page=2>.\n```\n\n3. https://ruben.verborgh.org/profile/\n\n**Data:**\n```turtle\n<https://ruben.verborgh.org/profile/>\n    a foaf:Document, foaf:PersonalProfileDocument;\n    rdfs:label "Ruben Verborgh\u2019s FOAF profile"@en;\n    foaf:maker :me;\n    foaf:primaryTopic :me.\n:me a foaf:Person;\n    foaf:name  "Ruben Verborgh"@en, "Ruben Verborgh"@nl;\n    rdfs:label "Ruben Verborgh"@en, "Ruben Verborgh"@nl;\n    vcard:fn   "Ruben Verborgh"@en, "Ruben Verborgh"@nl;\n    con:preferredURI "https://ruben.verborgh.org/profile/#me";\n    foaf:givenName "Ruben"@en, "Ruben"@nl;\n    foaf:familyName "Verborgh"@en, "Verborgh"@nl;\n...\n```\n\n**Metadata:** _empty_\n\n## 3. Extract metadata as object\n\nUsing actors on the [RDF Metadata Extract bus](/docs/modify/advanced/buses/#rdf-metadata-extract),\nrelevant parts of the metadata stream are identified,\nand a convenient metadata object is constructed for later use.\n\nFor example:\n\n1. https://dbpedia.org/sparql\n```json\n{\n  "sparqlService": "https://dbpedia.org/sparql"\n}\n```\n2. http://fragments.dbpedia.org/2016-04/en\n```json\n{\n  "first": "https://fragments.dbpedia.org/2016-04/en?page=1",\n  "next": "https://fragments.dbpedia.org/2016-04/en?page=2",\n  "searchForms": {\n    "values": [\n      {\n        "mappings": {\n          "subject": "http://www.w3.org/1999/02/22-rdf-syntax-ns#subject",\n          "predicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate",\n          "object": "http://www.w3.org/1999/02/22-rdf-syntax-ns#object"\n        },\n        "template": "https://fragments.dbpedia.org/2016-04/en{?subject,predicate,object}"\n      }\n    ]\n  },\n  "totalItems": 1040358853\n}\n```\n3. https://ruben.verborgh.org/profile/\n```json\n{}\n```\n\n## 4. Determine links to other sources\n\nBased on the detected metadata, links are extracted that can optionally be followed.\nThese links are determined using actors on the [RDF Resolve Hypermedia Links bus](/docs/modify/advanced/buses/#rdf-resolve-hypermedia-links).\n\nFor example:\n\n1. https://dbpedia.org/sparql: _None_\n2. http://fragments.dbpedia.org/2016-04/en: https://fragments.dbpedia.org/2016-04/en?page=2\n3. https://ruben.verborgh.org/profile/: _None_\n\n## 5. Create a queue for managing links\n\nUsing the [RDF Resolve Hypermedia Links Queue bus](/docs/modify/advanced/buses/#rdf-resolve-hypermedia-links-queue),\na [`ILinkQueue`](https://comunica.github.io/comunica/interfaces/bus_rdf_resolve_hypermedia_links_queue.ilinkqueue.html) instance is created\nusing which the order is determined to process links.\n\nBy default, this will be a queue that processes links in FIFO order.\n\n## 6. Handle source based on metadata\n\nFinally, the [RDF Resolve Hypermedia bus](/docs/modify/advanced/buses/#rdf-resolve-hypermedia)\ncontains actors that can handle sources based on the extracted metadata.\n\nConcretely, the detected metadata will be given to each actor on the bus,\nand the actor that can handle it with the best _filtering capabilities_\nwill be allowed to handle it.\n\nFor example:\n\n1. https://dbpedia.org/sparql: SPARQL query to https://dbpedia.org/sparql\n2. http://fragments.dbpedia.org/2016-04/en: Fill in `https://fragments.dbpedia.org/2016-04/en{?subject,predicate,object}`, and follow all subsequent next-page links.\n3. https://ruben.verborgh.org/profile/: No hypermedia, so fallback to querying over all triples in the returned data stream.\n'},jVc1:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Extension Functions'\ndescription: 'Providing implementations for SPARQL extension functions.'\n---\n\nSPARQL allows non-standard, [custom extension functions](https://www.w3.org/TR/sparql11-query/#extensionFunctions) to be used within queries.\nIn order to provide an implementation to these extension functions,\nComunica allows developers to plug them in via the context.\n\n<div class=\"note\">\nTake into account that when writing SPARQL queries with extension functions,\nthat these queries will not be portable to other types of query engines anymore,\nas these extension functions may not be standardized.\n</div>\n\n## Dictionary-based extension functions\n\nThe easiest way to plug in extension functions to Comunica is by using\nthe `extensionFunctions` [context entry](/docs/query/advanced/context/)\nin a [JavaScript application](/docs/query/getting_started/query_app/):\n\n```typescript\nimport {DataFactory} from \"rdf-data-factory\";\n\nconst DF = new DataFactory();\n\nconst bindingsStream = await myEngine.queryBindings(`\nPREFIX func: <http://example.org/functions#>\nSELECT ?caps WHERE {\n  ?s ?p ?o.\n  BIND (func:to-upper-case(?o) AS ?caps)\n}\n`, {\n  sources: ['https://www.rubensworks.net/'],\n  extensionFunctions: {\n    'http://example.org/functions#to-upper-case'(args: RDF.Term[]) {\n      const arg = args[0];\n      if (arg.termType === 'Literal' && arg.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {\n        return DF.literal(arg.value.toUpperCase(), arg.datatype);\n      }\n      return arg;\n    },\n  },\n});\n```\n\nWithin this `extensionFunctions` dictionary, you can provide any number of extension functions.\nThese functions may even be `async`.\n\n## Callback-based extension functions\n\nIf function names are not known beforehand,\nor the dictionary-based format is not usable for whatever reason,\nthen the callback-based `extensionFunctionCreator` entry may be used:\n\n```typescript\nimport {DataFactory} from \"rdf-data-factory\";\n\nconst DF = new DataFactory();\n\nconst bindingsStream = await myEngine.queryBindings(`\nPREFIX func: <http://example.org/functions#>\nSELECT ?caps WHERE {\n  ?s ?p ?o.\n  BIND (func:to-upper-case(?o) AS ?caps)\n}\n`, {\n  sources: ['https://www.rubensworks.net/'],\n  extensionFunctionCreator: (funcTerm: RDF.NamedNode) => {\n    if (funcTerm.value === 'http://example.org/functions#to-upper-case') {\n      return (args: RDF.Term[]) => {\n        const arg = args[0];\n        if (arg.termType === 'Literal' && arg.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {\n          return DF.literal(arg.value.toUpperCase(), arg.datatype);\n        }\n        return arg;\n      };\n    }\n  },\n});\n```\n\nThe `extensionFunctionCreator` is invoked upon any occurrence of an extension function,\nand is called with the extension function name, wrapped within an [RDF/JS named node](/docs/query/advanced/rdfjs/).\nThe return type of this function is expected to be a function with the same signature\nas the values of the  `extensionFunction` dictionary, or `undefined`.\n"},jmwt:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Modify FAQ'\ndescription: 'Frequently asked question about Comunica modification.'\n---\n\nCan't find an answer to your question?\nFeel free to [ask us](/ask/), or have a look at the\n[example](https://github.com/comunica/examples) repository.\n\n## Should I publish my package to npm before I can use it?\n\nWhile it is recommended to publish your reusable Comunica packages to npm, this is not required.\nThe [Components.js](/docs/modify/advanced/componentsjs/) dependency injection framework is able to work with packages that are locally linked to each other, as long as they are available in the `node_modules/` directory.\n\nIf you receive warnings in the form of `Detected remote context lookup for...`,\nthis usually means that Components.js was not able to find the corresponding package locally, and will [fallback to a remote context lookup](https://github.com/LinkedSoftwareDependencies/Components.js/discussions/82).\nThis can either be caused by an incorrect context URL, or a missing dependency in the `node_modules/` directory.\n\n## How to query over a non-RDF source?\n\nAdding support for new types of sources is typically done by adding a new actor to\nthe [RDF Resolve Quad Pattern bus](/docs/modify/advanced/buses/#rdf-resolve-quad-pattern).\n[Click here](https://github.com/comunica/examples/tree/master/packages/actor-rdf-resolve-quad-pattern-api-weather)\nto find an example on how to query over a JSON weather API source.\n\n## How to count all triples that are received by the query engine?\n\n[Click here](https://github.com/comunica/examples/tree/master/packages/actor-observe-rdf-dereference)\nto find an example on how this can be done.\n"},"k+Dg":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'About'\ndescription: 'Learn more about Comunica.'\n---\n\nComunica is a knowledge graph querying framework.<br >\nThis page provides more details about its goals and motivations.\n\nRelated pages:\n* [Roadmap](/roadmap/)\n* [Contribute](/contribute/)\n* [Logos](/logos/)\n\n<div class=\"video\">\nWatch a <a href=\"https://youtu.be/ydpdziVNw1k\">Webinar recording</a> to learn more about Comunica.\n</div>\n\n## Flexible querying of Linked Data\n\n[**Linked Data**](https://www.w3.org/standards/semanticweb/data) on the Web exists in **many shapes and forms**.\nLinked Data can be published using plain [RDF](https://www.w3.org/TR/rdf11-concepts/) files\nin various **syntaxes**, such as [JSON-LD](https://json-ld.org/), [Turtle](https://www.w3.org/TR/turtle/), [HTML+RDFa](https://www.w3.org/TR/html-rdfa/), and more.\nNext to that, different forms of **queryable Web interfaces** exist, such as [SPARQL endpoints](https://www.w3.org/TR/sparql11-protocol/) and [Triple Pattern Fragments (TPF) interfaces](https://linkeddatafragments.org/in-depth/#tpf).\nIf we want to **query** Linked Data from the Web, we need to be able to cope with this heterogeneity.\n\n**Comunica** is a **quering framework** that has been designed to handle different types of Linked Data interfaces in a **flexible** manner.\nIts primary goal is _executing [SPARQL](https://www.w3.org/TR/sparql11-query/) queries over one or more interfaces_.\n\n## Comunica is a meta-query engine\n\nComunica should not be seen as a query engine.\nInstead, Comunica is a _meta_ query engine using which query engines can be created.\nIt does this by providing a set of **modules** that can be **wired** together in a flexible manner.\n\nWhile we provide default configurations of Comunica to easily [get started with querying](/docs/query/getting_started/),\nanyone can [configure their own query engine](/docs/modify/getting_started/).\nThis fine-tuning of Comunica to suit your own needs, and avoiding the overhead of modules that are not needed.\n\n## For and on the Web\n\nWe strongly believe in the existence of **open Web standards**, such as those provided by [W3C](https://www.w3.org/) and [WhatWG](https://whatwg.org/).\nAs such, [Comunica **implements** several specifications](/docs/query/advanced/specifications/) such as [RDF](https://www.w3.org/TR/rdf11-concepts/) and [SPARQL](https://www.w3.org/TR/sparql11-query/).\nFurthermore, Comunica is implemented using Web-based technologies in **JavaScript**, which enables usage through browsers,\nthe command line, the SPARQL protocol, or any Web or JavaScript application.\n\n## Open\n\nComunica is an **open-source** software project that is available under the [MIT license](https://github.com/comunica/comunica/blob/master/LICENSE.txt),\nwhich means that it is allowed to be used in both open and commercial projects.\nNext to the source code, also our development process is open, which you can read or contribute to on [GitHub](https://github.com/orgs/comunica/projects),\nor read our [high-level roadmap](/roadmap/).\n\n## Research and Education\n\nComunica is designed as a flexible research platform for research on query execution.\nAs such, our goal is to make it sufficiently easy for researchers\nto investigate alternative query algorithms and techniques by [modifying engines](/docs/modify/).\nNext to this, we also aim to educate researchers and developers on [how to use](/docs/) Comunica.\n\n## Linked Data Fragments\n\nOne of the motivations behind Comunica is to be a [**Linked Data Fragments Client**](https://linkeddatafragments.org/concept/).\nLinked Data Fragments is a theoretical framework to analyse different Linked Data interfaces.\n\nWhile software used to exist to query over specific types of Linked Data interfaces,\nit used to be impossible to query over **combinations of different interfaces**.\nComunica solves this need by being independent of specific types of interfaces,\nas support for new interfaces can be plugged in.\n\n## Stability\n\nA primary goal of Comunica is to acts as a **stable** querying framework.\nFor this, we spend extra effort in [continuous testing](/docs/modify/advanced/testing/) at different levels.\n\n## Supporting the JavaScript ecosystem\n\nComunica depends on many dependencies to achieve its goals,\nsuch as spec-compliant RDF parsers and serializers.\nWe support these libraries, and contribute to them.\n\n## Who works on Comunica?\n\nFirst and foremost, Comunica is an **open-source** framework.\nThe Comunica project has been initiated by [IDLab](https://www.ugent.be/ea/idlab/en) at Ghent University \u2013 imec,\nand is being actively developed and maintained by a variety of [contributors](https://github.com/comunica/comunica/graphs/contributors).\nAll development happens publicly via GitHub [project boards](https://github.com/orgs/comunica/projects), [issues](https://github.com/comunica/comunica/issues), and [pull requests](https://github.com/comunica/comunica/pulls).\nAnyone is welcome to [contribute](/contribute/) to this project.\n\nAs of recently, the [Comunica Association](/association/) has been founded as a non-profit organization\nto make Comunica development more sustainable in the long term.\n"},"kVK+":function(e,n){n.read=function(e,n,t,a,o){var i,r,s=8*o-a-1,c=(1<<s)-1,u=c>>1,l=-7,d=t?o-1:0,p=t?-1:1,h=e[n+d];for(d+=p,i=h&(1<<-l)-1,h>>=-l,l+=s;l>0;i=256*i+e[n+d],d+=p,l-=8);for(r=i&(1<<-l)-1,i>>=-l,l+=a;l>0;r=256*r+e[n+d],d+=p,l-=8);if(0===i)i=1-u;else{if(i===c)return r?NaN:1/0*(h?-1:1);r+=Math.pow(2,a),i-=u}return(h?-1:1)*r*Math.pow(2,i-a)},n.write=function(e,n,t,a,o,i){var r,s,c,u=8*i-o-1,l=(1<<u)-1,d=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=a?0:i-1,m=a?1:-1,f=n<0||0===n&&1/n<0?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(s=isNaN(n)?1:0,r=l):(r=Math.floor(Math.log(n)/Math.LN2),n*(c=Math.pow(2,-r))<1&&(r--,c*=2),(n+=r+d>=1?p/c:p*Math.pow(2,1-d))*c>=2&&(r++,c/=2),r+d>=l?(s=0,r=l):r+d>=1?(s=(n*c-1)*Math.pow(2,o),r+=d):(s=n*Math.pow(2,d-1)*Math.pow(2,o),r=0));o>=8;e[t+h]=255&s,h+=m,s/=256,o-=8);for(r=r<<o|s,u+=o;u>0;e[t+h]=255&r,h+=m,r/=256,u-=8);e[t+h-m]|=128*f}},l9cK:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Querying local files from the command line\'\ndescription: \'Execute SPARQL queries over local RDF files directly from the command line.\'\n---\n\nUsing Comunica SPARQL File, you can query over RDF files that are stored on your local machine.\n\n<div class="note">\nWhile Comunica SPARQL allows you to <a href="/docs/query/getting_started/query_cli/">query sources exposed via URLs on the command line</a>,\nit does <i>not</i> allow you to query RDF local files.\nThis is because Comunica SPARQL can be used in a variety of use cases, of which deployment on a public server is one.\nIn some of these cases, the ability to access the local file system can imply a major security risk,\nwhich is why we require the use of a separate package. \n</div>\n\n## 1. Installation\n\nSince Comunica runs on Node.js, make sure you have [Node.js installed](https://nodejs.org/en/) on your machine.\n\nNext, we can install Comunica SPARQL on our machine:\n```bash\n$ npm install -g @comunica/query-sparql-file\n```\n\n## 2. SPARQL querying over one local file\n\nAfter installing Comunica SPARQL, you will be given access to several commands including `comunica-sparql-file`,\nwhich allows you to execute SPARQL queries from the command line.\n\nJust like `comunica-sparql`, this command requires one or more URLs to be provided as **sources** to query over.\nAs last argument, as **SPARQL query string** can be provided.\n\nFor example, the following query retrieves the first 100 triples from `path/to/my/file.ttl`:\n```bash\n$ comunica-sparql-file path/to/my/file.ttl \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100"\n```\n\n## 3. SPARQL querying over one remote file\n\nNext to local file, also _remote_ files identified by a URL can be queried:\n```bash\n$ comunica-sparql-file https://www.rubensworks.net/ \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100"\n```\n\n## 4. Learn more\n\nThis guide only discussed the basic functionality of `comunica-sparql-file`.\nYou can learn more options by invoking the _help_ command, or by [reading the Comunica SPARQL documentation](/docs/query/getting_started/query_cli/):\n```text\n$ comunica-sparql-file --help\n```\n'},lA3M:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Release 1.16.0: Full spec compliance, property paths, CSV/TSV, basic auth, and fixes\'\n---\n\nWith the latest release of Comunica, we have achieved the major milestone of **full compliance to the SPARQL 1.1 specification**.\nWhile Comunica has had support for all SPARQL 1.1 operators for a while,\nsome small parts were not always fully handled according to the spec,\nand property paths were not fully supported.\n\nThanks to the help of several students over the summer, these issues have been resolved,\nand all tests from [the SPARQL 1.1 test suite](https://w3c.github.io/rdf-tests/sparql11/) now pass.\n\n\x3c!-- excerpt-end --\x3e\n\n## SPARQL 1.1 Query compliance\n\nOur continuous integration tool has been configured to continuously check correctness\nusing unit tests, integration tests, and the SPARQL 1.1 query test suite.\nSo far, some tests from this test suite used to fail, primarily due to the lack of full property path support.\nThanks to the help of [several](https://github.com/comunica/comunica/commits?author=stephaniech97) [students](https://github.com/comunica/comunica/commits?author=FlorianFV) that [contributed](/contribute/)\nduring the summer, all of these issues have been resolved,\nwhich makes Comunica fully compliant to the [SPARQL 1.1 Query](https://www.w3.org/TR/sparql11-query/) specification.\n\nThe next major goal will now be to implement the [SPARQL 1.1 Update](https://www.w3.org/TR/sparql11-update/) specification.\n\nInterested in helping out? Let us know via [GitHub](https://github.com/comunica/comunica/issues/435).\n\n## Property paths\n\nSPARQL 1.1 provides the [property paths syntax](https://www.w3.org/TR/sparql11-query/#propertypaths),\nwhich is a power-user feature that allows complex paths between two resources to be expressed.\nAs of now, Comunica implements all property paths functionality according to the specification.\n\nFor example, property paths allow you to define alternative predicates:\n```sparql\nSELECT ?person WHERE {\n  [ rdfs:label "Bruce Willis"@en ] (dbpedia-owl:spouse|dbpedia-owl:child) ?person.\n}\n```\n\nTry out some example queries live via our Web client:\n\n* [Spouses and children of Bruce Willis](http://query.linkeddatafragments.org/#transientDatasources=http%3A%2F%2Ffragments.dbpedia.org%2F2016-04%2Fen&query=SELECT%20%3Fperson%0AWHERE%20%7B%0A%20%20%5B%20rdfs%3Alabel%20%22Bruce%20Willis%22%40en%20%5D%0A%20%20%20%20(dbpedia-owl%3Aspouse%7Cdbpedia-owl%3Achild)%20%3Fperson.%0A%7D)\n* [In-laws of Brad Pitt](http://query.linkeddatafragments.org/#transientDatasources=http%3A%2F%2Ffragments.dbpedia.org%2F2016-04%2Fen&query=SELECT%20%3Fperson%0AWHERE%20%7B%0A%20%20dbpedia%3ABrad_Pitt%20dbpedia-owl%3Aspouse*%20%3Fperson.%0A%7D)\n* [Movies from directors who have directed movies with Brad Pitt](http://query.linkeddatafragments.org/#transientDatasources=http%3A%2F%2Ffragments.dbpedia.org%2F2016-04%2Fen&query=SELECT%20%3Fmovie%0AWHERE%20%7B%0A%20%20%5B%20rdfs%3Alabel%20%22Brad%20Pitt%22%40en%20%5D%0A%20%20%20%20%5Edbpedia-owl%3Astarring%2Fdbpedia-owl%3Adirector%2F%5Edbpedia-owl%3Adirector%20%3Fmovie.%0A%7D)\n\nShould you run into any bugs related to property paths, \nbe sure to [report them on our issue tracker](https://github.com/comunica/comunica/issues).\n\n## CSV/TSV Serializers\n\nWhile there already was support for many [result formats](/docs/query/advanced/result_formats/) in Comunica,\n[CSV and TSV](https://www.w3.org/TR/sparql11-results-csv-tsv/) support was missing.\nAs of this release, this lack has been resolved.\nThey can be used by requesting the `text/csv` or `text/tab-separated-values` media types.\n\nFor example, try it out as follows from the command line:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100" \\\n    -t \'text/csv\'\n```\n\n## Basic authentication\n\nSometimes, access to data on the Web requires [HTTP Basic Authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).\nAs of this release, you can [configure Comunica to pass the required credentials](/docs/query/advanced/basic_auth/) to access these sources that require authentication.\n\nFor example, username and password can be passed from the command line:\n```bash\n$ comunica-sparql https://username:password@example.org/page \\\n    "SELECT * WHERE { ?s ?p ?o }"\n```\n\n## And more\n\nAside from the main features above, several fixes have been done.\nCheck out the [full changelog](https://github.com/comunica/comunica/blob/master/CHANGELOG.md#v1160---2020-08-24) to read more about them.\n'},md7G:function(e,n,t){"use strict";function a(e){return(a="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,n){return!n||"object"!==a(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}t.d(n,"a",(function(){return o}))},mpv1:function(e,n,t){"use strict";const a=t("tfEw");e.exports=function(e,n){const t=a(n);if(null==e.data&&(e.data={}),"function"===typeof t.excerpt)return t.excerpt(e,t);const o=e.data.excerpt_separator||t.excerpt_separator;if(null==o&&(!1===t.excerpt||null==t.excerpt))return e;const i="string"===typeof t.excerpt?t.excerpt:o||t.delimiters[0],r=e.content.indexOf(i);return-1!==r&&(e.excerpt=e.content.slice(0,r)),e}},mx6s:function(e,n,t){"use strict";const a=t("VQEG"),o=t("tfEw");e.exports=function(e,n,t){const i=o(t),r=a(e,i);if("function"!==typeof r.parse)throw new TypeError('expected "'+e+'.parse" to be a function');return r.parse(n,i)}},n0UO:function(module,exports,__webpack_require__){"use strict";const yaml=__webpack_require__("ZR4k"),engines=exports=module.exports;engines.yaml={parse:yaml.safeLoad.bind(yaml),stringify:yaml.safeDump.bind(yaml)},engines.json={parse:JSON.parse.bind(JSON),stringify:function(e,n){const t=Object.assign({replacer:null,space:2},n);return JSON.stringify(e,t.replacer,t.space)}},engines.javascript={parse:function parse(str,options,wrap){try{return!1!==wrap&&(str="(function() {\nreturn "+str.trim()+";\n}());"),eval(str)||{}}catch(err){if(!1!==wrap&&/(unexpected|identifier)/i.test(err.message))return parse(str,options,!1);throw new SyntaxError(err)}},stringify:function(){throw new Error("stringifying JavaScript is not supported")}}},nbqJ:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Link Traversal\'\ndescription: \'An overview of research that has been done on Link-Traversal-based Query Processing.\'\n---\n\n[Link-Traversal-based Query Processing (LTQP)](https://link.springer.com/content/pdf/10.1007/s13222-013-0122-1.pdf) is a querying paradigm\nthat enables querying over an interlinked set of Linked Data documents\nby following links between them.\n\nResearch is being done on LTQP through various implementations in Comunica.\nThis page summarizes ongoing work. \n\n## 1. Experimental Implementations\n\nA [dedicated (mono)repository](https://github.com/comunica/comunica-feature-link-traversal) has been created\nthat contains actors for enabling LTQP inside Comunica.\n\nSince there are multiple approaches for handling LTQP,\nmultiple [configurations](https://github.com/comunica/comunica-feature-link-traversal/tree/master/engines/config-query-sparql-link-traversal/config).\nThe default configuration ([`config-default.json`](https://github.com/comunica/comunica-feature-link-traversal/blob/master/engines/config-query-sparql-link-traversal/config/config-default.json))\ncontains actor configurations that work best on average.\n\n## 2. Try it out\n\nBelow, we list links to several example configurations for LTQP\nthat have been built as a Web client.\n\n<iframe src="https://comunica.github.io/comunica-feature-link-traversal-web-clients/builds/" width="100%" height="1000px" frameborder="0" marginheight="0" marginwidth="0" scrolling="auto">Loading...</iframe>\n'},ntbh:function(e,n){(function(n){e.exports=function(){var e={149:function(e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"===typeof window&&(n=window)}e.exports=n}},t={};function a(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}},i=!0;try{e[n](o,o.exports,a),i=!1}finally{i&&delete t[n]}return o.exports}return a.ab=n+"/",a(149)}()}).call(this,"/")},pSfN:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Exposing your custom config in a Web client\'\ndescription: \'Demonstrate your query engine as a static Web page.\'\n---\n\nIn this guide, we use the [Comunica Web Client](https://github.com/comunica/jQuery-Widget.js)\nto run our engine client-side as a static Web page,\njust like http://query.linkeddatafragments.org/.\n\nThis guide assumes you already [expose your custom config as an npm package](/docs/modify/getting_started/custom_init/).\n\n## 1. Cloning the repo\n\n1. Go to https://github.com/comunica/jQuery-Widget.js/\n2. Make sure you are logged into your GitHub account.\n3. Click on the "Fork" button.\n\nAfter this, a copy of the jQuery-Widget.js repo will be available for your account\nin which you can make all the changes you want.\n\nNext, we will **clone** your fork to the local file system as follows: \n```bash\n$ git clone https://github.com/<my-username>/jQuery-Widget.js.git\n```\n_Make sure your replace `<my-username>` with your GitHub username._\n\nAs a final setup step, we can install all dependencies as follows:\n```bash\n$ cd jQuery-Widget.js\n$ yarn install\n```\n\n## 2. Plugging in your custom config\n\nBy default, the Web client is configured with Comunica SPARQL (`@comunica/query-sparql`).\nIn this step, we will modify it so that our custom engine is configured instead.\n\nFirst, install our package as a dependency:\n```bash\n$ npm install my-package\n```\nMake sure to replace `my-package` the name of [the package you created before](/docs/modify/getting_started/custom_init/).\n\nNext, replace the `import` in `config/config-default.json` as follows:\n```text\n{\n  ...\n  "import": [\n    "my:config/config-default.json"\n  ]\n}\n```\nMake sure to replace the `"my"` prefix so it refers to the scope of your package.\n\n## 3. Build and run\n\nThese were the only changes required to plug your package into the Web client.\n\nTo start a local Web server to test your engine, run the following:\n```bash\n$ yarn run dev\n```\n\nTo create an actual build in the `build/` folder that can be deployed to any Web server, run the following:\n```bash\n$ yarn run build\n```\n\nOptionally, you can now [tweak the default datasources and queries](https://github.com/comunica/jQuery-Widget.js#readme). \n'},peYA:function(e,n,t){"use strict";var a=t("hyoZ");e.exports=new a("tag:yaml.org,2002:null",{kind:"scalar",resolve:function(e){if(null===e)return!0;var n=e.length;return 1===n&&"~"===e||4===n&&("null"===e||"Null"===e||"NULL"===e)},construct:function(){return null},predicate:function(e){return null===e},represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"}},defaultStyle:"lowercase"})},pp00:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Querying from the command line\'\ndescription: \'Execute SPARQL queries directly from the command line.\'\n---\n\nThe default Comunica query engine that exposes most standard features is Comunica SPARQL,\nwhich uses the package name `@comunica/query-sparql`.\nIn this guide, we will install it _globally_, and show how it can be invoked from the command line.\n\n<div class="note">\nThis guide discusses querying over Linked Data on the Web, exposed via URLs.\n<a href="/docs/query/getting_started/query_cli_file/">Click here to query over local RDF files</a> instead.\n</div>\n\n<div class="video">\nWatch part of this guide in action <em>live</em> within this <a href="https://youtu.be/ydpdziVNw1k?t=671">Webinar recording</a>.\n</div>\n\n## 1. Installation\n\nSince Comunica runs on Node.js, make sure you have [Node.js installed](https://nodejs.org/en/) on your machine.\n\nNext, we can install Comunica SPARQL on our machine:\n```bash\n$ npm install -g @comunica/query-sparql\n```\n\n## 2. SPARQL querying over one source\n\nAfter installing Comunica SPARQL, you will be given access to several commands including `comunica-sparql`,\nwhich allows you to execute SPARQL queries from the command line.\n\nThis command requires one or more URLs to be provided as **sources** to query over.\nAs last argument, as **SPARQL query string** can be provided.\n\nFor example, the following query retrieves the first 100 triples from [DBpedia](https://fragments.dbpedia.org/2016-04/en):\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100"\n```\n\n<div class="note">\nGiven a URL, Comunica will automatically detect the <a href="/docs/query/advanced/source_types/">type of source</a> and handle it accordingly.\n</div>\n\nAs output, a JSON array of bindings for the selected variables will be returned:\n```\n[\n{"?s":"https://fragments.dbpedia.org/2016-04/en#dataset","?p":"http://www.w3.org/1999/02/22-rdf-syntax-ns#type","?o":"http://rdfs.org/ns/void#datasource"},\n{"?s":"https://fragments.dbpedia.org/2016-04/en#dataset","?p":"http://www.w3.org/1999/02/22-rdf-syntax-ns#type","?o":"http://www.w3.org/ns/hydra/core#Collection"},\n{"?s":"https://fragments.dbpedia.org/2016-04/en#dataset","?p":"http://www.w3.org/ns/hydra/core#search","?o":"https://fragments.dbpedia.org/2016-04/en#triplePattern"}\n...\n``` \n\n## 3. Query file input\n\nSince SPARQL queries can sometimes become very large, it is possible to supply them via a local file using the `-f` option.\n\nAssuming a file `path/myquery.sparql` exists, we can query over it as follows:\n\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en -f path/myquery.sparql\n```\n\n## 4. SPARQL querying over multiple sources\n\nOne key feature of Comunica is its ability to query over **multiple sources**.\nFor this, you can just supply any number of URLs as arguments.\nJust make sure that the last argument remains your query.\n\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    https://www.rubensworks.net/ \\\n    https://ruben.verborgh.org/profile/ \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100"\n```\n\n## 5. SPARQL CONSTRUCT and ASK\n\nNext to SPARQL `SELECT` queries,\nit is also possible to execute `CONSTRUCT` queries to produce RDF triples:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "CONSTRUCT WHERE { ?s ?p ?o } LIMIT 100"\n```\n```text\n<http://0-access.newspaperarchive.com.topcat.switchinc.org/Viewer.aspx?img=8716084> <http://dbpedia.org/property/accessdate> "2010-04-21"^^<http://www.w3.org/2001/XMLSchema#date>;\n    <http://dbpedia.org/property/date> "1939-01-02"^^<http://www.w3.org/2001/XMLSchema#date>;\n    <http://dbpedia.org/property/format> "PDF";\n    <http://dbpedia.org/property/isCitedBy> <http://dbpedia.org/resource/List_of_Attorneys_General_of_Wisconsin>;\n    <http://dbpedia.org/property/location> "Sheboygan, Wisconsin";\n    <http://dbpedia.org/property/page> "1";\n...\n```\n\n`ASK` queries will produce a boolean output:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "ASK { ?s ?p ?o }"\n```\n```\ntrue\n```\n\n## 6. Changing result format\n\n`SELECT` queries will be printed as JSON by default, and `CONSTRUCT` queries as [RDF TriG](https://www.w3.org/TR/trig/).\nThis can be overridden using the `-t` option.\n\nFor example, displaying results as SPARQL JSON results:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100" \\\n    -t \'application/sparql-results+json\'\n```\n```json\n{"head": {"vars":["s","p","o"]},\n"results": { "bindings": [\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/date","type":"uri"},"o":{"value":"1899-05-06","type":"literal","datatype":"http://www.w3.org/2001/XMLSchema#date"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/isCitedBy","type":"uri"},"o":{"value":"http://dbpedia.org/resource/Tierce_(unit)","type":"uri"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/newspaper","type":"uri"},"o":{"value":"Biloxi Daily Herald","type":"literal"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/page","type":"uri"},"o":{"value":"6","type":"literal"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/title","type":"uri"},"o":{"value":"A New System of Weights and Measures","type":"literal"}},\n{"s":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"},"p":{"value":"http://dbpedia.org/property/url","type":"uri"},"o":{"value":"http://0-access.newspaperarchive.com.lib.utep.edu/us/mississippi/biloxi/biloxi-daily-herald/1899/05-06/page-6?tag=tierce+wine&rtserp=tags/tierce-wine?page=2","type":"uri"}},\n...\n``` \n\n<div class="note">\nAll <a href="/docs/query/advanced/result_formats/">available formats</a> can be printed via <code>comunica-sparql --listformats</code>\n</div>\n\n## 7. Printing the query plan\n\nUsing the `--explain` option, the query plan can be printed via [different explain modes](/docs/query/advanced/explain/).\n\n## 8. Learn more\n\nThis guide only discussed the basic functionality of `comunica-sparql`.\nYou can learn more options by invoking the _help_ command:\n```text\n$ comunica-sparql evaluates SPARQL queries\n\nRecommended options:\n  -q, --query       Evaluate the given SPARQL query string                                                                                              [string]\n  -f, --file        Evaluate the SPARQL query in the given file                                                                                         [string]\n  -i, --inputType   Query input format (e.g., graphql, sparql)                                                                      [string] [default: "sparql"]\n  -t, --outputType  MIME type of the output (e.g., application/json)                                                                                    [string]\n\nOptions:\n  -c, --context            Use the given JSON context string or file (e.g., config.json)                                                                [string]\n      --to                 Destination for update queries                                                                                               [string]\n  -b, --baseIRI            base IRI for the query (e.g., http://example.org/)                                                                           [string]\n  -d, --dateTime           Sets a datetime for querying Memento-enabled archives                                                                        [string]\n  -l, --logLevel           Sets the log level (e.g., debug, info, warn, ...)                                                          [string] [default: "warn"]\n      --lenient            If failing requests and parsing errors should be logged instead of causing a hard crash                                     [boolean]\n  -v, --version            Prints version information                                                                                                  [boolean]\n      --showStackTrace     Prints the full stacktrace when errors are thrown                                                                           [boolean]\n      --httpTimeout        HTTP requests timeout in milliseconds                                                                                        [number]\n      --httpBodyTimeout    Makes the HTTP timeout take into account the response body stream read                                                      [boolean]\n      --unionDefaultGraph  If the default graph should also contain the union of all named graphs                                                      [boolean]\n  -p, --proxy              Delegates all HTTP traffic through the given proxy (e.g. http://myproxy.org/?uri=)                                           [string]\n      --listformats        Prints the supported MIME types                                                                                             [boolean]\n      --explain            Print the query plan                                                              [string] [choices: "parsed", "logical", "physical"]\n\nExamples:\n  comunica-sparql https://fragments.dbpedia.org/2016-04/en -q \'SELECT * { ?s ?p ?o }\'\n  comunica-sparql https://fragments.dbpedia.org/2016-04/en -f query.sparql\n  comunica-sparql https://fragments.dbpedia.org/2016-04/en https://query.wikidata.org/sparql ...\n  comunica-sparql hypermedia@https://fragments.dbpedia.org/2016-04/en sparql@https://query.wikidata.org/sparql ...\n```\n'},pwXB:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Blog'\ndescription: 'Blog posts, containing announcements or other news.'\nblog_index: true\n---\n"},pzZA:function(e,n,t){"use strict";var a=t("hyoZ"),o=Object.prototype.hasOwnProperty;e.exports=new a("tag:yaml.org,2002:set",{kind:"mapping",resolve:function(e){if(null===e)return!0;var n,t=e;for(n in t)if(o.call(t,n)&&null!==t[n])return!1;return!0},construct:function(e){return null!==e?e:{}}})},"q+Th":function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Query using the latest development version\'\ndescription: \'If you want to make use of the latest changes that are not released yet\' \n---\n\nWhile the [Comunica GitHub repository](https://github.com/comunica/comunica) receives regular commits,\nwith fixes for bugs or new features,\nthese changes are not always immediately published as a new release on the npm package manager.\n\nWhile we always recommend using a released version of Comunica,\nthere are situations where you may want to make use of the **latest development version** from GitHub instead.\nFor example, if your application depends on a new _feature_ or _fix_ in Comunica,\nand you already want to develop or test your application before the new Comunica release is available.\n\nIn this guide, we will do this by setting up the **Comunica development environment**.\n\n## 1. Setup the Comunica development environment\n\nIf you want to make use of the latest development version,\nyou will have to **clone** the GitHub repository,\nand **install** it via the [Yarn package manager](https://yarnpkg.com/):\n```bash\n$ git clone https://github.com/comunica/comunica.git\n$ cd comunica\n$ yarn install\n```\n\n<div class="note">\nSetting up the development via the npm package manager will not work due to the Comunica repository making use\nof the <a href="https://classic.yarnpkg.com/en/docs/workspaces/">Yarn workspaces functionality</a>.\n</div>\n\n## 2. Querying from the command line\n\nIf installation is successful, you can navigate to any package and make use of it\nsimilar to how you would when it has been installed via npm.\n\nFor example, executing a SPARQL query from the command line with Comunica SPARQL\ncan be done by navigating to `engines/query-sparql`, and invoking `bin/query.js`:\n```bash\n# cd engines/query-sparql\n$ node bin/query.js https://fragments.dbpedia.org/2016-04/en \\\n    "SELECT * WHERE { ?s ?p ?o } LIMIT 100"\n``` \n\nYou can execute any of the commands explained in the [CLI guide](/docs/query/getting_started/query_cli/)\nby simply replacing `comunica-sparql` with `node bin/query.js`.\n\nIf you want to [set up a SPARQL endpoint](/docs/query/getting_started/setup_endpoint/),\nyou can use `node/http.js` instead of `comunica-sparql-http`.\n\n## 3. Linking Comunica SPARQL to your package\n\nIf you have a [JavaScript application that makes use of Comunica SPARQL](/docs/query/getting_started/query_app/),\nthen you can **link** it to your local Comunica development environment.\n\nThis can be done by first indicating that Comunica SPARQL can be linked (starting from the Comunica development environment folder):\n```bash\n$ cd engines/query-sparql\n$ yarn link\n```\n\nNext, in the folder of your JavaScript package,\nwe can link Comunica SPARQL as follows:\n```bash\n$ yarn link "@comunica/query-sparql"\n```\n\nNow, your application will use the development version of Comunica instead.\n\n<div class="note">\nIf you want to go back to the npm version of Comunica SPARQL,\nthen you first have to unlink it from your application by running <code>yarn unlink "@comunica/query-sparql"</code>.\n</div>\n'},qJO7:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Algebra\'\ndescription: \'The internal representation of queries during query execution.\'\n---\n\nLike most query engines,\ninstead of internally working directly with a SPARQL query string,\nComunica works with an algebraic representation of a SPARQL query,\ncorresponding to the [SPARQL 1.1 algebra](https://www.w3.org/TR/sparql11-query/#sparqlQuery).\nThis SPARQL algebra makes it easier for operating on SPARQL operators in a consistent manner,\nand for applying transformations during query optimization.\n\n## Query Operation Actors\n\nAll actors on the [Query Operation bus](/docs/modify/advanced/buses/#query-operation)\ncorrespond to exactly one SPARQL algebra operator type.\nFor example, [`@comunica/actor-query-operation-construct`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-construct)\nhandles algebra operations with type `\'construct\'`.\n\n## SPARQLAlgebra.js\n\nConverting a query string to SPARQL algebra\nhappens in the [SPARQL Parse bus](/docs/modify/advanced/buses/#query-parse).\nThe [`@comunica/actor-query-parse-sparql`](https://github.com/comunica/comunica/tree/master/packages/actor-query-parse-sparql) actor\non this bus makes use of the [SPARQLAlgebra.js](https://github.com/joachimvh/SPARQLAlgebra.js) package.\n\nExamples on how the conversion between SPARQL query string and SPARQL algebra happens can be found in the tests: https://github.com/joachimvh/SPARQLAlgebra.js/tree/master/test\n\n## Converting a SPARQL query into algebra\n\nIf you want to quickly check what the algebra of a given SPARQL query string looks like,\nyou can make use of Comunica\'s [explain functionality](/docs/query/advanced/explain/) as follows:\n```bash\n$ comunica-sparql https://fragments.dbpedia.org/2016-04/en -q \'SELECT * { ?s ?p ?o }\' --explain parsed\n\n{\n  "type": "project",\n  "input": {\n    "type": "bgp",\n    "patterns": [\n      {\n        "termType": "Quad",\n        "value": "",\n        "subject": {\n          "termType": "Variable",\n          "value": "s"\n        },\n        "predicate": {\n          "termType": "Variable",\n          "value": "p"\n        },\n        "object": {\n          "termType": "Variable",\n          "value": "o"\n        },\n        "graph": {\n          "termType": "DefaultGraph",\n          "value": ""\n        },\n        "type": "pattern"\n      }\n    ]\n  },\n  "variables": [\n    {\n      "termType": "Variable",\n      "value": "s"\n    },\n    {\n      "termType": "Variable",\n      "value": "p"\n    },\n    {\n      "termType": "Variable",\n      "value": "o"\n    }\n  ]\n}\n```\n\nThis tool is therefore useful if you want to implement support for a SPARQL operator,\nbut you need to find out to what algebra operation this corresponds.\n\n## Converting algebra into a SPARQL query\n\nYou can also apply the reverse transformation from algebra to SPARQL query string,\nfor which you will need to globally install [SPARQLAlgebra.js](https://github.com/joachimvh/SPARQLAlgebra.js):\n```bash\n$ npm install -g sparqlalgebrajs\n$ sparqlalgebrajs -q -r \'\n{\n  "type": "project",\n  "input": {\n    "type": "bgp",\n    "patterns": [\n      {\n        "type": "pattern",\n        "termType": "Quad",\n        "value": "",\n        "subject": {\n          "termType": "Variable",\n          "value": "x"\n        },\n        "predicate": {\n          "termType": "Variable",\n          "value": "y"\n        },\n        "object": {\n          "termType": "Variable",\n          "value": "z"\n        },\n        "graph": {\n          "termType": "DefaultGraph",\n          "value": ""\n        }\n      }\n    ]\n  },\n  "variables": [\n    {\n      "termType": "Variable",\n      "value": "x"\n    },\n    {\n      "termType": "Variable",\n      "value": "y"\n    },\n    {\n      "termType": "Variable",\n      "value": "z"\n    }\n  ]\n}\n\'\n\nSELECT ?x ?y ?z WHERE { ?x ?y ?z }\n```\n'},"r/UL":function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Usage showcase'\ndescription: 'Examples of where Comunica is used.'\n---\n\nComunica is being used in a variety of places for its querying and RDF-related capabilities.\nBelow, a couple of these uses are listed.\nFeel free to [contact us](/ask/) if you want your use of Comunica added to this list.\n\n## LDflex\n\n[LDflex](https://github.com/LDflex/LDflex) is a JavaScript library provides a convenient syntax for quickly writing and executing queries in a developer-friendly way.\nUsing the power of Comunica and JSON-LD contexts, you can write expressions like `person.friends.firstName` to get a list of your friends.\n\nLDflex is used within the [Solid](https://solidproject.org/) community to easily [interact with one or more Solid data pods](https://github.com/solid/query-ldflex/).\nUsing the compact syntax of LDflex, it is very simple to query from within [React components](https://github.com/solid/react-components).\n\n## GraphQL-LD\n\n[GraphQL-LD](https://github.com/rubensworks/graphql-ld.js) is a JavaScript library\nthat allows Linked Data to be queried via [GraphQL](https://graphql.org/) queries and a JSON-LD context.\nThe approach involves converting a GraphQL query and JSON-LD context to a SPARQL query,\nwhich can then be executed by any SPARQL query engine [such as Comunica](https://github.com/rubensworks/graphql-ld-comunica.js).\n\nIt can also be used execute [authenticated queries over Solid data pods](https://github.com/rubensworks/GraphQL-LD-Comunica-Solid.js),\nfor which [reusable React components](https://github.com/rubensworks/solid-react-graphql-ld.js) are available.\n\n## Quadstore\n\n[Quadstore](https://github.com/belayeng/quadstore) is a [LevelDB](https://github.com/google/leveldb)-based graph database for Node.js and the browser.\n[Quadstore Comunica](https://github.com/belayeng/quadstore-comunica) is a SPARQL engine on top of Quadstore that is powered by Comunica.\n\n## RDF Parse\n\n[RDF Parse](https://github.com/rubensworks/rdf-parse.js) is a JavaScript library parses RDF based on content type or file name in a streaming manner.\nIt supports all of the major RDF serializations.\nInternally, this library makes use of the `rdf-parse` bus and actors from Comunica.\n\n## RDF Dereference\n\n[RDF Dereference](https://github.com/rubensworks/rdf-dereference.js) is a JavaScript library dereferences URLs to get its RDF contents.\nThis tool is useful in situations where you have a URL, and you just need the parsed triples/quads, without having to concern yourself with determining the correct content type and picking the correct parser.\nInternally, this library makes use of the `rdf-dereference` bus and actors from Comunica.\n\n## RDF Play\n\n[RDF Play](https://rdf-play.rubensworks.net/) is a Web-based tool for performing simple RDF operations, such as parsing, serializing and dereferencing from URLs.\nInternally, this library makes use of RDF parsers from the Comunica framework, which enable streaming processing of RDF.\n\n## ESWC Conference 2020\n\nAll metadata of the [ESWC Conference (2020)](https://2020.eswc-conferences.org/) is [queryable](https://query.2020.eswc-conferences.org/)\nvia a jQuery widget instance of Comunica.\nIt features several example queries over a [Triple Pattern Fragments](https://linkeddatafragments.org/concept/) interface through which the ESWC 2020 metadata is published.\n\n## Walder\n\n[Walder](https://github.com/KNowledgeOnWebScale/walder) offers an easy way \nto set up a website or Web API on top of decentralized knowledge graphs.\nIt uses Comunica for querying these knowledge graphs.\nhosted via Solid PODs, SPARQL endpoints, Triple Pattern Fragments interfaces, RDF files, and so on. \nUsing content negotiation, Walder makes the data in these knowledge graphs available to clients via HTML, RDF, and JSON-LD. \nUsers define in a configuration file which data Walder uses and how it processes this data.\n"},sXTL:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Board of Directors'\ndescription: 'The board makes decisions regarding the Comunica Association'\n---\n\nThe [Comunica Association](/association/) has a Board of Directors\nthat makes decisions with respect to the Comunica Association.\nThis page describes details on who are the members of this board, what it does, and how it works.\n\n## Members\n\n* [Ruben Taelman](https://www.rubensworks.net/) [(IDLab, Ghent University \u2013 imec)](https://knows.idlab.ugent.be/) - Codebase curator and maintainer\n* [Pieter Colpaert](https://pietercolpaert.be/) [(IDLab, Ghent University \u2013 imec)](https://knows.idlab.ugent.be/) - Strategic coordinator\n* [Jesse Wright](https://github.com/jeswr/) [(Australian National University)](https://cecs.anu.edu.au/) - Developer\n\n## Goals\n\nThe Board of Directors makes decisions concerning the following topics:\n\n* Determine long-term goals via the [roadmap](/roadmap/).\n* Suggest priorities of issues to the maintainers for short-term development via the [project boards](https://github.com/orgs/comunica/projects).\n* Coordinate future of the Comunica Association\n\nFurthermore, board meetings can be used to evaluate the maintenance and development of Comunica and its related dependencies,\nwhich includes development by externals via the [Bounty Program](/association/bounties/).\n\n## Becoming a Board Member\n\nThere are two ways to become a Board Member:\n\n1. Become a financial contributor via [Open Collective](https://opencollective.com/comunica-association) of the the Board Member tier\n2. Become a regular [contributor](/contribute/) in any other way, with a dedication of at least four hours per week on average.\n\n## Decision-making Process\n\nAt least once every year, the board virtually meets for a board meeting.\nNot all members are required to be present at each meeting.\nThe chair is expected to prepare an agenda ahead of time on https://github.com/comunica/association/blob/master/board-meetings/next.md,\nwhich should contain points raised by the board members.\nA meeting may be skipped if there are no objections from members.\n\nThe chair is appointed by the board members, and may be changed at any time through a decision.\nThe title of \"codebase curator\" is reserved for one person,\nand can only be passed on to someone else by the current codebase curator.\n\nDuring the meeting, decisions can be made,\nand every member can place exactly one vote.\nIn case of a tie, the final decision is up to the chair.\nThe codebase curator may optionally overrule any (final) vote if this person considers this decision to be detrimental to the future of Comunica or the Comunica Association.\nNon-attending members may raise their vote for up to two weeks after the meeting after reading the meeting minutes.\nOnce a vote is final, an action will be carried out by the executive contributors.\n\nMinutes are scribed for each meeting by a volunteer,\nand are to appear afterwards on https://github.com/comunica/association/tree/master/board-meetings\nThe minutes are sent to all board members shortly after each meeting.\n"},spQ0:function(e,n,t){"use strict";var a=t("hyoZ");e.exports=new a("tag:yaml.org,2002:merge",{kind:"scalar",resolve:function(e){return"<<"===e||null===e}})},tN50:function(e,n,t){"use strict";var a=t("Y2Yi");function o(e,n,t,a,o){this.name=e,this.buffer=n,this.position=t,this.line=a,this.column=o}o.prototype.getSnippet=function(e,n){var t,o,i,r,s;if(!this.buffer)return null;for(e=e||4,n=n||75,t="",o=this.position;o>0&&-1==="\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(o-1));)if(o-=1,this.position-o>n/2-1){t=" ... ",o+=5;break}for(i="",r=this.position;r<this.buffer.length&&-1==="\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(r));)if((r+=1)-this.position>n/2-1){i=" ... ",r-=5;break}return s=this.buffer.slice(o,r),a.repeat(" ",e)+t+s+i+"\n"+a.repeat(" ",e+this.position-o+t.length)+"^"},o.prototype.toString=function(e){var n,t="";return this.name&&(t+='in "'+this.name+'" '),t+="at line "+(this.line+1)+", column "+(this.column+1),e||(n=this.getSnippet())&&(t+=":\n"+n),t},e.exports=o},tfEw:function(e,n,t){"use strict";const a=t("n0UO"),o=t("X+87");e.exports=function(e){const n=Object.assign({},e);return n.delimiters=o.arrayify(n.delims||n.delimiters||"---"),1===n.delimiters.length&&n.delimiters.push(n.delimiters[0]),n.language=(n.language||n.lang||"yaml").toLowerCase(),n.engines=Object.assign({},a,n.parsers,n.engines),n}},uEUi:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Approximate Membership Functions\'\ndescription: \'An overview of research that has been done on AMFs during query execution.\'\n---\n\nApproximate Membership Functions (AMFs) are probabilistic data structures\nthat efficiently can determine membership of a set,\nat the cost of false positives.\nThey are typically much smaller than a full dataset,\nmaking them a useful pre-filtering method.\n\nAMFs have been investigated in the context of reducing the number of HTTP requests\nwhen querying over a [Triple Pattern Fragments](https://linkeddatafragments.org/specification/triple-pattern-fragments/) interface.\n\n## 1. Materials\n\n* [Academic article](https://comunica.github.io/Article-SSWS2020-AMF/) ([Initial work that was built upon](https://linkeddatafragments.org/publications/iswc2015-amf.pdf))\n* [Reproducible experiments](https://github.com/comunica/Experiments-AMF)\n* [AMF-enabled Comunica engine](https://github.com/comunica/comunica-feature-amf/)\n* [AMF-enabled LDF Server](https://github.com/LinkedDataFragments/Server.js/tree/feature-handlers-amf-2)\n\n## 2. Main findings\n\n[_Learn more in our academic article._](https://comunica.github.io/Article-SSWS2020-AMF/)\n\n### AMFs lead to faster complete results\n\nDue to the reduction of HTTP requests, complete results come in earlier.\nIn some cases, the first result can be delayed.\n\n<center>\n  <img src="https://comunica.github.io/Article-SSWS2020-AMF/img/experiments/client_algos/query_times_F3.svg" alt="Query times for F3" style="width:75%" \\>\n</center>\n\n### Caching significantly speeds up query execution\n\nAn HTTP cache like NGINX achieves the best results, but additionally caching AMF filters server-side is not worth the effort.\n\n<center>\n  <img src="https://comunica.github.io/Article-SSWS2020-AMF/img/experiments/caching/plot_no_c.svg" alt="Query times for caching" style="width:75%" \\>\n</center>\n\n### Extreme false-positive probabilities slow down query execution\n\nOn average, a false-positive probability of 1/64 leads to the lowest overall query evaluation times for this experiment.\n\n<center>\n  <img src="https://comunica.github.io/Article-SSWS2020-AMF/img/experiments/probabilities/plot_no_c.svg" alt="Query times for different false-positive probabilities" style="width:75%" \\>\n</center>\n\n## 3. Recommendations for data publishers\n\nBased on the conclusions of our experimental results,\nwe derived the following guidelines for publishers who aim to use the AMF feature:\n\n* Enable **HTTP caching** with a tool such as [NGINX](https://www.nginx.com/).\n* **Pre-compute AMFs** (or at least cache) AMFs of size 10.000 or higher.\n* If AMFs can be cached, prefer **Bloom filters** over GCS.\n* Use a false-positive **probability of 1/64**.\n'},vQl5:function(e,n,t){"use strict";var a=t("hyoZ");e.exports=new a("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return null!==e?e:[]}})},vS18:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Solid\'\ndescription: \'Solid \u2013 the Web-based decentralization ecosystem \u2013 can be queried with Comunica.\'\n---\n\n## What is Solid\n\n[Solid](https://solidproject.org/) is a Web-based decentralization ecosystem\nwhere people are in control over their own data.\n\nSolid achieves this by giving everyone control over their own **personal data pod**.\nApplications are completely separate, and have to ask permission to access your data.\n\n## Querying Solid pods with Comunica\n\nSince Solid and Comunica have a compatible technology stack,\nComunica can be used to query over Solid data pods.\nThe default [Comunica SPARQL engine](/docs/query/getting_started/query_cli/)\ncan directly be used to query over public Solid data pods as long as you are querying over public data.\n\nIf you want to **query over data pods that require authentication**,\nyou can use [Comunica SPARQL Solid](https://github.com/comunica/comunica-feature-solid/tree/master/engines/query-sparql-solid).\nHereafter, we list some examples on how to use it from the command line.\nPlease refer to the [README of Comunica SPARQL Solid](https://github.com/comunica/comunica-feature-solid/tree/master/engines/query-sparql-solid#readme)\nfor more details around using it in JavaScript apps, or exposing documents as a SPARQL endpoint.\n\n**Querying an existing document**:\n```bash\n$ comunica-sparql-solid --idp https://solidcommunity.net/ \\\n  http://example.org/existing-document.ttl \\\n  "SELECT * { ?s ?p ?o }"\n```\n\n**Creating a new document**:\n```bash\n$ comunica-sparql-solid --idp https://solidcommunity.net/ \\\n  http://example.org/new-document.ttl \\\n  "INSERT DATA { <ex:s> <ex:p> <ex:o> }"\n```\n\n**Updating an existing document**:\n```bash\n$ comunica-sparql-solid --idp https://solidcommunity.net/ \\\n  http://example.org/existing-document.ttl \\\n  "INSERT DATA { <ex:s> <ex:p> <ex:o> }"\n```\n\nPlease be aware that that there are several [open known issues](https://github.com/comunica/comunica-feature-solid/tree/master/engines/query-sparql-solid#known-issues) relating to other software.\n\n[LDflex](/docs/query/usage/#ldflex) and [GraphQL-LD](/docs/query/usage/#graphql-ld) are examples of tools that ship with Comunica SPARQL Solid.\n'},vuIU:function(e,n,t){"use strict";function a(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function o(e,n,t){return n&&a(e.prototype,n),t&&a(e,t),e}t.d(n,"a",(function(){return o}))},"w+qe":function(e,n,t){"use strict";function a(e,n){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=n,this.message=(this.reason||"(unknown reason)")+(this.mark?" "+this.mark.toString():""),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||""}a.prototype=Object.create(Error.prototype),a.prototype.constructor=a,a.prototype.toString=function(e){var n=this.name+": ";return n+=this.reason||"(unknown reason)",!e&&this.mark&&(n+=" "+this.mark.toString()),n},e.exports=a},xNmn:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Comunica Association\'\ndescription: \'Organization for ensuring the maintenance and development of the Comunica\'\n---\n\nThe Comunica Association is a **non-profit organization** for establishing a roadmap,\nand ensuring the maintenance and development of the Comunica framework and its dependencies.\n\n## Members and sponsors\n\nIf your organization is using Comunica, and you want to support its continued maintenance and future development,\nyou may consider [**donating or becoming a sponsor via Open Collective**](https://opencollective.com/comunica-association).\nThis will allow the association to fund core maintainers of Comunica to manage issues and pull requests, and to fund overall development.\nFurthermore, your organization will have the option to prioritize certain issues.\nAnother option is to become a **board member**, which will give your organization access to [board meetings](/association/board/) of the Comunica Association\nwhich will enable your organization to collaboratively determine the long-term vision and roadmap of Comunica and the Association.\n\n<div class="docs-intro-img">\n  <img src="/img/association_members.svg" alt="Comunica Association Members and Sponsors" style="width:100%" \\>\n</div>\n\nFeel free to [contact us](mailto:ruben.taelman@ugent.be) if you want to discuss alternative forms of support,\nor regarding any related questions.\n\n<div className="grid">\n\n  <a href="https://opencollective.com/comunica-association" className="card">\n    <h3>New Member/Sponsor &rarr;</h3>\n    <p>Join via Open Collective</p>\n  </a>\n\n  <a href="/association/board/" className="card">\n    <h3>Board of Directors &rarr;</h3>\n    <p>Learn more about the board</p>\n  </a>\n</div>\n\n## Bounties\n\nAnother goal of the Comunica Association, is to\n**connect organizations** that are in **need of improvements or features**, to **developers** seeking funding.\n\n<div class="docs-intro-img">\n  <img src="/img/association_overview.svg" alt="Comunica Association Overview" style="width:75%" \\>\n</div>\n\nUsing our Bounty Program,\norganizations can place [**bounties on issues**](/association/bounties/),\nand developers may work on them for an agreed upon price.\nThese bounties are primarily useful for issues that have a clearly defined scope, and are not too large.\nLarger issues with an unclear scope may be better suited for becoming part of the general roadmap,\nwhich is decided by Board Members,\nof which [your organization can also become a part of](#members-and-sponsors).\n\n<div className="grid">\n  <a href="/association/bounties/" className="card">\n    <h3>List of bounties &rarr;</h3>\n    <p>Express your interest to work on a feature or bug</p>\n  </a>\n\n  <a href="/association/bounty_process/" className="card">\n    <h3>Bounty procedures &rarr;</h3>\n    <p>Learn more about how bounties are placed and managed</p>\n  </a>\n</div>\n\n## Learn more\n\nIf you want to be notified about future developments around this association, submit your email address below!\n\n<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSe9sewt6jInvp8BnbjsudQqeCyTeEPE9PgGofq9AbxRLPIpag/viewform?embedded=true" width="100%" height="420" frameborder="0" marginheight="0" marginwidth="0" scrolling="no">Loading...</iframe>\n\nThe Comunica Association is an activity within [Open Knowledge Belgium](https://openknowledge.be/),\nand our budget is visible on [Open Collective](https://opencollective.com/comunica-association).\n\n<p className="bounty-page-footer">\n  * Sponsors that want to have an issue prioritized should <a href="mailto:ruben.taelman@ugent.be">contact us</a>.\n  The board will decide the final order of issue handling based on historical sponsorship contribution and developer availability.\n</p>\n'},ydHo:function(e,n,t){"use strict";var a=t("Y2Yi"),o=t("hyoZ");function i(e){return 48<=e&&e<=55}function r(e){return 48<=e&&e<=57}e.exports=new o("tag:yaml.org,2002:int",{kind:"scalar",resolve:function(e){if(null===e)return!1;var n,t,a=e.length,o=0,s=!1;if(!a)return!1;if("-"!==(n=e[o])&&"+"!==n||(n=e[++o]),"0"===n){if(o+1===a)return!0;if("b"===(n=e[++o])){for(o++;o<a;o++)if("_"!==(n=e[o])){if("0"!==n&&"1"!==n)return!1;s=!0}return s&&"_"!==n}if("x"===n){for(o++;o<a;o++)if("_"!==(n=e[o])){if(!(48<=(t=e.charCodeAt(o))&&t<=57||65<=t&&t<=70||97<=t&&t<=102))return!1;s=!0}return s&&"_"!==n}for(;o<a;o++)if("_"!==(n=e[o])){if(!i(e.charCodeAt(o)))return!1;s=!0}return s&&"_"!==n}if("_"===n)return!1;for(;o<a;o++)if("_"!==(n=e[o])){if(":"===n)break;if(!r(e.charCodeAt(o)))return!1;s=!0}return!(!s||"_"===n)&&(":"!==n||/^(:[0-5]?[0-9])+$/.test(e.slice(o)))},construct:function(e){var n,t,a=e,o=1,i=[];return-1!==a.indexOf("_")&&(a=a.replace(/_/g,"")),"-"!==(n=a[0])&&"+"!==n||("-"===n&&(o=-1),n=(a=a.slice(1))[0]),"0"===a?0:"0"===n?"b"===a[1]?o*parseInt(a.slice(2),2):"x"===a[1]?o*parseInt(a,16):o*parseInt(a,8):-1!==a.indexOf(":")?(a.split(":").forEach((function(e){i.unshift(parseInt(e,10))})),a=0,t=1,i.forEach((function(e){a+=e*t,t*=60})),o*a):o*parseInt(a,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&e%1===0&&!a.isNegativeZero(e)},represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0"+e.toString(8):"-0"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}})},yl98:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'Components.js\'\ndescription: \'Components.js is the dependency injection framework that Comunica uses to wire components via config files.\'\n---\n\nA direct consequence of the high modularity of Comunica is that it leads to\na high number of **modules that need to be wired together** before they can be used.\n\nComunica makes use of the **dependency injection framework [Components.js](https://componentsjs.readthedocs.io/en/latest/)**\nto take care of this wiring of modules.\nIn essence, Components.js allows you to create [JSON-LD](https://json-ld.org/) configuration files\nin which you _declaratively_ define which components you want to instantiate using what parameters.\nComponents.js can then _read_ these configuration files, and instantiate them as runtime JavaScript objects.\n\nWhile there is [detailed documentation available for Components.js](https://componentsjs.readthedocs.io/en/latest/),\nwe summarize the most important parts for Comunica on this page.\n\n<div class="note">\nBefore you get into the details of Components.js,\nwe recommend you first follow <a href="/docs/modify/getting_started/">guides on getting started with modifying Comunica</a>.\n</div>\n\n## Terminology\n\nBefore you continue reading this guide,\nit is important to understand the three following concepts:\n\n* **Module:** A collection of **components**. _For example, an npm package._\n* **Component:** Something that can be instantiated. _For example, a JavaScript/TypeScript class._\n* **Instance:** An instantiated **component**. _For example, a JavaScript/TypeScript class instance._\n\nFor example, the npm package `@comunica/actor-query-operation-reduced-hash` is a **module**\nthat exposes a single **component** `ActorQueryOperationReducedHash`,\nwhich implements the SPARQL `REDUCED` operator.\nDuring dependency injection, any number of **instances** of the component `ActorQueryOperationReducedHash`\ncan be created, possibly with different parameters values.\n\n## Describing modules in JSON-LD\n\nThe `components/` directory of each package contains JSON-LD representations of the module and its components,\nwhich **describe how components can be instantiated**.\nAs of Comunica version 2.x, the contents of this directory are automatically generated\nusing [Components-Generator.js](https://github.com/LinkedSoftwareDependencies/Components-Generator.js/),\nwhich is invoked when running `yarn run build`.\n\nWhile **these files should never be created or modified manually**,\nsome examples below are shown to explain their most important parts.\n\n`components/components.jsonld`: (_root components file_)\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-reduced-hash/^2.0.0/components/context.jsonld"\n  ],\n  "@id": "npmd:@comunica/actor-query-operation-reduced-hash",\n  "@type": "Module",\n  "requireName": "@comunica/actor-query-operation-reduced-hash",\n  "import": [\n    "caqorh:components/ActorQueryOperationReducedHash.jsonld"\n  ]\n}\n```\n\n`components/ActorQueryOperationReducedHash.jsonld` (simplified):\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-reduced-hash/^2.0.0/components/context.jsonld",\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/core/^2.0.0/components/context.jsonld",\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-operation/^2.0.0/components/context.jsonld"\n  ],\n  "@id": "npmd:@comunica/actor-query-operation-reduced-hash",\n  "components": [\n    {\n      "@id": "caqorh:components/ActorQueryOperationReducedHash.jsonld#ActorQueryOperationReducedHash",\n      "@type": "Class",\n      "requireElement": "ActorQueryOperationReducedHash",\n      "extends": "cbqo:components/ActorQueryOperationTypedMediated.jsonld#ActorQueryOperationTypedMediated",\n      "comment": "A comunica Reduced Hash Query Operation Actor.",\n      "parameters": [\n        {\n          "@id": "caqorh:components/ActorQueryOperationReducedHash.jsonld#ActorQueryOperationReducedHash_args_cacheSize",\n          "range": "xsd:integer",\n          "default": "100"\n        },\n        {\n          "@id": "caqorh:components/ActorQueryOperationReducedHash.jsonld#ActorQueryOperationReducedHash_args_mediatorQueryOperation",\n          "range": "cc:components/Mediator.jsonld#Mediator"\n        }\n      ],\n      "constructorArguments": [\n        {\n          "@id": "caqorh:components/ActorQueryOperationReducedHash.jsonld#ActorQueryOperationReducedHash_args__constructorArgument",\n          "fields": [\n            {\n              "keyRaw": "cacheSize",\n              "value": {\n                "@id": "caqorh:components/ActorQueryOperationReducedHash.jsonld#ActorQueryOperationReducedHash_args_cacheSize"\n              }\n            },\n            {\n              "keyRaw": "mediatorQueryOperation",\n              "value": {\n                "@id": "caqorh:components/ActorQueryOperationReducedHash.jsonld#ActorQueryOperationReducedHash_args_mediatorQueryOperation"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\nThe `import` key allows components to be defined across different files,\nwhere its values internally translate into a local file path.\nFor example, `"caqorh:components/ActorQueryOperationReducedHash.jsonld"`\ncorresponds to the local file `components/ActorQueryOperationReducedHash.jsonld`.\n\nThe prefix `caqorh:` identifies the scope of this package.\nInternally, this gives all files a unique URL\nthat makes all modules and components _semantic_ and fully dereferenceable.\nFor example, `"caqorh:components/ActorQueryOperationReducedHash.jsonld"`\nexpands to the URL https://linkedsoftwaredependencies.org/bundles/npm/%40comunica%2Factor-query-operation-reduced-hash/^2.0.0/components/ActorQueryOperationReducedHash.jsonld.\n\n<div class="note">\n<a href="https://linkedsoftwaredependencies.org/">Linked Software Dependencies</a> is a service\nthat exposes all npm packages as JSON-LD,\nwhich forms a key element in Components.js.\n</div>\n\nLearn more in the Components.js documentation on [modules](https://componentsjs.readthedocs.io/en/latest/configuration/modules/)\nand [components](https://componentsjs.readthedocs.io/en/latest/configuration/components/general/).\n\n## Context files\n\nThe so-called context is another file in the `components/` directory that will be automatically generated using\n[Components-Generator.js](https://github.com/LinkedSoftwareDependencies/Components-Generator.js/)\nwhen invoking `yarn run build`.\n\nThis context is needed because\nour components and config files always make use of URLs as identifiers for things (`@id` in JSON-LD).\nSince URLs sometimes can become long, we make use of _JSON-LD context files_\nto **define shortcuts and prefixes for some URLs**.\n\nFor example, the context for our reduced actor (defined in `components/context.jsonld`) could look as follows (simplified):\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/componentsjs/^5.0.0/components/context.jsonld",\n    {\n      "npmd": "https://linkedsoftwaredependencies.org/bundles/npm/",\n      "caqorh": "npmd:@comunica/actor-query-operation-reduced-hash/^2.0.0/",\n      "ActorQueryOperationReducedHash": {\n        "@id": "caqorh:components/ActorQueryOperationReducedHash.jsonld#ActorQueryOperationReducedHash",\n        "@prefix": true,\n        "@context": {\n          "cacheSize": {\n            "@id": "caqorh:components/ActorQueryOperationReducedHash.jsonld#ActorQueryOperationReducedHash_args_cacheSize"\n          },\n          "mediatorQueryOperation": {\n            "@id": "caqorh:components/ActorQueryOperationReducedHash.jsonld#ActorQueryOperationReducedHash_args_mediatorQueryOperation"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\nThe relevant entries in this file that become reusable are `caqorh`, `ActorQueryOperationReducedHash`, `cacheSize`, and `mediatorQueryOperation`.\nDo note that `cacheSize` and `mediatorQueryOperation` will _only_ be usable within instances of `ActorQueryOperationReducedHash`, i.e., when instantiating `ActorQueryOperationReducedHash` via `"@type"`.\n\nIf you want to use these prefixes in any other file,\nthe full URL of this context has to be used in `"@context"`.\nThis URL will always be in the form of `"https://linkedsoftwaredependencies.org/bundles/npm/<my-package>/^<major-version-of-my-package>.0.0/components/context.jsonld"`.\n\n## Creating configurations in JSON-LD\n\nConfiguration files are used to **instantiate components**.\nWhile modules and components are defined in the `components/` folder,\nwe typically create our config files in `config/`.\nWe also define these as JSON-LD files, with pointers to our components files.\n\nThe instantiation of a Comunica engine could look like this:\n```json\n{\n  "@context": [\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/runner/^2.0.0/components/context.jsonld",\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-init-query/^2.0.0/components/context.jsonld",\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-reduced-hash/^2.0.0/components/context.jsonld",\n    "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-operation-construct/^2.0.0/components/context.jsonld"  \n  ],\n  "@id": "urn:comunica:my",\n  "@type": "Runner",\n  "actors": [\n    {\n      "@id": "urn:comunica:default:init/actors#query",\n      "@type": "ActorInitQuery"\n    },\n    {\n      "@id": "urn:comunica:default:query-operation/actors#reduced",\n      "@type": "ActorQueryOperationReducedHash",\n      "mediatorQueryOperation": { "@id": "urn:comunica:default:query-operation/mediators#main" },\n      "mediatorHashBindings": { "@id": "urn:comunica:default:hash-bindings/mediators#main" }\n    },\n    {\n      "@id": "urn:comunica:default:query-operation/actors#construct",\n      "@type": "ActorQueryOperationConstruct",\n      "mediatorQueryOperation": { "@id": "urn:comunica:default:query-operation/mediators#main" }\n    }\n  ]\n}\n```\n\nLearn more in the full Components.js documentation on [configs](https://componentsjs.readthedocs.io/en/latest/configuration/configurations/semantic/).\n\n## Package.json contents\n\nIf you want to expose components or use modular configs in your npm package,\n**you must enable a flag in your `package.json` file so that Components.js can find your npm package**:\n```text\n{\n  ...\n  "lsd:module": true\n  ...\n}\n```\n\nLearn more in the full Components.js documentation on [exposing components](https://componentsjs.readthedocs.io/en/latest/getting_started/basics/exposing_components/).\n\n### More control over Components.js configuration (optional)\n\nWhile this is optional,\nyou can configure yourself where Components.js can find required files (components, contexts, configs) in your npm package**.\n\nFor this, you can add the following entries to your `package.json` file:\n```text\n{\n  ...\n  "lsd:module": "https://linkedsoftwaredependencies.org/bundles/npm/my-package",\n  "lsd:components": "components/components.jsonld",\n  "lsd:contexts": {\n    "https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/components/context.jsonld": "components/context.jsonld"\n  },\n  "lsd:importPaths": {\n    "https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/components/": "components/",\n    "https://linkedsoftwaredependencies.org/bundles/npm/my-package/^1.0.0/config/": "config/"\n  }\n  ...\n}\n```\n\n_On each line, make sure to replace `my-package` with your package `name`._\n\nThese entries have the following meaning:\n\n* `lsd:module`: The URL that corresponds to your npm package. This will mostly be `https://linkedsoftwaredependencies.org/bundles/npm/` appended by your package name.\n* `lsd:components`: Local path to your root components file. This will mostly be `components/components.jsonld`.\n* `lsd:contexts`: The mapping of context URLs to local context files. This will typically contain only one entry for `components/context.jsonld`, but can be empty. This is used by Components.js when looking up contexts to first look in the local file system, to avoid expensive HTTS(S) lookups if the file already exists locally.\n* `lsd:importPaths`: The mapping of component and config files to local files. This will typically contain entries for `components/` and `config/`. This is used by Components.js when looking up components or config imports to first look in the local file system, to avoid expensive HTTS(S) lookups if the file already exists locally.\n'},yojd:function(e,n,t){"use strict";t.r(n),n.default="---\ntitle: 'Querying in a JavaScript browser app'\ndescription: 'Execute SPARQL queries from within your client-side browser application using the JavaScript API.'\n---\n\nComunica can run in both [Node.js JavaScript applications](/docs/query/getting_started/query_app/),\nand as **client-side applications in Web browsers**.\n\n## 1. Using a pre-built version\n\nThe easiest way to use Comunica in your Web app,\nis by using a pre-built Comunica SPARQL version that is served via a GitHub CDN:\n```html\n<script src=\"http://rdf.js.org/comunica-browser/versions/2/engines/query-sparql/comunica-browser.js\"><\/script>\n<script language=\"JavaScript\">\n  new Comunica.QueryEngine().queryBindings(`\n  SELECT * {\n    ?s ?p <http://dbpedia.org/resource/Belgium>.\n    ?s ?p ?o\n  } LIMIT 100\n`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n}).then(function (bindingsStream) {\n  bindingsStream.on('data', function (data) {\n    // Each variable binding is an RDFJS term\n    console.log(data.get('s').value + ' ' + data.get('p').value + ' ' + data.get('o').value);\n  });\n});\n<\/script>\n```\n\n<div class=\"note\">\nThe code example above will always make use of the the latest Comunica version in the 2.x.x range.\nInstead, you can <a href=\"https://github.com/rdfjs/comunica-browser#readme\">use a specific version</a>.\n</div>\n\nThe full API of Comunica is available under the `Comunica` namespace.\nMore information on its usage can be found in the guide on\n[using Comunica in a JavaScript app](/docs/query/getting_started/query_app/).\n\n## 2. Bundling for the browser\n\nComunica is compatible with browser bundler tools such as [Webpack](https://www.npmjs.com/package/webpack)\nand [browserify](http://browserify.org/).\nIf you are not familiar with these tools,\nyou can read the following guides:\n* [Webpack: Creating a Bundle \u2013 getting started](https://webpack.js.org/guides/getting-started/#creating-a-bundle)\n\nYou will need to create a \"UMD bundle\" and supply a name (e.g. with the -s Comunica option in browserify).\n\n<div class=\"note\">\nRefer to our specific guide on\n<a href=\"/docs/modify/advanced/browser_builds/\">building for the browser</a>\nif you want to build specific configurations of Comunica for the browser.\n</div>\n"},z08I:function(e,n,t){"use strict";var a=t("2RPy");function o(e,n){for(var t in n)i(n,t)&&(e[t]=n[t])}function i(e,n){return Object.prototype.hasOwnProperty.call(e,n)}e.exports=function(e){a(e)||(e={});for(var n=arguments.length,t=1;t<n;t++){var i=arguments[t];a(i)&&o(e,i)}return e}},zVPR:function(e,n,t){"use strict";t.r(n),n.default='---\ntitle: \'2019-10-26: Tutorial at ISWC 2019\'\ndescription: \'Comunica and Solid tutorial at the ISWC 2019 conference\'\n---\n\n<div class="docs-intro-img">\n  <a href="https://iswc2019.semanticweb.org/"><img src="https://iswc2018.blogs.auckland.ac.nz/files/2018/08/logo2019-vbhziv.png" alt="ISWC 2019" style="width:50%" /></a>\n</div>\n\nOn October 26th 2019, a tutorial about Solid and Comunica was given at the ISWC 2019 conference, in Auckland, New Zealand.\n\nAll materials and slides can be found on [the tutorial\'s web page](https://comunica.github.io/Tutorial-ISWC2019-Solid-Comunica/).\n'}},[["GZg/",0,1,5,2,4]]]);